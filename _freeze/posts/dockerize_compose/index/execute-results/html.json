{
  "hash": "3d448ab16cc9b576a2ee9b50e6baca3c",
  "result": {
    "markdown": "---\ntitle: \"A  straightforward strategy to get your Shiny app online, securely and continuously\nupdated. \"\ndescription: \"This is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\"\nsubtitle: \"Github, Docker-compose, EC2 version\"\ncategories: [Docker, Shiny, docker-compose]\nimage: \"img/rshiny.png\"\n#editor: \n#  markdown: \n#    wrap: 72\nformat:\n  pdf:\n    toc: true\ndate: last-modified\n#categories: [Neovim]\n#image: \"img/nvimlogo.png\"\n---\n\n\n\n\n::: column-margin\n![under construction](img/crane.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n# Introduction\n\nThis is the first in a series of posts offering suggested strategies for\nleveraging open source technologies to provide straight-forward\nsolutions to one of the central challenges in the practice of data\nscience, i.e. how to effectively communicate analysis results to clients\nand collaborators. The list of open-source technologies (software stack) we\nsuggest for employment is: linux, R, Shiny, Docker, Git, and Caddy. In\nthis post we'll make use of two cloud services: Github and Amazon Web Service\n(AWS). Further\nposts will describe alternate constructions, e.g. using the low cost\ncloud service: Hetzner.\n\nAlso described in other posts are strategies that avoid Github and\ndocker-compose. This approach\nprovides a simpler initial construction, but a more labor intensive updating\nprocess.  \n \n\nThis initial post provides a minimal, proof-of-concept example of how to\napply these technologies for hosting an interactive Shiny application.\n\nIn the following we start with a very simple, but hopefully still useful,\nstand-alone Shiny app developed on our local workstation.   Then after some\nstraightforward interfacing with the AWS environment, we  push\nthe Shiny app into the cloud, and end up with a secure (encrypted and\nauthenticated) app running on a website with a custom domain name. \n\n# Methods\n\nStart by creating a repository (repo) for the project. The best way to do this is to\ninitiate the repo on Github and then `clone` it to your local workstation. Start\nby logging in to Github and creating a new empty repo, call it power1_app. \nOn your local workstation navigate to your Shiny development directory, say\n`~/prj` and  clone the power1_app repo from Github:\n\n\n\n::: {.callout-note collapse=\"true\"}\n## Details for creating a Github repo follow: \n\n-   login to github (screenshot)\n\n-   click on `new`. Then in `repository name` field enter `power1`.\n    (Make the\n-   make the repo private, we only want to share with our client at this point).\n-   create the repo. Click `Create repository` green button at the bottom of\n    the page.\n-   on your laptop cd to development directory, say ~/prj and  clone the github repo:\n``` sh\ngit clone https://github.com/rgt47/power1_app.git\n```\n:::\n\n::: column-margin\n![](img/git1.png)\n:::\n\nAfter cloning the repo to ~/prj/power1_app cd into the directory and create two\nnew sub-directories, `power1_shiny` and `site`. These directories will house our\nshiny app and our web site landing page file, respectively. \n\nLets jump ahead to the point where you've  just finished developing a new Shiny app,\nnamed `power1_shiny` . (The methods described here apply generically to any\nShiny app, but we'll use one of our own for illustration). See the\n`R/Shiny` code for our `power1_shiny` app (`app.R`) [here](#appendix-1) in appendix 1.\n\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show the `power1_shiny/app.R` code\"}\nui <- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver <- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot <- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff <- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\n```\n\n\n\n\n\n\nWe can test the app locally in our \ndevelopment directory, say `power1_app`, by runnning it with the following command.\n\n``` sh\nR -e \"library(shiny); runApp('power1_shiny/app.R', launch=T)\"\n```\n\nThis command will  run the R\nprogram, load the Shiny package, and launch the app in your default browser.\n\nFigure 1 below shows the Shiny app running locally in a browser, it consists of a widget to select the sample size and provide a dynamic\nvisualization (2D plot) of the power as a function of the standardized\neffect size:\n\n::: column-margin\n![*Shiny app*](img/shinyapppower1.png)\n:::\n\nOnce we determine our app is working as designed, the next step is to set up a\nsecure hosting environment on a virtual server. Once the app is hosted the we\nsimply need to send a link and security credentials to  our collaborators for\nthem to have secure access to the Shiny app. There are many ways to accomplish\nthe hosting. Here we'll describe a straightforward and efficient approach using\nmainstream cloud services and open source tools. That is, we'll describe how to\n'spin' up a server on Amazon Web Service EC2 and in just a few steps, through\nthe application of Docker, R, Shiny, and Caddy we'll\nhave a fully functioning secure web app to share with colleagues.\n\n## Hosting\n\n::: column-margin\n![*Data flow *](img/blogdockerizeflow.png)\n:::\n\nFigure 2 illustrates the tools we'll use and the flow of program and\nconfiguration files. In order to host `power1` online we'll need to complete the\nfollowing tasks:\n\n1.  create a virtual server (connected via ssh) with a firewall\n2. obtain a static IP address (to identify the server online)\n3.  obtain a domain name (name for IP address)\n4.  install and configure a webserver (tool to interact with https protocol requests and\n    respond)\n5.  obtain and install an SSL certificate (to allow encrypted communication)\n6.  setup an authentication method (password protection)\n7.  configure a reverse proxy method (translate https, port 443, requests to Shiny, port 3838)\n\nAt first glance these 7 requirements can appear daunting, but on closer\ninspection all can be met with relative ease and minimal  cost ( using a\ncloud-hosting service, e.g. Amazon's EC2 or Digital Ocean, and a\n\"leased\" domain name from, e.g. GoDaddy, or Amazon's Route 53)\nor no cost( if you have your own  server with IP address, and domain name)\n\n## Select a hosting service \n\nThere are a number of cloud based server options: Microsoft Azure,\nOracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each\nhas their own approach to setting up a custom virtual server. Several\nhave free or low-cost service tiers available.\n\nAn overview of the process with EC2  follows. Detailed instructions for AWS EC2\nare covered in an earlier post [here](https://focusonr.org/posts/setupaws/).\n\n0. Create an account or sign in. \n1. Set up an interactive environment with AWS server.\n    a. define ssh key-pair.\n    b. configure firewall.\n    c. request static IP.\n    d. obtain domain name. \n    e. select an instance and launch server. \n\nOnce the server is available connect via ssh, and login, \n\nThe only\nnecessary software to install is docker and git. Install\n both with the following commands:\n\n``` sh\nsudo apt install -y git\nsudo snap install docker.io\n```\n\nOnce the host is set up and the requisite software installed we'll have\na customized virtual server wtih a static IP address, and a unique domain\nname and firewall in place. In other words, items 1, 2, and 3 from our\n`hosting` list above will be taken care of.\n\n\n## Website\n\nTo configure the web server and containerize our app we need to add\nthree files to the repo, to go along with our Shiny app.\n\nWe'll use a slightly indirect route to create and place the necessary files on\nthe server but this approach will allow to do all our countinuing development on\nour local workstation and have the web app be automatically continually undated.\nWe'll create the configuration files we need  on our workstation and push them \ngithub and from there they can be accessed from our server.\n\nThese three configuation files are:\n\n1.   a Docker configuration file (default name `Dockerfile`)\n\n::: column-margin\n![](img/docker1.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@carrier_lost?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Ian\nTaylor</a> on\n<a href=\"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\nWe'll use docker to access  R/Shiny, and docker-compose to access Caddy, our webserver. The\nfirst file is the dockerfile. Here is our minimal dockerfile with comments:\n\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show the `Dockerfile` code\"}\nfrom rocker/shiny:4.2.0\ncopy /power1_shiny/* /srv/shiny-server/\ncmd [\"/usr/bin/shiny-server\"]\n```\n\n\n\n1. Grab the latest rocker/Shiny image from Docker Hub to use as a base image.\n2.  Copy the Shiny code to the default location for shiny-server\n3.  Run the Shiny-server using the default app code\n\n\nThis configuration file instructs Docker\nto build a container based on a Rocker/Shiny image (which itself is a ubuntu\nimage with R and Shiny installed) then copy into the container the `power1_shiny.R` code and\nfinally launch Shiny on (default) port 3838. We placed the power1_app.R code in the\ndefault location `/srv/shiny-server` we only need to start the server and it\nwill find the shiny program. \n\n2.   a Caddy web server configuration file (default name `Caddyfile`)\n\n We'll use `Caddy` as our web server. Caddy is an\nopen-source tool that has the very useful feature of automating the\nacquiring and installing of an SSL certificate. An SSL cert is required\nby most browsers to use the encrypted communication protocol https.\n\nCaddy is configured with a file named `Caddyfile`. We use the caddy\nconfiguration file to specify three critical things.\n\n1.  the site domain name.\n2.  the 'reverse proxy' map that redirects requests to port 443 (ssl\n    port) to port 3838 (Shiny port).\n3. add login credentials for bob/vanilla47:\n\nOur barebones `Caddyfile` looks like this:\n\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the `Caddyfile` code\"}\n# use caddy auth tool to generate a password via the `bcrypt` algorithm. \n# > caddy hash-password --plaintext vanilla47 \nrgtlab.org {\n    basicauth * /power1_shiny/* {\n\t\tbob $2a$14$pYWd5O7JqNeGLS4m4CKkzemM2pq5ezn9bcTDowofZTl5wRVl8NTJm\n\t}\n    root * /srv\n    handle_path /power1_shiny/* {\n            reverse_proxy power1_shiny:3838\n    }\n    file_server\n}\n```\n\n\n\nWe can accomplish what we need for items 4, 5, and 7 through the\nCaddyfile.\n\nNote:\n\n-   rgtlab.org is our domain name\n-   `handle_path` maps all https requests to port 3838 where Shiny is\n    listening.\n\nProviding our servers domain name, `rgtlab.org` is sufficient to\ninitiate an exchange with the `letsencrypt` service to generates an SSL certificate.\n\nAnd a third file is the docker compose file that containerizes our\nShiny app, pulls a caddy webserver image from Docker Hub and creates a\nlocal network for the two containers to communicate in.\n\n3.   a Docker-compose configuration file (default name\n    `docker-compose.yml`).\n\nThe docker-compose.yml file:\n\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"`docker-compose.yml`. Show the code\"}\nversion: \"3.7\"\n\nservices:\n  power1_shiny:\n    build: .\n    expose:\n    - \"3838\"\n  caddy:\n    image: caddy:2.3.0-alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - $PWD/site:/srv\n      - caddy_data:/data\nvolumes:\n    caddy_data:\n```\n\n\n\nLastly, we need   an html  file, `index.html` that provides\nthe landing page for our server.\n\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"`index.html`. Show the code\"}\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Power1 app</h1>\n    <ul>\n      <li><a href=\"./power1_shiny/\">Power1 app</a></li>\n    </ul>\n  </body>\n</html> \n```\n\n\n\nAt this point our `power1_app` repo looks like this: \n```text\n.\n├── Caddyfile\n├── Dockerfile\n├── README.md\n├── docker-compose.yml\n├── power1_shiny\n│   └── app.R\n└── site\n    └── index.html\n```\n\n# Github\n\nPush the new content to Github. \n\n``` sh\ngit push\n```\n\nNext login to the virtual server and clone the repo from Github.\n\n``` sh\nssh rgtlab.org\ngit clone https://github.com/rgt47/power1_app.git\n```\n\nLastly, cd into `power1_app` directory and run\n\n``` sh\ndocker compose up -d\n```\n\nand you're good to go! The power1_shiny app is available at\n\n``` sh\nhttps://rgtlab.org/\n```\n\n# Appendices \n\n\n## Appendix-1 {#appendix-1}\n## App.R\nConsider an app that is a balance of simple and functional -- one that\ncalculates the power for a 2-sample t-test as a function of the\nstandardized effect size. re is our shiny app `power1_shiny.R`:\n\nConsider the power1.R file:\n\n``` sh\n\nui <- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver <- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot <- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff <- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\n```\n\nThe app is designed to be maximally minimal. Using only base R\nfunctions, with a minimum of reactive widgets and layout commands to\nkeep it simple while still performing a useful function.\n\n## Bonus: Add basic authentication \n\nadd login credentials for bob/vanilla47 to the Caddyfile:\n```sh\n# use caddy auth tool to generate a password via the `bcrypt` algorithm. \n> caddy hash-password --plaintext vanilla47 \ncaddy hash-password \nrgtlab.org {\nbasicauth * /power1_shiny/* {\n\t\tbob $2a$14$pYWd5O7JqNeGLS4m4CKkzemM2pq5ezn9bcTDowofZTl5wRVl8NTJm\n\t}\n    root * /var/www/html\n    handle_path /power1_shiny/* {\n            reverse_proxy 0.0.0.0:3838\n    }\n    file_server\n}\n```\n\n## Tip 1. Docker on M1 macbook. \nTo get docker functioning on M1 Mac desktop \n\n``` sh\ndocker build -t power1_shiny --platform linux/x86_64 .\ndocker run -d -p 80:3838 --platform linux/x86_64 power1_shiny\n\n```\n\n## Tip 2  add user to docker group on server. \nAdd ubuntu to the docker group \nto allow docker to run without sudo.\n\n``` sh\nsudo usermod -aG docker ${USER}\n```\n\n## Tip 3 ssh config file. \nFor convenience, construct a `config` file in `~/.ssh` as:\n\n``` sh\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/Downloads/power1.rsa\n```\n\nthen you can ssh into the new server with\n\n``` sh\nsh> ssh rgtlab.org \n```\n\n\n# References\n* [Focus on R: a new qblog - Set up a virtual server on AWS (in anticipation of hosting Shiny apps)](https://focusonr.org/posts/setupaws/)\n* [Shiny Apps with Docker Compose, Part 1: Development](https://hosting.analythium.io/shiny-apps-with-docker-compose-part-1-development/)\n* [Shiny Apps with Docker Compose, Part 2: Production](https://hosting.analythium.io/shiny-apps-with-docker-compose-part-2-production/)\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}