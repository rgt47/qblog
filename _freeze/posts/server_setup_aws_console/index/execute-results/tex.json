{
  "hash": "c5a5350f33d74d79c430050667637eb9",
  "result": {
    "markdown": "---\ntitle: \" Set up a virtual server on AWS (in anticipation of hosting Shiny apps) \"\ndescription: \"Detailed steps for setting up a lightweight server on AWS. \"\ncategories: [AWS]\nimage: \"img/rshiny.png\"\n#editor: \n#  markdown: \n#format:\n#  pdf:\ndate: last-modified\n---\n\n\n\n\n::: column-margin\n![under construction](img/crane.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\n# Introduction\n\n::: {.callout-note}\n## Motivation for this post: \n\nOk! I've got my Shiny app running just the way I want it. Works great! Now, how\ndo I get it up on the web and shared with my collaborators?\n\n:::\n\nAssuming we have a working shiny app, we often next need to address the task of\nhow to host the app on the web to share with our collaborators. To be sure,\nthere are many ways to accomplish this. Below we describe a recommended  process\nwe've found to be straightforward. In this post, we'll describe how to  'spin\nup' a server on Amazon Web Service EC2.  In a future post we'll show how, in\njust a few steps, through the application of Docker, R, Shiny, and Caddy\n(webserver) functionality we can have a fully functional and secure app\navailable on the web.\n\n# Hosting\n\nNo matter what procedure we use In order to host a shiny app, (for example one\nnamed `power1_shiny`), online  we'll need to complete the\nfollowing set of tasks:\n\n1.  obtain a static IP address\n2.  obtain a domain name (e.g. `rgtlab.org`) and associate it with the IP address\n3.  configure (select number of CPUs, amount of memory, OS, etc)  and launch a\nvirtual server    \n4.  define a security model, aka  a firewall for the server\n2.  associate the IP, domain name and firewater with the server \n4.  install and configure a webserver \n5.  obtain and install an SSL certificate (to allow encrypted communication)\n6.  setup an authentication method (password protection for app access)\n7.  configure a reverse proxy method i.e. translate https (port 443) requests to\nShiny (port 3838). This avoids the need for URLs like\n`https://rgtlab.org:3838/power1_shiny`\n\n::: {.callout-note}\n\n## Not to worry: \n\nAt first glance these  requirements can appear daunting, but on closer\ninspection all can be met with relative ease and minimal  cost ( e.g. using a\n'free-tier' server on a cloud-hosting service, e.g. Amazon's EC2 or Digital\nOcean, and a \"leased\" domain name from, e.g. GoDaddy, or Amazon's Route 53, from\none of the less popular domains i.e. other than '.com' or '.org') or at no cost\nif we have your own  server with IP address, and domain name.\n\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\n## Actually ...: \n\nTechnically, if the goal is simply to get the app up on the web, its not\nrequired to make a static IP or a domain name or a firewall or an authentication\nmethod or an SSL certificate, or even a reverse proxy. but if these elements of\nthe process are skipped the server will only be able to communicate via the\nunencrypted HTTP protocol and the site URL will be something like\n111.222.333.444:3838/power1_shiny, and anyone with the URL will be able to reach\nthe site.\n\n:::\n\n## Select a hosting service \n\n\nThere are a number of cloud based server options to choose from: Microsoft\nAzure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean or Hetzner to name a\nfew. Each has their own approach to setting up a custom virtual server. Several\nhave free or low-cost service tiers available.\n\nIn this post we'll provide a step-by-step description of a process using\nAmazon Web Services Elastic Compute Cloud (AWS EC2) infrastructure. \n\n\nAWS is a reasonable choice for setting up a small custom server. Its not the\ncheapest option, but the system is well documented and, in our experience,\nreliable. \n\nTo start, open the EC2 console by visiting the URL:\n\n``` sh\n   https://aws.amazon.com/console\n```\n(see margin figure)\n\nIn the console window choose regional service. For me its \"N. California\".\n\n::: column-margin\n![AWS console](img/aws_dash.png)\n:::\n\nNext create an account, or sign in, and once you're logged in navigate to the\nEC2 dashboard.  Its through this dashboard (or console) that we'll define the\nparameters for the type of server to launch and the mechanisms for communicating\nwith it. \n\n## AWS Working Environment\n\nAlong with selecting a server we need to set up a working\nenvironment. We recommend setting up the working environment before launching\nthe server, as it saves some back and forth with the console, but the order is\nnot critical. The working environment consists of four\nmain components: \n\n1. A secure shell (ssh) key-pair to allow  remote and secure login to\nthe virtual server once its launched. \n2. A firewall or security model which will restrict server access to only secure\nconnections. The firewall, by default, closes off all incoming traffic except\nthrough those ports specifically named.  \n3. A static IP address. This is required for maintaining the link\nbetween the domain name and the server when rebooting. (The default is for the\ninstance/server to be assigned a new IP address each time its rebooted).\nand \n4. A domain name,\nsay `rgtlab.org`. A domain name is not required but will\nfacilitate collaborator access by not needing to use the IP address directly.\n\n### Ssh key pair\n\nIn order to securely communicate with the server we need to exchange an ssh key\npair with AWS. The pair consists of a **private** and a **public** key.  We can\ngenerate an ssh key pair in one of two ways in EC2. Either, locally, on our\nworkstation and upload the public key to EC2, or have EC2 generate the key pair\nand download the private key. \n\nFor the first option\nwe create a directory on our workstation to hold the keys and navigate to it,\ne.g. `~/.ssh`.    In the `~/.ssh` directory generate the keys with the command\n\n``` sh\nssh-keygen -m PEM\n```\n\n\"PEM\" defines the key format. More information on public key authentication can\nbe found [here](https://www.ssh.com/academy/ssh/public-key-authentication).  In\nthe interactive dialog  that follows name the key prefix something like\n`power1_app`.  The dialog will ask for a passphrase. Enter one for an additional\nlevel of security, but its not required.  The `ssh-keygen` program will generate\ntwo files: `power1_app.pem` and `power1_app.pub`\n\n\nTo complete the process return to the  EC2 dashboard  and select `Actions` and\nthen `Import key pair` in the left panel. \nEnter the name `power1_app`\nand select the `Browse` button. \nNavigate to the file \n`power1_app.pub` in the directory `~/.ssh` and \nand select the `Import key pair ` button at the bottom of the page. \n\nFor the second approach select `Create key pair` button in the upper right of\nthe console page. \n\nA form will appears and ask for a name. Enter something like `power1_app`.\nSelect `RSA` for key pair type and `.pem` for key file format.  \n\nGive the pair a name, say `power1_app`, and the keys will be created and the\nprivate key `power1_app.pem` will be downloaded to our local machine  to the\n`~/.ssh` directory. Lastly, change the access permissions for the private key\nwith the following command:\n\n``` sh\nsudo chmod 600 power1_app.pem\n```\n\n### Firewall\n\n\nTo create a firewall click on **Network settings** in the left hand panel.\nChoose **Create security group** and select **Allow SSH traffic** and **Allow\nHTTPS traffic**. \nThis will create a firewall that leaves open only ports 22 and 443, for `ssh` and\n`https` incoming traffic respectively. \nName the security group something like `power1_firewall`.  \n\n### Static IP address\n\nThe next step is to use the `elastic IP` service to get a static IP that can be\nassigned to the server. Navigate to **Network and Security** again and select\n**Allocate Elastic IP**. An IP will be assigned from the EC2 pool of available IPv4 IP\naddresses e.g. 13.57.139.31. \n\n### Domain Name\n\nTo obtain a dedicated domain name go to  Amazon route 53 \nto select a domain name and associate it  with our static IP.\n\n\nOnce a domain name is acquired, e.g. `rgtlab.org`,  associate it with our static\nIP address. This can be done via the `Route 53 `  service. To associate domain\nname `rgtlab.org` with the elastic IP do the following in Route 53:\n\n-   click on `hosted zones` in the side panel\n-   click on `rgtlab.org` in center panel\n-   click on checkbox for `rgtlab.org` type=A line\n-   then click on edit record in right panel\n-   change IP address to the assigned static IP (e.g. 13.57.139.31).\n\n::: column-margin\n![](img/ec2a.png)\n:::\n\n## Select and launch instance\n\n2.  From `Quick Start` in the EC2 dashboard select an operating system for the\nserver. We recommend  the `Ubuntu` OS. Ubuntu is a mature Linux distribution\nbased on Debain Linux. Click\nthe `Ubuntu` button. (see margin figure)\n\n-   Name the server, say `power1`\n\n3.  Next choose an instance **type**, e.g. `t2-micro`. Different\n    instance types are combinations of, number of processors, memory, \n    storage capacity, and network performance.\n\n4.  click **Configure Instance Details**\n\n5.  choose a Key pair (select `power1_app` from your environment) .\n\n6.  Add security group, use `power1_firewall` from your environment.\n\n7.  choose 30 GB of `EBS General Purpose (SSD) or Magnetic storage`. Thirty GBs is\nthe maximum allowed in the 'Free tier' of servers on AWS. In our experience\nsmaller disk sizes can lead to problems. \n\n8.  click **Launch Instance**\n\nto launch the server.\n\n# Access server\n\nOn your laptop log into server with\n\n``` sh\nssh -i \"~/.ssh/power1_app.pem\" ubuntu@rgtlab.org\n```\n\n\n\n\n\n\n\n\n\n\n\n\n# Appendix:  Tip  1\n\n::: {.callout-tip}\n\n## Tip 1.\n\nFor convenience, construct a `config` file in `~/.ssh` as:\n\n``` sh\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\n```\n\nthen we can ssh into the new server with\n\n``` sh\nsh> ssh rgtlab.org\n```\n:::\n\n# Appendix: succinct instructions\n\nOpen the Amazon EC2 console at <https://console.aws.amazon.com/ec2/>\n\nFrom the top navigation bar, select a Region to create an instance in. For me its \"N. California\".\n\n\nCreate an account or sign in and navigate to the EC2 dashboard. \n\nIn the left side panel select **Key Pairs** (under Network and Security).\n\nAt the top right select the **Create key pair** button. A **Key Pair** form will\nopen. \n\nGive the key pair a name. Something like  `power1_app`.  Select a key pair\ntype, suggest `RSA`. Select a **Private key file format**, suggest `.pem`\n\nBelow the form select the **Create key pair** button. \nA pair of keys will be created and the private key\n`power1_app.pem` will be downloaded to we local machine. In my case to\nthe default `~/Downloads` directory. \n\nMove the file to the `~/.ssh` directory: `mv ~/Downloads/power1_app.pem ~/.ssh `\n\nChange the access permissions: `sudo chmod 600 power1ssh.pem` to be more\nrestrictive. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}