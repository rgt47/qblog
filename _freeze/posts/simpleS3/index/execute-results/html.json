{
  "hash": "ec1eab6a0dd7781a1dcd64c4dcd8fd2d",
  "result": {
    "markdown": "---\ntitle: \"\nWriting a simple R package in S3. \"\ndescription: \"Getting started with S3 OO programming in R\"\ncategories: [AWS]\nimage: \"img/rshiny.png\"\neditor: \n  markdown: \n    wrap: 72\n#format:\n#  pdf:\n#    toc: true\n#    date: \"04-07-23\"\n---\n\n\n\n::: column-margin\n![under construction](img/crane.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\n# Introduction\n\nOk! It time to step up my R programming to S3. But how to start? \n\nI'll begin by reading the relevant chapters in Advanced R (add reference). \n\nOther references: \n\nIntroduction to Scientific Programming and Simulation using R. Jomes.\nMaillardet, Robinson. \n\n\nA Simple Guide to S3 Methods | R-bloggers\n\nWhy your S3 method isn't working | R-bloggers\n\nDealing with S3 methods in R with a simple example | R-bloggers\n\nVideo on S3 Classes in R by Dr Andrew Robinson | R-bloggers\n\nUnexported S3 Methods and R Packages | R-bloggers\n\nSimple Guide to S3 Methods | R-bloggers\n\nThe S3 OOP system | R-bloggers\n\n\n``` sh\n   https://aws.amazon.com/console\n```\n\nNext choose regional service. For me its \"N. California\".\n\n::: column-margin\n![](img/aws_dash.png)\n:::\n\nNext create an account or sign in and navigate to the EC2 dashboard.  Its\nthrough the dashboard that we'll define the parameters for the type of server to\nlaunch\nand the mechanisms for communicating with it. \n\n## AWS Working Environment\n\nThat is, along with selecting a server we'll need to set up a working\nenvironment. We recommend setting up the working environment before launching\nthe server, as it saves some back and forth. This working environment consists of four\nmain components: \n\n1. A secure shell (ssh) key-pair to allow we to remotely and securely login to\nthe virtual server once its launched. \n2. A firewall to restrict access to only secure\nconnections. The firewall closes off all incoming traffic except through those\nports specifically named.  \n3. A static IP address. This is required for maintaining the link\nbetween the domain name and the server when rebooting. (The default is for the\ninstance/server to be assigned a new IP each time its rebooted.) \nand \n4. A domain name,\nsay rgtlab.org. A domain name is not required but will\nfacilitate collaborator access by not needing to use the IP address directly.\n\n## Ssh key pair\n\nThe first time we create an AWS account we need to exchange an ssh key pair with\nAWS. The pairs consist of a **private** and a **public** key. The pair of keys will allow us\nto login securely to any server we launch on EC2. We can generate an ssh key\npair in one of two ways in EC2. Either, locally, on our workstation and upload\nthe public key to EC2, or have EC2 generate the key pair and download the\nprivate key. \n\nFor the first option\nwe create a directory on our workstation to hold the keys and navigate to it.\ne.g. `~/.ssh`.    Generate the keys with the command\n\n``` sh\nssh-keygen -m PEM\n```\n\n\"PEM\" defines the key format. More information on public key authentication can\nbe found \n[here](https://www.ssh.com/academy/ssh/public-key-authentication).\nIn the interactive dialog  name the key prefix something like `power1_app_ssh`.\nThe dialog will ask for a passphrase. Enter one for an additional level of\nsecurity, but its not required. \nThe `ssh-keygen` program will generate two files: \n`power1_app_ssh` and \n`power1_app_ssh.pub`\n\n\n\n\nTo complete the process return to the  EC2 dashboard  select `Keys Pairs` in the\nleft panel. The select `Create key pair` botton in the upper right of the page. \n\nA form appears and asks for a name. Enter something like `power1_app_ssh`.\nSelect `RSA` for key pair type and `.pem` for key file format to match the\n`ssh-keygen` process we went through on our workstation.  \n\nasks for the location of the public key. Browse to the `~/.ssh` directory on\nwer workstation\nand import the public key `power1_app_ssh.pub`.\n\nGive the pair a name, say `power1_app_ssh`, and the keys will be created and the private key\n`power1_app_ssh.pem` will be downloaded to our local machine  to\nthe  `~/.ssh` directory. Change the access permissions for the private key with\nthe following command:\n\n\n``` sh\nsudo chmod 600 power1_app_ssh.pem\n```\n\n## Firewall\n\n\nTo create a firewall click on **Network settings** in the left hand panel.\nChoose **Create security group** and select **Allow SSH traffic** and **Allow\nHTTPS traffic**. \nThis will create a firewall that leaves open only ports 22 and 443, for `ssh` and\n`https` incoming traffic respectively. \nThe default name for the firewall will be something like `launch-wizard-6`.\nname the security group `power1_firewall`.  \n\n## Static IP address\n\nThe next step is to use the `elastic IP` service to get a static IP that can be\nassigned to the server. Navigate to **Network and Security** again and select\n**Allocate Elastic IP**. An IP will be assigned from the EC2 pool of available IPv4 IP\naddresses. \n\n## Domain Name\n\nTo obtain a dedicated domain name go to  Amazon route 53 \nto select a domain name and associate it  with our static IP.\n\n\nOnce a domain name is acquired, e.g. `rgtlab.org`,  associate it with our static\nIP address. This can be done via the `Route 53 `  service. To associate domain\nname `rgtlab.org` with elastic IP do the following in Route 53:\n\n-   click on `hosted zones` in side panel\n-   click on `rgtlab.org` in center panel\n-   click on checkbox for `rgtlab.org` type=A line\n-   then click on edit record in right panel\n-   change IP address to the static IP (e.g. 13.57.139.31).\n\n::: column-margin\n![](img/ec2a.png)\n:::\n\n# Select and launch instance\n\n2.  From \"Quick Start\" in the EC2 dashboard select an operating system for the\nserver. Our recommendation is the `Ubuntu` OS. Ubuntu is based on linux. Click\nthe `Ubuntu` button.\n\n-   Name the server, say power1\n\n3.  Next choose an instance **type**, e.g. \"t2-micro\". Different\n    instance types are combinations of, processors, memory, \n    storage capacity, and network performance.\n\n4.  click **Configure Instance Details**\n\n5.  choose a Key pair (use power1_app_ssh.rsa from wer environment) .\n\n6.  Add security group, e.g. 'power1_firewall' from wer environment.\n\n7.  choose 30 GB of EBS General Purpose (SSD) or Magnetic storage. Thirty GBs is\nthe maximum allowed in the 'Free tier' of servers on AWS. In our experience\nsmaller disk sizes can lead to problems. \n\n8.  click **Launch Instance**\n\nto Launch the Instance.\n\n## Access server\n\nOn wer laptop log into server with\n\n``` sh\nssh -i \"~/.ssh/power1_app_ssh.pem\" ubuntu@rgtlab.org\n```\n\n\n\n\n\n\n\n\n\n\n\n\n# Appendix:  Tips \n\n::: {.callout-tip}\n\n## Tip 1.\n\nFor convenience, construct a `config` file in `~/.ssh` as:\n\n``` sh\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app_ssh.rsa\n```\n\nthen we can ssh into the new server with\n\n``` sh\nsh> ssh rgtlab.org\n```\n:::\n\n# Appendix: Non-opinionated instructions\n\nOpen the Amazon EC2 console at <https://console.aws.amazon.com/ec2/>\n\nFrom the top navigation bar, select a Region to create an instance in. For me its \"N. California\".\n\n\nCreate an account or sign in and navigate to the EC2 dashboard. \n\nIn the left side panel select **Key Pairs** (under Network and Security).\n\nAt the top right select the **Create key pair** button. A **Key Pair** form will\nopen. \n\nGive the key pair a name. Something like  `power1_app_ssh`.  Select a key pair\ntype, suggest `RSA`. Select a **Private key file format**, suggest `.pem`\n\nBelow the form select the **Create key pair** button. \nA pair of keys will be created and the private key\n`power1_app_ssh.pem` will be downloaded to we local machine. In my case to\nthe default `~/Downloads` directory. \n\nMove the file to the `~/.ssh` directory: `mv ~/Downloads/power1_app_ssh.pem ~/.ssh `\n\nChange the access permissions: `sudo chmod 600 power1ssh.pem` to be more\nrestrictive. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}