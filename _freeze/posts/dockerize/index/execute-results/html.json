{
  "hash": "376c86802961e7cfd00bf576f6b796f7",
  "result": {
    "markdown": "---\ntitle: \"A simple seven step  process to get your  Shiny app online (securely). \"\ndescription: \"This is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\"\nsubtitle: \"Github, Docker-compose, EC2 version\"\ncategories: [Docker, Shiny]\nimage: \"img/rshiny.png\"\neditor: \n  markdown: \n    wrap: 72\n#format:\n#  pdf:\n#    toc: true\n#date: \"2022-12-06\"\n#categories: [Neovim]\n#image: \"img/nvimlogo.png\"\n---\n\n\n\n\n::: column-body\n![under construction](img/crane.jpg)\n:::\n\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n\n# Introduction\n\nThis is the first in a series of posts offering suggested strategies for\nleveraging open source technologies to provide straight-forward\nsolutions to one of the central challenges in the practice of data\nscience, i.e. how to effectively communicate analysis results to clients\nand collaborators. The list of open-source technologies (or software stack) we\nsuggest for employment is: linux, R, Shiny, Docker, Git, and Caddy. In\nthis post we'll make use of two cloud services Github and AWS. Further\nposts will describe alternate constructions, e.g. using the low cost\ncloud service: Hetzner.\n\nAlso described in other posts are strategies that avoid Github and\nAmazon. \n\nThis initial post provides a minimal, proof-of-concept example of how to\napply these technologies for hosting an interactive Shiny application.\n\nIn the following we start with a very simple, but hopefully still useful,\nstand-alone Shiny app we've developed on our local workstation and  push it into\nthe cloud and after some straightforward interfacing with the Amazon web service\nenvironment, end up with a secure (encrypted and authenticated) app running on a\nwebsite with a custom domain name. For pedagogic purposes the approach described\nhere is intentionally minimalist.\n\n# Methods\n\nTo begin, lets assume we're just finished developing a new Shiny app,\nnamed `power0` . (The methods described here apply generically to any\nShiny app, but we'll use one of our own for illustration). See the\n`R/Shiny` code for our `power0` app (`power0.R`) [here](#appendix-1)\nin appendix 1.\n\nWe can test the app locally by runnning it with the following command\nissued from the `power0` directory. We can also think of the directory\nas a project or a repository. The directory can be located anywhere on\nyour local system.\n\n``` sh\nR -e \"library(shiny); runApp('power0.R', launch=T)\"\n```\n\nThis will in turn: run the R program, load the Shiny package, and launch\nthe app in your default browser.\n\nFigure 1 below shows the Shiny app running locally in a browser on our\ndesktop, with a widget to select the sample size and provide a dynamic\nvisualization (2D plot) of the power as a function of the standardized\neffect size:\n\n::: column-body\n![*Figure 1*](img/shinyapppower0.png)\n:::\n\nOnce we determine our app is working as designed, we can move on to the\ntask of hosting the app on a (virtual) server to share with our\ncollaborators. There are many ways to accomplish this. Here we'll\ndemonstrate, a straightforward and efficient approach using mainstream\ncloud services and open source tools. That is, we'll 'spin' up a server\non Amazon Web Service EC2 and in just a few steps through the\napplication of Docker, R, Shiny, and Caddy webserver functionality we'll\nhave a fully functional web app to share with colleagues.\n\n# Hosting\n\n::: column-body\n![*Figure 2*](img/blogdockerizeflow.png)\n:::\n\nFigure 2 illustrates the tools we'll use and the flow of program and\nconfiguration files. In order to host `power0` online we'll need the\nfollowing tasks:\n\n1.  create a virtual server (connected via ssh) with firewall\n2.  a static IP address (to identify the server online)\n3.  a domain name (name for IP address)\n4.  a webserver (tool to interact with https protocol requests and\n    respond)\n5.  an SSL certificate (to allow encrypted communication)\n6.  an authentication method (password protection)\n7.  a reverse proxy method (translate https (port 443) requests to Shiny\n    (port 3838)\n\nAt first glance these 7 requirements can appear daunting, but on closer\ninspection all can be met with relative ease and minimal or no cost.\n\nThis can be done at no cost if you have your own (self-hosted) server\nwith IP address, and domain name, or at minimal cost using a\ncloud-hosting service (e.g. Amazon's EC2 or Digital Ocean) and a\n\"leased\" domain name from, e.g. GoDaddy, or Amazon's Route 53.\n\n# Select a hosting service (Steps 1,2 and 3)\n\nThere are a number of cloud based server options: Microsoft Azure,\nOracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each\nhas their own approach to setting up a custom virtual server. Several\nhave free or low-cost service tiers available.\n\nAn overview of the process with EC2 is as follows. (Detailed\ninstructions for AWS EC2 are [here](#appendix-2) in appendix 2.)\n\nOnce the server is available connect via ssh and login, The only\nnecessary software to install is docker, docker-compose and git. Install\nall 3 with the following command:\n\n``` sh\nsudo apt install -y git\nsudo snap install docker\n```\n\nOnce the host is set up and the requisite software installedh we'll have\na customized virtual server wtih a static IP address, and unique domain\nname and firewall in place. In other words, items 1, 2, and 3 from our\nlist will be taken care of.\n\n# Docker\n\nWe'll use docker to access both R/Shiny and Caddy, our webserver. The\nfirst file is the dockerfile. In its simplest form it instructs Docker\nto build a container based on a Rocker/Shiny image which is a ubuntu\nimage with R and Shiny installed then copy in the `power0.R` code and\nlaunch Shiny on (default) port 3838.\n\n::: column-body\n![](img/docker1.jpg)\n:::\n\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@carrier_lost?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Ian\nTaylor</a> on\n<a href=\"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n\nHere is our minimal dockerfile with comments:\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Grab the latest rocker/Shiny image from Docker Hub to use as a base image.\nFROM rocker/shiny\n# Copy the Shiny code to the default location for shiny-server\n# ?? not sure if need to change file name to app.R ??\nCOPY power0.R /srv/shiny-server/\n# There is no non-root user on the image: shiny. Switch to user `shiny`\nUSER shiny\n# Run the Shiny-server using the default app code\nCMD [\"/usr/bin/shiny-server\"]\n```\n\n\n# Website\n\nTo configure the web server and containerize our app we need to add\nthree files to the server, to go along with our Shiny app in the\n`power0` directory (in the home directory for default user `ubuntu`).\n\nThe easiest way to do this is to add the three files to the `power0`\ndirectory on our workstation and then \"push\" a copy to github and from\nthere we can access them from our server.\n\nStart by creating a repo for the app on github.\n\n-   login to github (screenshot)\n\n::: column-body\n![](img/git1.png)\n:::\n\n-   click on `new` . Then in `repository name` field enter `power0`.\n    (Make the\n-   repo private, we only want to share with Bob at this point).\n-   create repo. Click `Create repository` green button at the bottom of\n    the page.\n-   back on your laptop: clone the repo:\n\n``` sh\ngit clone https://github.com/rgt47/power0.git\n```\n\nThese three configuation files are:\n\n-   a Caddy web server configuration file (default name `Caddyfile`)\n-   a Docker configuration file (default name `Dockerfile`)\n-   a Docker-compose configuration file (default name\n    `docker-compose.yml`) (These are the default file names. If\n    preferred, you can use custom names and point the program to the\n    config file with command line options).\n\nLets discuss each. We'll use `Caddy` as our web server. Caddy is an\nopen-source tool that has the very useful feature of automating the\nacquiring and installing of an SSL certificate. An SSL cert is required\nby most browsers to use the encrypted communication protocol https.\n\nCaddy is configured with a file named `Caddyfile`. We use the caddy\nconfiguration file to specify three critical things.\n\n1.  the site domain name.\n2.  the authentication pair login/hash-password, for each user and\n3.  the 'reverse proxy' map that redirects requests to port 443 (ssl\n    port) to port 3838 (Shiny port).\n\nOur barebones Caddyfile looks like this:\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nrgtlab.org {\n#auth credentials: bob/utter\nbasicauth * {\nbob JDJhJDE0JElCQmRGaTA0ajY3bkZTLjRiWUZ4enVoZnVSQzVXVGVUMHlVcXJTaTRGYmpRQVFHLnYzN0tx\n\t}\n\thandle_path /power0/* {\n\t\treverse_proxy power0:3838\n\t}\n}\n```\n\n\nWe can accomplish what we need for items 4, 5, 6 and 7 through the\nCaddyfile.\n\nNote:\n\n-   power0.net is our domain name\n-   basicauth provides user login information. In this case `bob` is the\n    username and `thebunny` is the password.\n-   `handle_path` maps all https requests to port 3838 where Shiny is\n    listening.\n\nProviding our servers domain name, `rgtlab.org` is sufficient to\ninitiate an exchange with `letsencrypt` to generates an SSL certificate.\n\nAnd the third file is the docker compose file that containerizes our\nShiny app, pulls a caddy webserver image from Docker Hub and creates a\nlocal network for the two containers to communicate in.\n\nThe docker-compose.yml file:\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nversion: \"3.7\"\n\nservices:\n  power0:\n    build: .\n  caddy:\n    image: caddy:2.3.0-alpine\n    ports:\n      - \"443:443\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - caddy_data:/data\nvolumes:\n    caddy_data:\n```\n\n\n# Github\n\nOnce in place on your laptop push the four files (power0.R, Dockerfile,\nCaddyfile, docker-compose.yml) to github\n\n``` sh\ngit push\n```\n\nand then ssh login to server and clone repo.\n\n``` sh\ngit clone https://github.com/rgt47/power0.git\n```\n\nLastly, cd to `power0` directory and run\n\n``` sh\ndocker-compose up -d\n```\n\nand you're good to go!\n\nThe app `power0` can be accessed by 'bob' at the url\n\n``` sh\nhttps://rgtlab.org/power0\n```\n\nwith password 'thebunny'\n\n# Appendix-1 {#appendix-1}\n\n\nConsider an app that is a balance of simple and functional -- one that\ncalculates the power for a 2-sample t-test as a function of the\nstandardized effect size. re is our shiny app `power0.R`:\n\nConsider the power0.R file:\n\n``` sh\n\nui <- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver <- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot <- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff <- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\n```\n\nThe app is designed to be maximally minimal. Using only base R\nfunctions, with a minimum of reactive widgets and layout commands to\nkeep it simple while still performing a useful function.\n\n# Appendix-2 {#appendix-2}\n\nAWS is a reasonable choice for setting up a small custom server. AWS\noffers a free set of servers for the first 12 months.\n\nTo start open the EC2 console.\n\n``` sh\n   https://aws.amazon.com/console\n```\n\nChoose regional service. For me its \"N. California\".\n\n::: column-body\n![](img/ec2a.png)\n:::\n\nCreate an account or sign in and navigate to the EC2 dashboard. Next set\nup a working environment. Specifically you'll want to set up four\ncomponents of the environment:\n\n(https://portal.aws.amazon.com/billing/signup#/start/email)\n\nBefore selecting a server set up a working environment. This consists of\nfour main components: 1. ssh key-pair to allow you to remote login to\nvirtual server. 2. A firewall to restrict access to only secure\nconnections, 3. A static IP. This is required for maintaining the link\nbetween the domain name and the server when rebooting. 4. A domain name,\nsay power0.net, or simplepower.org. Not strictly required but will\nfacilitate collaborator access.\n\n1.  Ssh key pair\n\nThe first time you create an AWS account you need to exchange an SSH key\npair with AWS. You can generate the ssh key pair locally on you\nworkstation and upload the public key to EC2. To do this create a\ndirectory to hold the keys. e.g. `~/.ssh`. From inside `.ssh` directory\nyou can generate the keys with the command\n\n``` sh\nssh-keygen -m PEM\n```\n\nin the dialog that ensues name the key prefix something like `ssh-rsa`.\n\nBack in the browser on EC2 select `security/keys`, A dialog starts and\nasks for the location of the public key. Browse to the `.ssh` directory\nand import the public key `ssh-rsa.pub`.\n\nOr you can select `Create Key Pair` in EC2. Give the pair a name, say\npower0ssh, and a pair of keys will be created and the private key\n`power0ssh.pem` will be downloaded to you local machine. In my case to\nthe `~/Downloads` directory.\n\n# Set up firewall\n\nA very restrictive firewall is recommended. Only https and ssh packets\nare needed. To construct the firewall click on: `Create Security Group`.\nAdd two incoming rules: 1. port 22 (ssh) for IPv4 packets. and 2. port\n443 (https) for IPv4 packets. Thats it.\n\n# Set up static IP address\n\nUse \"elastic IP\" to get a static IP that can be assigned to the server.\nNavigate to Network and Security again and select Allocate Elastic IP.\nAn IP will be assigned from the EC2 pool of IPv4 IP addresses. (there is\na small fee for use of the static IP).\n\nOnce you have created the instance come back to this Elastic IP dialog\nand - click on elastic IP in left panel - select associate Elastic IP\n13.57.139.31 choose an instance (power0) to associate with.\n\n-   side panel, click \"ec2\"\n-   side panel, click \"Instances\"\n-   from top bar, click \"Launch Instances\"\n\n# Get Domain Name\n\nTo obtain a dedicated domain name Go to godaddy.com or Amazon route 53\nto associate a domain name with your Elastic IP.\n\n(screenshot)\n\nOnce a domain name is aquired, eg power0.net, you want to associate it\nwith your static IP address. To associate domain name power0.net with\nelastic IP do as follows.\n\nin Route 53:\n\n-   click on 'hosted zones' in side panel\n-   click on power0.net in center panel\n-   click on checkbox for power0.net type=A line\n-   then click on edit record in right panel\n-   change ip address to the Elastic IP (e.g. 13.57.139.31).\n\n# Select and launch instance\n\n2.  From \"Quick Start\" ine the EC2 dashboard click `Ubuntu` button.\n\n-   Name the server, say power0\n-   Choose an AMI (instance template, with a prefered operating system):\n\nI'll suggest choosing \"Ubuntu Server 22.04 LTS\", but other linux\ndistributions can be utilized, e.g. Red Hat, or SUSE.\n\n3.  Next choose an instance **type**, e.g. \"t2-micro\". (different\n    instance types are mixtures of size, processors, memory, instance\n    storage capacity, network performance)\n\n4.  click \"Next: Configure Instance Details\"\n\n5.  choose a Key pair (use power0.rsa from your environment) .\n\n6.  Add security group, e.g. 'power0.firewall' allowing 22 (ssh), and\n    443 (https).\n\n7.  choose 30 GB of EBS General Purpose (SSD) or Magnetic storage\n\n8.  click Launch Instance\n\n# Access instance\n\nLog into new instance with ssh from local\n\n``` sh\nssh -i \"~/Downloads/power0.rsa.pem\" ubuntu@13.57.139.31\n```\n\n# Appendix 3 Tips and Tricks\n\n## Tip 1.\n\nFor convenience, construct a `config` file in `~/.ssh` as:\n\n``` sh\nHost ec2\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/Downloads/power0.rsa\n```\n\nthen you can ssh into the new server with\n\n``` sh\nsh> ssh ec2\n```\n\n## Tip 2: Add ubuntu to the docker group to allow docker to run without sudo.\n\n## Tip 3:\n\nCopy file contents to workstation without using editor with shell\ncommands. \\* Copy file from blog \\* Issue the following shell command \\*\npaste the file contents \\* type EOF on a new line.\n\n``` sh\ncat << EOF > Dockerfile\n```\n\n\n# References\n* [Setup Jupyter Notebook for R article](https://developers.refinitiv.com/en/article-catalog/article/setup-jupyter-notebook-r).\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}