{
  "hash": "babccb98202e4c50919395d5de792c82",
  "result": {
    "markdown": "---\ntitle: \"A simple five-ish step  process to get your  Shiny app online (securely). \"\ndescription: \"This is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\"\nsubtitle: \"Github, Docker-compose, EC2 version\"\ncategories: [Docker, Shiny]\nimage: \"img/rshiny.png\"\n#editor: \n#  markdown: \n#    wrap: 72\nformat:\n  pdf:\n    toc: true\ndate: \"2023-03-07\"\n\n#categories: [Neovim]\n#image: \"img/nvimlogo.png\"\n---\n\n\n\n::: column-margin\n![under construction](img/crane.jpg)\n:::\n\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n\n# Introduction\n\nThis is the first in a series of posts offering suggested strategies for\nleveraging open source technologies to provide straight-forward\nsolutions to one of the central challenges in the practice of data\nscience, i.e. how to effectively communicate analysis results to clients\nand collaborators. The list of open-source technologies (software stack) we\nsuggest for employment is: linux, R, Shiny, Docker, Git, and Caddy. In\nthis post we'll make use of two cloud services Github and AWS. Further\nposts will describe alternate constructions, e.g. using the low cost\ncloud service: Hetzner.\n\nAlso described in other posts are strategies that avoid Github. This approach\nprovides a simpler initial construction, but a more labor intensive updating\nprocess.  \n\nThis initial post provides a minimal, proof-of-concept example of how to\napply these technologies for hosting an interactive Shiny application.\n\nIn the following we start with a very simple, but hopefully still useful,\nstand-alone Shiny app developed on our local workstation.   Then after some\nstraightforward interfacing with the Amazon web service environment, We  push\nthe Shiny app into the cloud, and end up with a secure (encrypted and\nauthenticated) app running on a website with a custom domain name. \n\n# Methods\n\nTo begin, lets assume we're just finished developing a new Shiny app,\nnamed `power1` . (The methods described here apply generically to any\nShiny app, but we'll use one of our own for illustration). See the\n`R/Shiny` code for our `power1` app (`power1.R`) [here](#appendix-1) in appendix 1.\n\nWe can test the app locally by runnning it with the following command\nissued from the `power1` directory. \n``` sh\nR -e \"library(shiny); runApp('power1.R', launch=T)\"\n```\n\nWe can also think of the directory as a project or a repository. The directory\ncan be located anywhere on your local system. This will in turn: run the R\nprogram, load the Shiny package, and launch the app in your default browser.\n\nFigure 2 below shows the Shiny app running locally in a browser on our\ndesktop, it consists of a widget to select the sample size and provide a dynamic\nvisualization (2D plot) of the power as a function of the standardized\neffect size:\n\n::: column-margin\n![*Shiny app*](img/shinyapppower1.png)\n:::\n\nOnce we determine our app is working as designed, we can move on to the task of\nhosting the app on a (virtual) server to share with our collaborators. There are\nmany ways to accomplish this. Here we'll demonstrate a straightforward and\nefficient approach using mainstream cloud services and open source tools. That\nis, we'll describe how to  'spin' up a server on Amazon Web Service EC2 and in\njust a few steps, through the application of Docker, R, Shiny, and Caddy\n(webserver) functionality we'll have a fully functional web app to share with\ncolleagues.\n\n# Hosting\n\n::: column-margin\n![*Data flow *](img/blogdockerizeflow.png)\n:::\n\nFigure 3 illustrates the tools we'll use and the flow of program and\nconfiguration files. In order to host `power1` online we'll need to complete the\nfollowing tasks:\n\n1.  create a virtual server (connected via ssh) with a firewall\n2. obtain a static IP address (to identify the server online)\n3.  obtain a domain name (name for IP address)\n4.  install and configure a webserver (tool to interact with https protocol requests and\n    respond)\n5.  obtain and install an SSL certificate (to allow encrypted communication)\n6.  setup an authentication method (password protection)\n7.  configure a reverse proxy method (translate https (port 443) requests to Shiny\n    (port 3838)\n\nAt first glance these 7 requirements can appear daunting, but on closer\ninspection all can be met with relative ease and minimal  cost ( using a\ncloud-hosting service, e.g. Amazon's EC2 or Digital Ocean, and a\n\"leased\" domain name from, e.g. GoDaddy, or Amazon's Route 53)\nor no cost( if you have your own  server with IP address, and domain name)\n\n# Select a hosting service \n\nThere are a number of cloud based server options: Microsoft Azure,\nOracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each\nhas their own approach to setting up a custom virtual server. Several\nhave free or low-cost service tiers available.\n\nAn overview of the process with EC2  follows. (Detailed\ninstructions for AWS EC2 are [here](#appendix-2) in appendix 2.)\n\n0. Create an account or sign in. \n1. Set up an interactive environment with AWS server.\n    a. define ssh key-pair.\n    b. configure firewall.\n    c. request static IP.\n    d. obtain domain name. \n\nOnce the server is available connect via ssh and login, The only\nnecessary software to install is docker, docker-compose and git. Install\nall 3 with the following command:\n\n``` sh\nsudo apt install -y git\nsudo snap install docker\n```\n\nOnce the host is set up and the requisite software installedh we'll have\na customized virtual server wtih a static IP address, and unique domain\nname and firewall in place. In other words, items 1, 2, and 3 from our\nlist will be taken care of.\n\n\n# Website\n\nTo configure the web server and containerize our app we need to add\nthree files to the server, to go along with our Shiny app in the\n`power1` directory (in the home directory for default user `ubuntu`).\n\nThe easiest way to do this is to add the three files to the `power1`\ndirectory on our workstation and then \"push\" a copy to github and from\nthere we can access them from our server.\n\nDetails are in @appendix-1 Appendix 1. \n\nThese three configuation files are:\n\n1.   a Docker configuration file (default name `Dockerfile`)\n\n::: column-margin\n![](img/docker1.jpg)\n:::\n\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@carrier_lost?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Ian\nTaylor</a> on\n<a href=\"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n\nWe'll use docker to access  R/Shiny, and docker-compose to access Caddy, our webserver. The\nfirst file is the dockerfile. Here is our minimal dockerfile with comments:\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Grab the latest rocker/Shiny image from Docker Hub to use as a base image.\nFROM rocker/shiny\n# Copy the Shiny code to the default location for shiny-server\n# ?? not sure if need to change file name to app.R ??\nCOPY power1.R /srv/shiny-server/\n# There is no non-root user on the image: shiny. Switch to user `shiny`\nUSER shiny\n# Run the Shiny-server using the default app code\nCMD [\"/usr/bin/shiny-server\"]\n```\n\n\nIn this very simplest form the file instructs Docker\nto build a container based on a Rocker/Shiny image (which is a ubuntu\nimage with R and Shiny installed) then copy into the container the `power1.R` code and\nfinally launch Shiny on (default) port 3838. We placed the power1.R code in the\ndefault location `/srv/shiny-server` we only need to start the server and it\nwill find the shiny program. \n\n2.   a Caddy web server configuration file (default name `Caddyfile`)\n\nLets discuss each. We'll use `Caddy` as our web server. Caddy is an\nopen-source tool that has the very useful feature of automating the\nacquiring and installing of an SSL certificate. An SSL cert is required\nby most browsers to use the encrypted communication protocol https.\n\nCaddy is configured with a file named `Caddyfile`. We use the caddy\nconfiguration file to specify three critical things.\n\n1.  the site domain name.\n2.  the authentication pair login/hash-password, for each user and\n3.  the 'reverse proxy' map that redirects requests to port 443 (ssl\n    port) to port 3838 (Shiny port).\n\nOur barebones Caddyfile looks like this:\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npower1.net {\n#auth credentials: bob/thebunny\nbasicauth * {\nbob JDJhJDE0JElCQmRGaTA0ajY3bkZTLjRiWUZ4enVoZnVSQzVXVGVUMHlVcXJTaTRGYmpRQVFHLnYzN0tx\n\t}\n\thandle_path /power1/* {\n\t\treverse_proxy power1:3838\n\t}\n}\n```\n\n\nWe can accomplish what we need for items 4, 5, 6 and 7 through the\nCaddyfile.\n\nNote:\n\n-   power1.net is our domain name\n-   basicauth provides user login information. In this case `bob` is the\n    username and `thebunny` is the password.\n-   `handle_path` maps all https requests to port 3838 where Shiny is\n    listening.\n\nProviding our servers domain name, `power1.net` is sufficient to\ninitiate an exchange with `letsencrypt` to generates an SSL certificate.\n\nAnd the third file is the docker compose file that containerizes our\nShiny app, pulls a caddy webserver image from Docker Hub and creates a\nlocal network for the two containers to communicate in.\n\n3.   a Docker-compose configuration file (default name\n    `docker-compose.yml`) (These are the default file names. If\n    preferred, you can use custom names and point the program to the\n    config file with command line options).\n\nThe docker-compose.yml file:\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nversion: \"3.7\"\n\nservices:\n  power1:\n    build: .\n  caddy:\n    image: caddy:2.3.0-alpine\n    ports:\n      - \"443:443\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - caddy_data:/data\nvolumes:\n    caddy_data:\n```\n\n\n# Github\n\nOnce in place on your laptop push the four files (power1.R, Dockerfile,\nCaddyfile, docker-compose.yml) to github\n\n``` sh\ngit push\n```\n\nand then ssh login to server and clone repo.\n\n``` sh\ngit clone https://github.com/joe47/power1.git\n```\n\nLastly, cd to `power1` directory and run\n\n``` sh\ndocker-compose up -d\n```\n\nand you're good to go!\n\nThe app `power1` can be accessed by 'bob' at the url\n\n``` sh\nhttps://power1.net/power1\n```\n\nwith password 'thebunny'\n\n# Appendix-1 {#appendix-1}\n\nConsider an app that is a balance of simple and functional -- one that\ncalculates the power for a 2-sample t-test as a function of the\nstandardized effect size. re is our shiny app `power1.R`:\n\nConsider the power1.R file:\n\n``` sh\n\nui <- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver <- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot <- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff <- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\n```\n\nThe app is designed to be maximally minimal. Using only base R\nfunctions, with a minimum of reactive widgets and layout commands to\nkeep it simple while still performing a useful function.\n\n# Appendix-4  {#appendix-4} Set up github repo\n\nStart by creating a repo for the app on github.\n\n-   login to github (screenshot)\n\n::: column-margin\n![](img/git1.png)\n:::\n\n-   click on `new` . Then in `repository name` field enter `power1`.\n    (Make the\n-   repo private, we only want to share with Bob at this point).\n-   create repo. Click `Create repository` green button at the bottom of\n    the page.\n-   back on your laptop: clone the repo:\n\n``` sh\ngit clone https://github.com/joe47/power1.git\n```\nthen you can ssh into the new server with\n\n``` sh\nsh> ssh ec2\n```\n\n## Tip 2: Add ubuntu to the docker group to allow docker to run without sudo.\n\n## Tip 3:\n\nCopy file contents to workstation without using editor with shell\ncommands. \\* Copy file from blog \\* Issue the following shell command \\*\npaste the file contents \\* type EOF on a new line.\n\n``` sh\ncat << EOF > Dockerfile\n```\n\n\n\n\n\n- install docker\n`sudo snap install docker`\n- clone github repo joe47/power1. Note: You'll need to authenticate to github. \n``` sh\ngit clone https://github.com/joe47/power1.git\n```\n\n- back on laptop...\n- add `Caddyfile` and `docker-compose.yml` files to `power1` repo.\n`Caddyfile`\n```sh\n\npower1app.org {\nbasicauth * {\n\t\tbob JDJhJDE0JElCQmRGaTA0ajY3bkZTLjRiWUZ4enVoZnVSQzVXVGVUMHlVcXJTaTRGYmpRQVFHLnYzN0tx\n\t}\n\thandle_path /power1/* {\n\t\treverse_proxy power1:3838\n\t}\n}\n```\n\n`docker-compose.yml`\n```sh\n\nversion: \"3.7\"\n\nservices:\n  power1:\n    build: .\n  caddy:\n    image: caddy:2.3.0-alpine\n    ports:\n      - \"443:443\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - caddy_data:/data\nvolumes:\n    caddy_data:\n\n```\n\n- update (push to) github repo. \n``` sh\ngit add *\ngit commit -am \"adding Caddyfile and docker-compose.yml\"\ngit push\n```\n- back on server\n\nLastly, cd to `power1` directory and run\n\n``` sh\ngit pull\ndocker-compose up -d\n```\n\n# References\n* [Setup Jupyter Notebook for R article](https://developers.refinitiv.com/en/article-catalog/article/setup-jupyter-notebook-r).\n\n\nstep 1\ncreate directory for Shiny app\npower1_app\nin power1_app create a directory for the code: power1_shiny\n> mkdir -p ~/prj/power1_app/power1_shiny/\n\nin power_shiny create app.R a shiny app as follows:\n> cd ~/prj/power1_app/power1_shiny/\n> cat app.R\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nui <- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver <- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot <- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff <- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\n```\n\n\ntest the Shiny app from the power1_app directory\n> R -e \"library(shiny); runApp('app.R', launch=T)\"\n\ncreate a Dockerfile to build the docker container, like this:\n> cat Dockerfile\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nFROM rocker/shiny:4.2.0\nCOPY /power1_shiny/* /srv/shiny-server/\nCMD [\"/usr/bin/shiny-server\"]\n```\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncreate a Caddyfile\n> cat Caddyfile\nrgtlab.org {\n    root * /var/www/html\n    handle_path /power1_shiny/* {\n            reverse_proxy 0.0.0.0:3838\n    }\n    file_server\n}\n```\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncreate a file index.html \n> cat index.html\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Power1 App</h1>\n    <ul>\n      <li><a href=\"./power1_shiny/\">Hello app</a></li>\n    </ul>\n  </body>\n</html>\n```\n\n\ncopy power1_app directory to rgtlab.org \n> scp -i \"~/.ssh/power1ssh.pem\" -r ~/prj/power1_app/  ubuntu@rgtlab.org:~\n\nlog into rgtlab.org\n> ssh rgtlab.org\ninstall Docker and Caddy\n(do the 'long' way with sudo apt until I can figure how to get snap or homebrew\nworking)\n>> sudo apt install docker.io\n>> sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https\n>> curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\n>> curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list\n>> sudo apt update\n>> sudo apt install caddy\n\nbuild the Docker container on rgtlab.org\n>> cd power1_app\n>> docker build -t power1_image .\ncreate container and run\n>> docker run -d --name=power1_shiny -p 3838:3838 --restart=always power1_image\n\n\ncopy Caddyfile to location caddy expects\n in /etc/caddy directory\n>> sudo cp ./Caddyfile /etc/caddy/Caddyfile \n\ncopy index.html to location caddy expects\n in /var/www/html directory\n>> cp  ./index.html /var/www/html/index.html \n\nrestart Caddy\n>> sudo systemctl reload caddy\n\nApp launch page is now available at https://rgtlab.org\n\n\nBonus: Add basic authentication for bob/utter to the Caddyfile:\n\nrgtlab.org {\nbasicauth * {\n\t\tbob JDJhJDE0JElCQmRGaTA0ajY3bkZTLjRiWUZ4enVoZnVSQzVXVGVUMHlVcXJTaTRGYmpRQVFHLnYzN0tx\n\t}\n    root * /var/www/html\n    handle_path /power1_shiny/* {\n            reverse_proxy 0.0.0.0:3838\n    }\n    file_server\n}\n\nRestart Caddy.\n>> sudo systemctl reload caddy\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}