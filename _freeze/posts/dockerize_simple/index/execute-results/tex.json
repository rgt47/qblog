{
  "hash": "5a312e141e7057341fce4ab7a4c36c96",
  "result": {
    "markdown": "---\ntitle: \"A simple process to get your  Shiny app online (securely). \"\ndescription: \"This is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\"\ncategories: [Docker, Shiny]\nimage: \"img/rshiny.png\"\ndate: last-modified\n---\n\n\n\n\n::: column-margin\n![under construction](img/crane.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\n\n# Introduction\n\nThis is another in a series of posts suggesting straightforward, open-source strategies\nfor effective communication of data analysis results to clients and collaborators. \n\nIn this\npost we propose a simple method for migrating a shiny app from your local\nworkstation to the web. \n\nThe list of open-source technologies (software stack) we propose for use: linux,\nR, Shiny, Docker, and Caddy. In this post we'll make use of the AWS EC2  cloud\nservice. In future posts we'll describe alternate cloud constructions, e.g.\nusing the low cost cloud service: Hetzner.\n\nIn the following we'll provide a proof-of-concept example of how to\napply these technologies for securely hosting an interactive Shiny application\non the web.\n\nWe start with a very simple, but hopefully still useful, stand-alone Shiny app\ndeveloped on our local workstation.    After some interfacing with the Amazon\nweb service environment, we'll push the Shiny app into the cloud, configure a\nweb server, and end up with a secure (encrypted and authenticated) app running\non a website with a custom domain name. \n\n# Methods\n\nTo begin, lets assume we've just finished developing a new Shiny app, named\n`power1_shiny`. We've done our development inside a working directory named\n`power1_app`. `power1_shiny` is a sub-directory   inside `power1_app`\ncontaining the shiny program file `app.R `.\n\nThe methods described here apply generically to any Shiny app.  See the\n`R/Shiny` code for our `power1_shiny` app (`app.R`) below.\n\nOur shiny app is  simple yet functional. It\ncalculates the power for a two-sample t-test as a function of the standardized\neffect size. The app is intentionally minimal, using only base R functions, with\na minimum of reactive widgets and layout commands. \n\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"show the `power1_shiny/app.R` code\"}\nui <- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver <- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot <- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff <- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\n```\n\n\n\n::: {.callout-note}\n## Motivation for this post: \n\nWe can test the app locally on our workstation by runnning it with the following command\nissued from the `power1_app` directory shell prompt  \n\n``` sh\nzsh> R -e \"library(shiny); runApp('power1_shiny/app.R', launch=T)\"\n```\n\nThis will, in sequence, start the R\nprogram, load the Shiny package, run and launch the app in your default browser.\n\n:::\n\nThe  margin figure   shows our Shiny app running locally in a browser on our\ndesktop. It consists of a widget to select the sample size and a plot to provide a dynamic\nvisualization  of the power as a function of the standardized\neffect size.\n\n::: column-margin\n![*Shiny app*](img/shinyapppower1.png)\n:::\n\nOnce we determine our app is working as designed, we move on to the task of\nhosting the app on a (virtual) server with the goal of sharing it with our\ncollaborators. How accomplish this? In the following we'll\ndescribe one approach that   'spins up' a server on Amazon Web Service EC2\nand in just a few steps, through the application of Docker, R, Shiny, and Caddy\nyields a secure web app running on the web.\n\n# Hosting\n\nIn order to host `power1_shiny` online we'll need to complete the\nfollowing tasks:\n\n1. obtain a static IP address \n3.  obtain a domain name \n1.  set up a firewall\n1.  configure and launch a virtual server\n4.  install and configure a webserver \n5.  obtain and install an SSL certificate \n6.  setup an authentication method\n   and\n7.  configure a reverse proxy method to translate https (port 443) requests to Shiny\n    (port 3838).\n\nAt first glance these 7 requirements can appear daunting, but on closer\ninspection all can be met with relative ease.\n\n## Pre-launch tasks\n\nSelect a hosting service \n\nThere are a number of cloud based server options: Microsoft Azure, Oracle,\nGoogle Cloud, Amazon AWS EC2, Digital Ocean and Hetzner to name a few. Each has\ntheir own approach to setting up a custom virtual server. Several have free or\nlow-cost service tiers available.\n\nAn overview of the process with AWS EC2  follows. (Detailed instructions for\nsetting up a virtual server on EC2 both through the EC2 console and the command\nline interface were described in an earlier post:\n[here](https://focusonr.org/posts/server_setup_aws_console) and\n[here](https://focusonr.org/posts/server_setup_aws_cli). \n\n\nPreface. create an AWS account or sign in and navigate to the EC2 dashboard. \n\nstep 1. Set up a working environment within EC2. That is: \n\na. generate secure shell (ssh) key-pair \nb. configure a firewall.\nc. obtain a static IP.\nd. obtain a domain name. \n\nOnce the environment is set up\n\nstep 2. Config and launch the server\n\nConfiguration has two parts:\n\na. select an instance operating system (`ubuntu`) and \nb. select an instance type (`t2-micro`) \n\nOnce the server is available  connect via ssh. \n\n```sh\nssh -i \"~/.ssh/power1_app_ssh.pem\"  ubuntu@rgtlab.org\n```\n\nor using the `config` setup described in Tip 1 at the end of this post.\n```sh\nssh rgtlab.org \n```\n\nThe only software tools necessary  to install are Docker and Caddy. If you\nfollowed the CLI  or console based instructions to set up a virtual server\n[here](https://focusonr.org/posts/server_setup_aws_cli/index.pdf) or\n[here](https://focusonr.org/posts/server_setup_aws_console/) Docker and Caddy\nwill be pre-installed. \n\nOtherwise you can install\nthem  with the following commands:\n\n``` sh\nsudo apt update\nsudo apt install docker.io -y\nsudo apt install -y curl debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | \\\nsudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | \\\nsudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy -y\n```\n\n\n\nAt this point we have\na customized virtual server with a static IP address, unique domain\nname and a firewall in place. In other words, items 1, 2, 3, and 4 from our\n'hosting' list above are taken care of.\n\n\n## Post-Launch steps on local workstation\n\nTo run and host our Shiny app online we need to add a few configuration files to\nour `power1_app` development directory.\n\n\n\nThe first configuation file is:\n\n## Docker\n\n1.   a Docker configuration file (default name `Dockerfile`)\n\n::: column-margin\n![](img/docker1.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@carrier_lost?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Ian\nTaylor</a> on\n<a href=\"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\nWe'll use docker to access  R and Shiny.  Here is our minimal dockerfile:\n\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"`Dockerfile`: Show the code\"}\nFROM rocker/shiny:4.2.0\n# there are a bunch of files in /srv/shiny-server. delete them\nRUN rm -rf /srv/shiny-server\nCOPY /power1_shiny/* /srv/shiny-server/\n# rocker/shiny adds a user named shiny\nUSER shiny\nCMD [\"/usr/bin/shiny-server\"]\n```\n\n\n\n This  file in just a few lines instructs Docker to build a new container based\n on a Rocker/Shiny image (which is a ubuntu image with R and Shiny installed)\n and layered with the addition of our Shiny code launch Shiny server listening\n on (default) port 3838. \n \n[Note: We placed the `power1_shiny/app.R` code in the default location\n`/srv/shiny-server` so we only need to start the Shiny server and it will find\nthe shiny program]{.aside}\n\n\n We'll use `Caddy` as our web server. Caddy is an\nopen-source tool that has the very useful feature of automating the\nacquiring and installing of an SSL certificate. (An SSL cert is required\nby most browsers to use the encrypted communication protocol `https`.)\n\nTo configure the web server we need to add\na Caddy configuration file (default name `Caddyfile`) to the \n`power1_app` directory.  \n\nThe Caddy\nconfiguration file specifies  three critical things.\n\n1.  the site domain name.\n2.  the authentication pair login/hash-password, for each user and\n3.  the 'reverse proxy' map that redirects requests to port 443 (ssl\n    port) onto port 3838 (Shiny port) in the docker container.\n\nOur barebones Caddyfile looks like this:\n\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"`Caddyfile`: Show the code\"}\nrgtlab.org {\n    basicauth * /power1_shiny/* {\n\t\tbob $2a$14$pYWd5O7JqNeGLS4m4CKkzemM2pq5ezn9bcTDowofZTl5wRVl8NTJm\n\t}\n    root * /var/www/html\n    handle_path /power1_shiny/* {\n            reverse_proxy 0.0.0.0:3838\n    }\n    file_server\n}\n```\n\n\n\nWe can accomplish what we need for items 4, 5, 6 and 7 through the\nCaddyfile.\n\nNote:\n\n-   rgtlab.org is our domain name\n-   the basicauth directive specifies login credentials for user bob (password:\n    vanilla47)\n-   `handle_path` maps all https requests to port 3838 where Shiny is\n    listening.\n-   `root` directive tells Caddy where to look for the `index.html` file. \n\nProviding our servers domain name, `rgtlab.org` is sufficient to\ninitiate an exchange with the `letsencrypt` service to generate an SSL certificate.\n\nLastly, we need an  `index.html` file to provide a launch page for the app.\n\n\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"`index.html`: Show the code\"}\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Power1 app</h1>\n    <ul>\n      <li><a href=\"./power1_shiny/\">Power1 app</a></li>\n    </ul>\n  </body>\n</html> \n```\n\n\n\nOnce the  config files, the index.html file and the Shiny code directory are\nin place copy we the entire `power1_app` directory to the server `rgtlab.org`  with the\nsecure copy command: \n\n```sh\nscp -i \"~/.ssh/power1_app.pem\" -r ~/prj/power1_app/  ubuntu@rgtlab.org:~\n```\n\n## Post-Launch steps on remote server\n\nUse ssh to login to the server and cd to `power1_app` directory\n\nBuild and run the Docker container (using the docker approach allows us\nto avoid installing both R and Shiny on the virtual server `rgtlab.org`).\n\n```sh\ndocker build -t power1_image .\n```\n run container\n\n```sh\ndocker run -d --name=power1_shiny -p 3838:3838 --restart=always power1_image\n```\n\n\nNext copy the `Caddyfile` to the location caddy expects to find it\n in the `/etc/caddy` directory\n\n```sh\nsudo cp ./Caddyfile /etc/caddy/\n```\n\ncopy `index.html` to location Caddy expects to find it in the `/var/www/html` directory\n```sh\ncp  ./index.html /var/www/html/\n```\n\n\nLastly, run the following command to restart Caddy\n\n```sh\nsudo systemctl reload caddy\n```\n\nThe App launch page will now be available at `https://rgtlab.org`.\n\nand you're good to go!\n\n## Tip construct ssh config file. \nFor convenience, construct a `config` file in `~/.ssh` as:\n\n``` sh\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nStrictHostKeyChecking no  #avoid known host file error message\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\n```\n\nthen you can ssh into the new server with\n\n``` sh\nsh> ssh rgtlab.org \n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}