{
  "hash": "357560bbc17742fd772cd16fe8a651a9",
  "result": {
    "markdown": "---\ntitle: \"Using the AWS command line interface to launch a EC2 server and docker compose\"\ndescription: \"A single batch program to setup virtual server to host shiny app\"\ncategories: [AWS]\nimage: \"img/rshiny.png\"\neditor: \n  markdown: \n    wrap: 72\n#format:\n#  pdf:\n#    toc: true\ndate: last-modified\n#date: \"2023-04-12\"\n---\n\n\n\n::: column-margin\n![under construction](img/crane.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\n# Introduction\n\nIn a previous post ( [here](https://focusonr.org/posts/setupaws/)) we discussed setting up a virtual server on AWS using\nthe interactive EC2 dashboard. In this post we'll present a bash shell script to\nperform the same task. \n\nTo get started on your workstation configure the aws cli app via the command. \n\n```sh\n aws configure \n```\nsee Appendix 1 [here](#appendix-1) for details on obtaining IAM credentials from your AWS account. \n\n\n\nstart up script. \n`awscli.sh`\n```sh\n\n#!/usr/bin/env bash\n# given the following:\n# vpc\n# subnet\n# aws configured\n# id, secret, and output=json\n# e.g. call awscli.sh power1_app\n# command line arguments: \nwhile getopts v:s:a:g:i:p: flag\ndo\n    case \"${flag}\" in\n        v) vpc_id=${OPTARG};;\n        s) subnet_id=${OPTARG};;\n        a) ami_id=${OPTARG};;\n        g) security_grp=${OPTARG};;\n        i) static_ip=${OPTARG};;\n        p) proj_name=${OPTARG};;\n    esac\ndone\necho \"vpc_id: $vpc_id\";\necho \"subnet_id: $subnet_id\";\necho \"ami_id: $ami_id\";\necho \"security_grp: $security_grp\";\necho \"static_ip: $static_ip\";\necho \"proj_name: $proj_name\";\n\nbase=`basename $PWD`\nif [ \"$#\" -ne 1 ]\nthen\n  proj=$base\nelse proj=$1\nfi\n\n# aws environment ids\n# -v\nvpc_id=\"vpc-14814b73\"\n# -s\nsubnet_id=\"subnet-f02c90ab\"\n# -a\nami_id=\"ami-014d05e6b24240371\"\n# -g\nsecurity_grp=\"sg-04d0db0a59182add5\"\n# -i\nstatic_ip=\"13.57.139.31\"\n# -d\nproj_name=\"power1_app\"\n\n\nexit\naws ec2 create-security-group \\\n    --group-name max_restrict \\\n    --description \"most restrictive l2 and 443 only\" \\\n    --tag-specifications\n    'ResourceType=security-group,Tags=[{Key=Name,Value=max_restrict-sg}]' \\\n    --vpc-id \"vpc-14814b73\"\n\naws ec2 authorize-security-group-ingress \\\n    --group-id $security_grp \\\n    --protocol tcp \\\n    --port 22 \\\n    --cidr \"0.0.0.0/0\" \n\n\naws ec2 authorize-security-group-ingress \\\n    --group-id $security_grp \\\n    --protocol tcp \\\n    --port 443 \\\n    --cidr \"0.0.0.0/0\" \n\n\naws ec2 create-key-pair  --key-name  $proj_name \\\n   --query 'KeyMaterial' --output text > ~/.ssh/$proj_name.pem\n\naws ec2 run-instances \\\n    --image-id $ami_id \\\n    --count 1 \\\n    --instance-type t2.micro \\\n    --key-name $proj_name \\\n    --security-group-ids $security_grp \\\n    --subnet-id $subnet_id \\\n    --block-device-mappings \"[{\\\"DeviceName\\\":\\\"/dev/sda1\\\",\\\"Ebs\\\":{\\\"VolumeSize\\\":30}}]\" \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$proj_name}]\"  \\\n    --user-data file://~/Dropbox/prj/qblog/posts/awscli_approach/aws_startup.sh\n\ncd ~/.ssh \nchmod 600 ~/.ssh/$proj_name.pem\n\niid=`aws ec2 describe-instances --filters \"Name=tag:Name,Values=$proj_name\" | \\\n\tjq -r '.Reservations[].Instances[].InstanceId'`\n\n\naws ec2 associate-address --public-ip $static_ip --instance-id $iid\n\nssh rgtlab.org 'sudo docker compose up'\n```\n\n`aws_startup.sh`\n\n```sh\n\n#!/bin/bash\nsnap install docker\ngit clone https://rgt47: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@github.com/rgt47/docker_compose_power1_app.git\nwait\ncp -R docker_compose_power1_app/ ~ubuntu\ncd ~ubuntu\nsudo chown -R ubuntu:ubuntu ~ubuntu/docker_compose_power1_app/\ncd ~ubuntu/docker_compose_power1_app\n```\n\n::: {.callout-tip}\n\n## Tip 1.\n\nFor convenience, construct a `config` file in `~/.ssh` as:\n\n``` sh\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app_ssh.rsa\n```\n\nthen we can ssh into the new server with\n\n``` sh\nsh> ssh rgtlab.org\n```\n:::\n\nChange the access permissions: `sudo chmod 600 power1ssh.pem` to be more\nrestrictive. \n\n## Appendix 1 Set up AWS IAM {#appendix-1} \n  \n\nSet up `aws` access via the `aws configure` program. To get the needed credentials\nuse the AWS IAM service. \n\nDetails follow: \n\nLog into `AWS` console. \n\nSearch for `IAM service`. Navigate to IAM dashboard. \n\nSelect `Users` in left hand panel.  \n\nThen select `Add Users` button (in upper right). \n\nThen enter a `User name` in the form. Click `Next` (lower right)\n\nThen `Create User`. \n\nClick on the user name\n\nIn the page that comes up. Select `Security Credentials` tab (center of page). \n\nUnder `Access Keys` panel click `Create access key` (right side or bottom of\npanel). \n\nClick `Command Line Interface CLI)` \n\nand  at the bottom of the page click the checkbox \"I understand...\".\n\nFinally select `Create access key` and \n\nchoose `Download .csv file` (lower right). \n\nNavigate Download screen to local `~/.aws` directory. \n\nClick `Done`\n\nNow in the terminal on your workstation, configure the aws cli app via the command. \n\n```sh\n aws configure \n```\n\nEnter  info from the credentials file just downloaded. After entering the `AWS\nAccess Key ID` and `AWS Secret Access Key` information you are asked for a\nRegion, (My region is `us-west-1`),  and an output format suggested output format is\n`JSON`. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}