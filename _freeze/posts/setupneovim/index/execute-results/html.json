{
  "hash": "f4609790a8f243a4cdc719e4f218dcd2",
  "result": {
    "markdown": "---\ntitle: \"Setting up neovim sor data science code development. \"\ndescription: \"This is the first in a series of posts offering suggested strategies for setting up key tools for data science code development\"\nsubtitle: \"Github, neovim\"\n#format:\n#  pdf:\n#    toc: true\ndate: \"2022-10-23\"\ncategories: [Neovimc]\nimage: \"img/nvimlogo.png\"\n---\n\n\n\n:::{.column-body}\n![under construction](img/crane.jpg)\n:::\n\n<font size=\"1\"> \nPhoto by <a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan Waters</a> on <a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font> \n\n# Introduction\n\nNeovim (a fork of Vim) is a text editor with several advantages for data science code development. \nOne of the main attractions is that its open source with a number of useful plugins to facilitate working on\nR, python, and julia code. Also, its modal system allows text manipulation at\npotentially far greater speed than conventional, mouse-centric, systems. \n\nOur presentation here is for an macos environment. Appendix one contains\nrequired adjustments for a ubuntu linux environment.\n\n# Step one:  Install the latest stable version of neovim.\n\nThe simplist approach is to use homebrew: \n\n```sh\n> brew install neovim neovim-qt\n```\nSet up convenience aliases in `zsh`. \n\n```sh\n> alias n = neovim-qt\n> alias nt = neovim\n```\n(the `t` in `nt` is for `terminal`)\n\n# Step 2: Configure neovim\n\nThe standard location for `neovim` config files on \"unix-like\" systems is\n`~/.config/nvim`.\nThe main config file is either init.vim (VimL) or init.lua (Lua). In this post\nwe'll focus on lua based configuration.\n\nSpecifically, the following code block creates an `nvim` subdirectory under\n`~/.config` and initialize a configuration file `init.lua`.\n\n```sh\n> cd .config\n> mkdir nvim\n> cd nvim\n> touch init.lua\n\n\n```\n\ninstall packer plugin manager\n\n```sh\ngit clone --depth 1 https://github.com/wbthomason/packer.nvim\\\n~/.local/share/nvim/site/pack/packer/start/packer.nvim\n\n```\n\nAdd following to init.lua to use `packer.nvim` to manage plugins\n(maximally minimal)\n\n```sh\n\nvim.g.mapleader = \",\"\nvim.g.localleader = \" \"\nrequire('vars')      -- Variables\nrequire('opts')      -- Options\nrequire('keys')      -- Keymaps\nrequire('plug')      -- Plugins\nvim.cmd([[\nfiletype plugin on\nsyntax enable\nset clipboard+=unnamedplus\n]])\nvim.g.tex_flavor='latex'\nvim.g.vimtex_view_method='skim'\nvim.g.vimtex_quickfix_mode=0\nvim.g.UltiSnipsSnippetDirectories = \"['~/.vim/UltiSnips', 'UltiSnips']\"\nvim.g.UltiSnipsExpandTrigger=\"<tab>\"\nvim.g.UltiSnipsJumpForwardTrigger=\"<tab>\"\nvim.g.UltiSnipsJumpBackwardTrigger=\"<s-tab>\"\nvim.g.UltiSnipsEditSplit=\"vertical\"\nvim.g.UltiSnipsUsePythonVersion = 3\n\nrequire('leap').add_default_mappings()\nrequire'lspconfig'.r_language_server.setup{}\nvim.opt.termguicolors = true\nvim.cmd('colorscheme onedark')\n\nvim.cmd([[\naugroup rmarkdown\nautocmd!\nautocmd FileType rmd,r nnoremap <buffer> <CR>  :call SendLineToR(\"down\")<CR>\nautocmd FileType rmd,r nnoremap <buffer> <space>l :call b:SendChunkToR(\"silent\",\"down\")<cr>\nautocmd FileType rmd,r nnoremap <buffer> <space>' :call RMakeRmd(\"default\")<cr>\nautocmd FileType rmd,r vmap <buffer> <CR> <localleader>sd\nautocmd FileType rmd,r vmap <buffer> <s-CR> :call b:SendSelectionToR(\"silent\",\"down\")<cr>\nautocmd FileType rmd,r noremap <space>r :call StartR(\"R\")<cr>\nautocmd FileType rmd,r noremap <space>s :call RAction(\"str\")<cr>\nautocmd FileType rmd,r noremap <space>i :call RAction(\"dim\")<cr>\nautocmd FileType rmd,r noremap <localleader>h :call RAction(\"head\")<cr>\nautocmd FileType rmd,r noremap <space>p :call RAction(\"print\")<cr>\nautocmd FileType rmd,r noremap <space>q :call RAction(\"length\")<cr>\nautocmd FileType rmd,r noremap <space>n :call RAction(\"nvim.names\")<cr>\nautocmd FileType rmd,r noremap <space>c :call RAction(\"cnt\")<cr>\nautocmd FileType rmd,r noremap <space>k :call b:PreviousRChunk()<cr>\nautocmd FileType rmd,r noremap <space>j :call b:NextRChunk()<cr>\nautocmd FileType rmd,r nnoremap <buffer> <space>t  :call b:RDSendLineAndInsertOutput(\"silent\")<cr>\naugroup END\n]])\n\n-- COC install config\n-- Some servers have issues with backup files, see #649.\nvim.opt.backup = false\nvim.opt.writebackup = false\n-- Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable\n-- delays and poor user experience.\nvim.opt.updatetime = 300\n-- Always show the signcolumn, otherwise it would shift the text each time\n-- diagnostics appear/become resolved.\nvim.opt.signcolumn = \"yes\"\n\nlocal keyset = vim.keymap.set\n-- Auto complete\nfunction _G.check_back_space()\n    local col = vim.fn.col('.') - 1\n    return col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') ~= nil\nend\nlocal opts = {silent = true, noremap = true, expr = true, replace_keycodes = false}\nkeyset(\"i\", \"<TAB>\", 'coc#pum#visible() ? coc#pum#next(1) : v:lua.check_back_space() ? \"<TAB>\" : coc#refresh()', opts)\nkeyset(\"i\", \"<S-TAB>\", [[coc#pum#visible() ? coc#pum#prev(1) : \"\\<C-h>\"]], opts)\n\n-- Make <CR> to accept selected completion item or notify coc.nvim to format\n-- <C-g>u breaks current undo, please make your own choice.\nkeyset(\"i\", \"<cr>\", [[coc#pum#visible() ? coc#pum#confirm() : \"\\<C-g>u\\<CR>\\<c-r>=coc#on_enter()\\<CR>\"]], opts)\n\n-- Use <c-j> to trigger snippets\nkeyset(\"i\", \"<c-j>\", \"<Plug>(coc-snippets-expand-jump)\")\n-- Use <c-space> to trigger completion.\nkeyset(\"i\", \"<c-space>\", \"coc#refresh()\", {silent = true, expr = true})\n\n-- Use `[g` and `]g` to navigate diagnostics\n-- Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.\nkeyset(\"n\", \"[g\", \"<Plug>(coc-diagnostic-prev)\", {silent = true})\nkeyset(\"n\", \"]g\", \"<Plug>(coc-diagnostic-next)\", {silent = true})\n\n\n--vim.cmd([[\n--inoremap <silent><expr> <TAB>\n      --\\ coc#pum#visible() ? coc#_select_confirm() :\n      --\\ coc#expandableOrJumpable() ? \"\\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\\<CR>\" :\n      --\\ CheckBackSpace() ? \"\\<TAB>\" :\n      --\\ coc#refresh()\n\n--function! CheckBackSpace() abort\n  --let col = col('.') - 1\n  --return !col || getline('.')[col - 1]  =~# '\\s'\n--endfunction\n\n--let g:coc_snippet_next = '<tab>'\n--]])\n\nvim.keymap.del({'x', 'o'}, 'x')\nvim.keymap.del({'x', 'o'}, 'X')\n11111\n  vim.cmd('packadd packer.nvim')\n  install_plugins = true\nend\n\nrequire('packer').startup(function(use)\n  use 'wbthomason/packer.nvim'\n  use 'joshdick/onedark.vim'\n\n  if install_plugins then\n    require('packer').sync()\n  end\nend)\n\nif install_plugins then\n  return\nend\n\nvim.opt.termguicolors = true\nvim.cmd('colorscheme onedark')\n\n```\n\n# plugins\n\n```sh\n\nrequire('packer').startup(function(use)\n  use 'joshdick/onedark.vim'\nuse \"wbthomason/packer.nvim\"\nuse \"nvim-lua/plenary.nvim\"\nuse {'nvim-telescope/telescope-fzf-native.nvim', run = 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build' }\nuse \"neovim/nvim-lspconfig\"          -- Mind the semi-colons\nuse 'nvim-tree/nvim-web-devicons'\nuse {\n        'nvim-treesitter/nvim-treesitter',\n        run = function() require('nvim-treesitter.install').update({ with_sync = true }) end,\n    }\n--use \"honza/vim-snippets\"\nuse {'neoclide/coc.nvim', branch = 'release'}\n--use \"ncm2/ncm2\"\n--use \"roxma/nvim-yarp\"\n----use \"ncm2/ncm2-bufword\"\n--use \"ncm2/ncm2-path\"\nuse \"junegunn/vim-easy-align\"\nuse {\n  'nvim-telescope/telescope.nvim', tag = '0.1.0',\n  requires = { {'nvim-lua/plenary.nvim'} }\n}\nuse \"junegunn/fzf\"\nuse \"rhysd/clever-f.vim\"\nuse \"ggandor/leap.nvim\"\nuse \"jalvesaq/Nvim-R\"\nuse \"tpope/vim-surround\"\nuse \"machakann/vim-highlightedyank\"\n--use \"sirver/ultisnips\"\nuse \"junegunn/vim-peekaboo\"\nuse \"junegunn/goyo.vim\"\nuse \"junegunn/limelight.vim\"\nuse \"tpope/vim-unimpaired\"\nuse \"preservim/nerdcommenter\"\nuse \"vim-airline/vim-airline\"\nuse \"vim-airline/vim-airline-themes\"\nuse \"lervag/vimtex\"      -- Use braces when passing options\n    --use 'williamboman/nvim-lsp-installer' -- Automatically install LSPs\n    --use 'jose-elias-alvarez/null-ls.nvim' -- Null ls is used for code formatting and pylint analysis\n    --use 'hrsh7th/nvim-cmp' -- Autocompletion plugin\n    --use 'hrsh7th/cmp-nvim-lsp' -- Autocompletion with LSPs\nend)\n\n```\n\n# key maps\n\n```sh\n\n--[[ keys.lua ]]\nlocal map = vim.api.nvim_set_keymap\n\n-- remap the key used to leave insert mode\nmap('n', ':', ';', {noremap=true})\nmap('n', ';', ':', {noremap=true})\nmap('n', '<S-Space>','<C-u>', {noremap=true})\nmap('n', '<space><space>','<C-d>', {noremap=true})\nmap('n', '-','$', {noremap=true})\nmap('n', '<Space>f','vipgq', {noremap=true})\nmap('n', '<leader>v','edit ~/.vimrc<cr>', {noremap=true})\nmap('n', '<leader>a','ggVG', {noremap=true})\nmap('n', '<leader>S','let @x=@*', {noremap=true})\nmap('n', '<leader>t','tab split<cr>', {noremap=true})\nmap('n', '<leader>y','vert sb2<cr>', {noremap=true})\nmap('n', '<leader>u','UltiSnipsEdit<cr>', {noremap=true})\nmap('n', '<Leader>0','ls!<CR>:b<Space>', {noremap=true})\nmap('n', '<leader><leader>','<C-w>w', {noremap=true})\nmap('n', '<leader>1','<C-w>:b1<cr>', {noremap=true})\nmap('n', '<leader>2','<C-w>:b2<cr>', {noremap=true})\nmap('n', '<leader>3','<C-w>:b3<cr>', {noremap=true})\n--map('i',  '--','_', {noremap=true})\n--map('t',  '--','_', {noremap=true})\nmap('t',  'ZZ', \"q('no')<CR>\", {noremap=true})\nmap('t',  'ZQ', \"q('no')<CR>\", {noremap=true})\nmap('v',  '-', '$', {noremap=true})\nmap('t',  '<leader>0','<C-w>:ls!<cr>:b<Space>', {noremap=true})\nmap('i',  '<Esc>', '<Esc>`^', {noremap=true})\nmap('t',  '<leader><leader>', '<C-w>w', {noremap=true})\nlocal builtin = require('telescope.builtin')\nvim.keymap.set('n', '<leader>ff', builtin.find_files, {})\nvim.keymap.set('n', '<leader>fg', builtin.live_grep, {})\nvim.keymap.set('n', '<leader>fb', builtin.buffers, {})\nvim.keymap.set('n', '<leader>fh', builtin.help_tags, {})\n```\n# key opts\n\n```sh\n\n--[[ opts.lua ]]\nlocal opt = vim.opt\nopt.relativenumber = true\nopt.clipboard='unnamed'\nopt.textwidth=80\nopt.cursorline = true\nopt.hlsearch   = true\nopt.splitright= true\nopt.hidden   = true\nopt.incsearch    = true\nopt.showmatch= true\nopt.ignorecase= true\nopt.smartcase= true\n-- opt.background='light'\n-- opt.gdefault\n-- [[ Context ]]\nopt.colorcolumn = '80'           -- str:  Show col for max line length\nopt.number = true                -- bool: Show line numbers\n-- opt.relativenumber = true        -- bool: Show relative line numbers\nopt.scrolloff = 4                -- int:  Min num lines of context\nopt.signcolumn = \"yes\"           -- str:  Show the sign column\n\n-- [[ Filetypes ]]\nopt.encoding = 'utf8'            -- str:  String encoding to use\nopt.fileencoding = 'utf8'        -- str:  File encoding to use\n\n-- [[ Theme ]]\nopt.syntax = \"ON\"                -- str:  Allow syntax highlighting\nopt.termguicolors = true         -- bool: If term supports ui color then enable\n\n-- [[ Whitespace ]]\nopt.expandtab = true             -- bool: Use spaces instead of tabs\nopt.shiftwidth = 4               -- num:  Size of an indent\nopt.softtabstop = 4              -- num:  Number of spaces tabs count for in insert mode\nopt.tabstop = 4                  -- num:  Number of spaces tabs count for\n\n-- [[ Splits ]]\nopt.splitright = true            -- bool: Place new window to right of current one\nopt.splitbelow = true            -- bool: Place new window below the current one\n```\n# key vars\n\n```sh\n\n\n--[[ vars.lua ]]\n\nlocal g = vim.g\ng.t_co = 256\ng.background = \"dark\"\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}