{
  "hash": "238f20ab9e4c0f369a4d158f432cd5ff",
  "result": {
    "markdown": "---\ntitle: \"Setting up neovim for data science code development. \"\ndescription: \"This is the first in a series of posts offering suggested strategies for setting up key tools for data science code development\"\nsubtitle: \"Github, neovim\"\n#date: \"2022-11-14\"\n#fontsize: 11pt\n#geometry: \"left=3cm,right=3in,top=2cm,bottom=2cm\"\n#format:\n#  pdf:\n#    toc: true\ndate: \"2022-10-23\"\ncategories: [Neovimc]\nimage: \"img/nvimlogo.png\"\n---\n\n\n\n:::{.column-body}\n![under construction](img/crane.jpg)\n:::\n\n<font size=\"1\"> \nPhoto by <a\nhref=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on <a\nhref=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font> \n\n# Introduction\n\nNeovim (a fork of Vim) is a text editor with several advantages for data science\ncode development. One of the main attractions is that its open source with a\nnumber of useful plugins to facilitate working on R, python, and julia code.\nAlso, its modal system allows text manipulation at potentially far greater speed\nthan conventional, mouse-centric, systems. \n\nOur presentation here is for an macos environment. Appendix one contains\nrequired adjustments for a ubuntu linux environment.\n\n# Step one:  Install the latest stable version of neovim.\n\nThe simplist approach is to use homebrew: \n\n```sh\n> brew install neovim neovim-qt\n```\nSet up convenience aliases in `zsh`. \n\n```sh\n> alias n = neovim-qt\n> alias nt = neovim\n```\n(the `t` in `nt` is for `terminal`)\n\n# Step 2: Configure neovim\n\nThe standard location for `neovim` config files on \"unix-like\" systems is\n`~/.config/nvim`.\nThe main config file is either init.vim (VimL) or init.lua (Lua). In this post\nwe'll focus on lua based configuration.\n\nSpecifically, the following code block creates an `nvim` subdirectory under\n`~/.config` and initialize a configuration file `init.lua`.\n\n```sh\n> cd .config\n> mkdir nvim\n> cd nvim\n> touch init.lua\n\n\n```\n\ninstall paq plugin manager\n\n```sh\n\ngit clone --depth=1 https://github.com/savq/paq-nvim.git \\\n    \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/pack/paqs/start/paq-nvim\n:PaqInstall\n```\n\nAdd following to init.lua to use `paq-nvim` to manage plugins\n(maximally minimal)\n\n```sh\n\n\n-- bootstrap process\n-- install paq\n--git clone --depth=1 https://github.com/savq/paq-nvim.git \\\n--    \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/pack/paqs/start/paq-nvim\n--    :PaqInstall\n--\nrequire \"paq\" {\n\"savq/paq-nvim\";                  -- Let Paq manage itself\n\"junegunn/fzf\";\n'voldikss/vim-floaterm';\n'preservim/nerdcommenter';\n\"NLKNguyen/papercolor-theme\";\n\"SirVer/ultisnips\"; \n\"honza/vim-snippets\";\n\"ggandor/leap.nvim\";\n\"jalvesaq/Nvim-R\";\n'davidhalter/jedi-vim';\n\"lervag/vimtex\";\n\"owickstrom/vim-colors-paramount\"\n}\nrequire('basics')\nrequire('nvim-R-config')\nrequire('leap').add_default_mappings()\nvim.keymap.del({'x', 'o'}, 'x')\nvim.keymap.del({'x', 'o'}, 'X')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n# plugin discussions\n\n\n# keymaps\n```sh\n\n\nvim.cmd([[\nset number relativenumber\nset textwidth=80\nset cursorline\nset iskeyword-=_ \nset hlsearch   \nset splitright\nset hidden   \nset incsearch    \nset noswapfile\nset showmatch\nset ignorecase\nset smartcase\nset gdefault\nfiletype plugin on\n\n\"completion \n\"        for text: S-Tab launches pop-up words\n\"\tfor R and Rmd completion is automatic\n\"ultisnips, \n\"\tlaunch with C-j, move forward with C-j, move backward with C-k\n\"\topen ultisnips file with <leader>u\n\nset dictionary+=/usr/share/dict/words\nlet g:UltiSnipsSnippetDirectories=[\"UltiSnips\", \"my_snippets\"]\n\nlet g:UltiSnipsExpandTrigger=\"<c-j>\"\nlet g:UltiSnipsJumpForwardTrigger=\"<c-j>\"\nlet g:UltiSnipsJumpBackwardTrigger=\"<c-k>\"\n\nlet g:UltiSnipsEditSplit=\"vertical\"\nlet g:UltiSnipsUsePythonVersion = 3\n\"nnoremap <leader>u :UltiSnipsEdit<cr>\nset completeopt=longest,menuone\n\ninoremap <expr> <TAB> pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\ninoremap <expr> <S-TAB> pumvisible() ? \"\\<C-p>\" : \"\\<TAB>\"\ninoremap <expr> <CR> pumvisible() ? \"\\<C-y>\" : \"\\<C-g>u\\<CR>\"\nlet R_set_omnifunc = [\"r\",  \"rmd\", \"quarto\",  \"rhelp\"]\nlet R_auto_omni = [\"r\", \"rmd\", \"rhelp\"]\n]])\nvim.g.mapleader = \",\"\nvim.g.maplocalleader = \" \"\nlocal map = vim.keymap.set\nlocal opts = {noremap = true}\nmap('n', ':', ';', opts)\nmap('n', ';', ':', opts)\nmap('n', '<Space><leader>','<C-u>', opts)\nmap('n', '<leader>u',':UltiSnipsEdit<cr>', opts)\nmap('n', '<Space><Space>','<C-d>', opts)\nmap('n', '-','$', opts)\nmap('n', '<leader>f','vipgq', opts)\nmap('n', '<leader>v','edit ~/.config/nvim/init.lua<cr>', opts)\nmap('n', '<leader>a','ggVG', opts)\nmap('n', '<leader>t',':tab split<cr>', opts)\nmap('n', '<leader>y',':vert sb2<cr>', opts)\nmap('n', '<leader>0',':ls!<CR>:b<Space>', opts)\nmap('n', '<leader><leader>','<C-w>w', opts)\nmap('n', '<leader>1','<C-w>:b1<cr>', opts)\nmap('n', '<leader>2','<C-w>:b2<cr>', opts)\nmap('n', '<leader>3','<C-w>:b3<cr>', opts)\nmap('t',  'ZZ', \"q('no')<CR>\", opts)\nmap('t',  'ZQ', \"q('no')<CR>\", opts)\nmap('v',  '-', '$', opts)\nmap('t',  '<leader>0','<C-\\\\><C-n><C-w>:ls!<cr>:b<Space>', opts)\nmap('t',  '<Escape>','<C-\\\\><C-n>', opts)\nmap('t',  '<leader><leader>','<C-\\\\><C-n><C-w>w', opts)\nmap('i',  '<Esc>', '<Esc>`^', opts)\nmap('i',  '<S-Tab>', '<C-x><C-k>', opts)\n\nvim.cmd([[\n\"    copy clipboard to register x for safe keeping\nnnoremap <leader>x :let @x=@*\n\"    paste registers into terminal\ntnoremap <expr> <C-R> '<C-\\><C-N>\"'.nr2char(getchar()).'pi'\nset background=light\ncolorscheme paramount\n]])\n\n\n\n\n\n\n\n\n\n\n```\n\n# Set up R \n\n```sh\n\n\nvim.cmd([[\nlet $FZF_DEFAULT_COMMAND = 'rg --files --hidden'\nlet R_auto_start = 2\nlet R_hl_term = 0\nlet R_clear_line = 1\nlet R_pdfviewer = \"zathura\" \nlet R_assign = 2\nlet R_latexcmd = ['xelatex']\naugroup rmarkdown\nautocmd!\nautocmd FileType rmd,r nnoremap <buffer> <CR>  :call SendLineToR(\"down\")<CR>\nautocmd FileType rmd,r nnoremap <buffer> <space>l :call SendChunkToR(\"silent\",\"down\")<cr>\nautocmd FileType rmd,r nnoremap <buffer> <space>' :call RMakeRmd(\"default\")<cr>\nautocmd FileType rmd,r noremap <space>s :call RAction(\"str\")<cr>\nautocmd FileType rmd,r noremap <space>i :call RAction(\"dim\")<cr>\nautocmd FileType rmd,r noremap <space>h :call RAction(\"head\")<cr>\nautocmd FileType rmd,r noremap <space>p :call RAction(\"print\")<cr>\nautocmd FileType rmd,r noremap <space>q :call RAction(\"length\")<cr>\nautocmd FileType rmd,r noremap <space>n :call RAction(\"nvim.names\")<cr>\nautocmd FileType rmd,r noremap <space>c :call RAction(\"cnt\")<cr>\nautocmd FileType rmd,r noremap <space>k :call PreviousRChunk()<cr>\nautocmd FileType rmd,r noremap <space>j :call NextRChunk()<cr>\naugroup END\n]])\n\n\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}