{
  "hash": "0c61de219101bad62281148de3bd4d33",
  "result": {
    "markdown": "---\ntitle: \" Set up a virtual server on AWS to host Shiny apps \"\ndescription: \"Detailed steps for setting up a lightweight server on AWS. \"\ncategories: [AWS]\nimage: \"img/rshiny.png\"\neditor: \n  markdown: \n    wrap: 72\n#format:\n#  pdf:\n#    toc: true\n# date: \"2023-03-26\"\n---\n\n\n\n::: column-margin\n![under construction](img/crane.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\n# Introduction\n\nOnce we have a woring shiny  app, we can move on to the task of hosting the app\non a (virtual) server to share with our collaborators. There are many ways to\naccomplish this.  In this post, we'll describe how to  'spin' up a server on\nAmazon Web Service EC2,  and in the next post show how, in just a few steps,\nthrough the application of Docker, R, Shiny, and Caddy (webserver) functionality\nwe can have a fully functional and secure web app to share with colleagues.\n\n# Hosting\n\n::: column-margin\n![*Data flow *](img/blogdockerizeflow.png)\n:::\n\nFigure 3 illustrates the tools we'll use and the flow of program and\nconfiguration files. In order to host a shiny app, say `power1_shiny`, online  we'll need to complete the\nfollowing tasks:\n1.  create a virtual server (connected via ssh) with a firewall\n2. obtain a static IP address (to identify the server online)\n3.  obtain a domain name (name for IP address)\n4.  install and configure a webserver (tool to interact with https protocol requests and\n    respond)\n5.  obtain and install an SSL certificate (to allow encrypted communication)\n6.  setup an authentication method (password protection)\n7.  configure a reverse proxy method (translate https (port 443) requests to Shiny\n    (port 3838)\n\nIn this\npost we'll address the first three of these. Tasks four through seven will be\naccomplished using docker-compose and described in the next post. \n\nAt first glance these 7 requirements can appear daunting, but on closer\ninspection all can be met with relative ease and minimal  cost ( using a\ncloud-hosting service, e.g. Amazon's EC2 or Digital Ocean, and a\n\"leased\" domain name from, e.g. GoDaddy, or Amazon's Route 53)\nor at no cost( if you have your own  server with IP address, and domain name)\n\n# Select a hosting service \n\nok! got my shiny app running. Works great! Now how do I get it up on the\nweb and shared with my client?\n\nThere are a number of cloud based server options to choose from: Microsoft Azure,\nOracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each\nhas their own approach to setting up a custom virtual server. Several\nhave free or low-cost service tiers available.\n\nAn overview of the process with EC2  follows. \n\n\n\nAWS is a reasonable choice for setting up a small custom server. \n\nTo start open the EC2 console.\n\n``` sh\n   https://aws.amazon.com/console\n```\n\nChoose regional service. For me its \"N. California\".\n\n::: column-margin\n![](img/ec2a.png)\n:::\n\nCreate an account or sign in and navigate to the EC2 dashboard. \n\nAlong with selecting a server you'll need to set up a working environment. This consists of\nfour main components: \n\n1. ssh key-pair to allow you to remotely login to\nthe virtual server. \n2. A firewall to restrict access to only secure\nconnections, \n3. A static IP. This is required for maintaining the link\nbetween the domain name and the server when rebooting. \n4. A domain name,\nsay rgtlab.org. A domain name is not required but will\nfacilitate collaborator access by not needing to use the IP address directly.\n\n# Ssh key pair\n\n\n\n# Set up static IP address\n\nUse \"elastic IP\" to get a static IP that can be assigned to the server.\nNavigate to Network and Security again and select Allocate Elastic IP.\nAn IP will be assigned from the EC2 pool of IPv4 IP addresses. (there is\na small fee for use of the static IP).\n\nOnce you have created the instance come back to this Elastic IP dialog\nand - click on elastic IP in left panel - select associate Elastic IP\n13.57.139.31 choose an instance (power1) to associate with.\n\n-   side panel, click \"ec2\"\n-   side panel, click \"Instances\"\n-   from top bar, click \"Launch Instances\"\n\n# Get Domain Name\n\nTo obtain a dedicated domain name Go to godaddy.com or Amazon route 53\nto associate a domain name with your Elastic IP.\n\n(screenshot)\n\nOnce a domain name is aquired, eg power1.net, you want to associate it\nwith your static IP address. To associate domain name power1.net with\nelastic IP do as follows.\n\nin Route 53:\n\n-   click on 'hosted zones' in side panel\n-   click on power1.net in center panel\n-   click on checkbox for power1.net type=A line\n-   then click on edit record in right panel\n-   change ip address to the Elastic IP (e.g. 13.57.139.31).\n\n# Select and launch instance\n\n2.  From \"Quick Start\" ine the EC2 dashboard click `Ubuntu` button.\n\n-   Name the server, say power1\n\n3.  Next choose an instance **type**, e.g. \"t2-micro\". (different\n    instance types are mixtures of size, processors, memory, instance\n    storage capacity, network performance)\n\n4.  click \"Next: Configure Instance Details\"\n\n5.  choose a Key pair (use power1.rsa from your environment) .\n\n6.  Add security group, e.g. 'power1.firewall' allowing 22 (ssh), and\n    443 (https).\n\n7.  choose 30 GB of EBS General Purpose (SSD) or Magnetic storage\n\n8.  click Launch Instance\n\n# Access instance\n\nLog into new instance with ssh from local\n\n``` sh\nssh -i \"~/Downloads/power1.rsa.pem\" ubuntu@13.57.139.31\n```\n\n\n\n## Tip 2: Add ubuntu to the docker group to allow docker to run without sudo.\n\n\n\n\n\n\n\n\n- Open the AWS portal and navigate to EC2 service. \n\n- Select a server (or instance). From `Launch Instance` panel.   \n- Name the server. Suggest `power1server`. \nSuggest `Ubuntu 22.04 LTS` as a  and stable platform. \n\n- Name the server. Suggest `power1server`. \n-   Choose an AMI (instance template, with a prefered operating system):\n\nI'll suggest choosing \"Ubuntu Server 22.04 LTS\", but other linux\ndistributions can be utilized, e.g. Red Hat, or SUSE.\n\n- Select a type. Types are combinations of cpus, storage capacity, memory, and\n  network speed. Suggest `t2-micro` as a suficiently capacious and relatively\n  inexpensive (Free tier) option. \n\n\nThe first time you create an AWS account you need to exchange an SSH key\npair with AWS. You can generate the ssh key pair locally on you\nworkstation and upload the public key to EC2. To do this create a\ndirectory to hold the keys. e.g. `~/.ssh`. From inside `.ssh` directory\nyou can generate the keys with the command\n\n``` sh\nssh-keygen -m PEM\n```\n\nin the dialog that ensues name the key prefix something like `ssh-rsa`.\n\nBack in the browser on EC2 select `security/keys`, A dialog starts and\nasks for the location of the public key. Browse to the `.ssh` directory\nand import the public key `ssh-rsa.pub`.\n- Define a `Key pair` to use or if you don't have one,  you can select \n`Create Key Pair` in EC2. Give the pair a name, say\n`power1ssh`, and a pair of keys will be created and the private key\n`power1ssh.pem` will be downloaded to you local machine. In my case to\nthe default `~/Downloads` directory. Move the file to the `~/.ssh` directory. \nChange the access permissions: `sudo chmod 600 power1ssh.pem`.\n- update software on server: `sudo apt-get update`\n\n- Create a firewall using `Network settings` pane\nChoose `Create security\n  group` and select `Allow SSH traffic` and `Allow HTTPS traffic`. \n\n\nThe default name for the firewall will be something like `launch-wizard-6`. \n\n\n- Configure  30 GiB of gp2 (general purpose SSD) storage. Define the size and\n  type of disc storage. \n\nNow Launch the Instance.\n\nWe still need a static IP address and a domain name.\n\n- Navigate back to the EC2 page. \n- Select `Elastic IPs` from the `Network & Security` section\nSelect `Allocate Elastic IP address` button in upper right of page. \nName it `power1`. \n- check box for `power1`, and choose  `Associate IP address` from the `Actions`\n  drop down menu. Choose the `power1server` server from the `Instance` drop down list.\n\nSelect Domain Name\n\n- Open Route 53 interface in AWS. Select `Hosted zones`. Select `Create hosted zone`.\n  Assign a domain name e.g. `power1app.org`. \n- Click on the `power1app.org` link that is created. Select the checkbox for the\n  line with Type=A. In the right hand panel select `edit record`. Enter the\n  value of the Elastic IP address obtained above. \n\nOn your laptop\n- Log into server with `ssh -i \"~/.ssh/power1ssh.pem\" ubuntu@power1app.org`\n\n# Appendix 3 Tips and Tricks\n\n## Tip 1.\n\nFor convenience, construct a `config` file in `~/.ssh` as:\n\n``` sh\nHost ec2\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/Downloads/power1.rsa\n```\n\nthen you can ssh into the new server with\n\n``` sh\nsh> ssh ec2\n```\n\nIdea: use description style from AWS page.\n'Authorize inbound traffic for your Linux instances - Amazon Elastic Compute\nCloud'\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html\n\nAdd a rule for inbound SSH traffic to a Linux instance\n\nSecurity groups act as a firewall for associated instances, controlling both inbound and outbound traffic at the instance level. You must add rules to a security group to enable you to connect to your Linux instance from your IP address using SSH.\nTo add a rule to a security group for inbound SSH traffic over IPv4 (console)\n\n    Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/\n\n.\n\nFrom the top navigation bar, select a Region for the security group. Security groups are specific to a Region, so you should select the same Region in which you created your instance.\n\nIn the navigation pane, choose Instances.\n\nSelect your instance and, in bottom half of the screen, choose the Security tab. Security groups lists the security groups that are associated with the instance. Inbound rules displays a list of the inbound rules that are in effect for the instance.\n\nFor the security group to which you'll add the new rule, choose the security group ID link to open the security group.\n\nOn the Inbound rules tab, choose Edit inbound rules.\n\nOn the Edit inbound rules page, do the following:\n\nChoose Add rule.\n\nFor Type, choose SSH.\n\nFor Source, choose My IP to automatically populate the field with the public IPv4 address of your local computer.\n\nAlternatively, for Source, choose Custom and enter the public IPv4 address of your computer or network in CIDR notation. For example, if your IPv4 address is 203.0.113.25, enter 203.0.113.25/32 to list this single IPv4 address in CIDR notation. If your company allocates addresses from a range, enter the entire range, such as 203.0.113.0/24.\n\nFor information about finding your IP address, see Before you start.\n\nChoose Save rules.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}