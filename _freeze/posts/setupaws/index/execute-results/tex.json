{
  "hash": "85350d296f83e2a09bd8a4cb37a08ae0",
  "result": {
    "markdown": "---\ntitle: \" Set up a virtual server on AWS (in anticipation of hosting Shiny apps) \"\ndescription: \"Detailed steps for setting up a lightweight server on AWS. \"\ncategories: [AWS]\nimage: \"img/rshiny.png\"\n#editor: \n#  markdown: \n#    wrap: 72\nformat:\n  pdf:\n    toc: true\n    date: \"2023-03-26\"\n---\n\n\n\n::: column-margin\n![under construction](img/crane.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\n# Introduction\n\nOnce we have a working shiny  app, we can move on to the task of hosting the app\non a (virtual) server to share with our collaborators. There are many ways to\naccomplish this.  In this post, we'll describe how to  'spin' up a server on\nAmazon Web Service EC2,  and in the next post show how, in just a few steps,\nthrough the application of Docker, R, Shiny, and Caddy (webserver) functionality\nwe can have a fully functional and secure web app to share with colleagues.\n\n# Hosting\n\n::: column-margin\n![*Data flow *](img/blogdockerizeflow.png)\n:::\n\nFigure 3 illustrates the tools we'll use and the flow of program and\nconfiguration files. In order to host a shiny app, say `power1_shiny`, online  we'll need to complete the\nfollowing tasks:\n1.  create a virtual server (connected via ssh) with a firewall\n2. obtain a static IP address (to identify the server online)\n3.  obtain a domain name (name for IP address)\n4.  install and configure a webserver (tool to interact with https protocol requests and\n    respond)\n5.  obtain and install an SSL certificate (to allow encrypted communication)\n6.  setup an authentication method (password protection)\n7.  configure a reverse proxy method (translate https (port 443) requests to Shiny\n    (port 3838)\n\nIn this\npost we'll address the first three of these. Tasks four through seven will be\naccomplished using docker-compose and described in the next post. \n\nAt first glance these 7 requirements can appear daunting, but on closer\ninspection all can be met with relative ease and minimal  cost ( using a\ncloud-hosting service, e.g. Amazon's EC2 or Digital Ocean, and a\n\"leased\" domain name from, e.g. GoDaddy, or Amazon's Route 53)\nor at no cost( if you have your own  server with IP address, and domain name)\n\n# Select a hosting service \n\nok! got my shiny app running. Works great! Now how do I get it up on the\nweb and shared with my client?\n\nThere are a number of cloud based server options to choose from: Microsoft Azure,\nOracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each\nhas their own approach to setting up a custom virtual server. Several\nhave free or low-cost service tiers available.\n\nAn overview of the process with EC2  follows. \n\n\n\nAWS is a reasonable choice for setting up a small custom server. \n\nTo start open the EC2 console.\n\n``` sh\n   https://aws.amazon.com/console\n```\n\nChoose regional service. For me its \"N. California\".\n\n::: column-margin\n![](img/aws_dash.png)\n:::\n\nCreate an account or sign in and navigate to the EC2 dashboard. \n\nAlong with selecting a server you'll need to set up a working environment. This\nenvironment consists of\nfour main components: \n\n1. ssh key-pair to allow you to remotely and securely login to\nthe virtual server. \n2. A firewall to restrict access to only secure\nconnections. \n3. A static IP address. This is required for maintaining the link\nbetween the domain name and the server when rebooting. (The default is for the\ninstance/server to be assigned a new IP each time its rebooted.) \n\nand \n\n4. A domain name,\nsay rgtlab.org. A domain name is not required but will\nfacilitate collaborator access by not needing to use the IP address directly.\n\n\nThe host host setup process is a simpler if you set up the working environment\nfirst. \n\n# Ssh key pair\n\nThe first time you create an AWS account you need to exchange an ssh (secure\nshell) key pair with AWS. This will allow you to login remotely to any server\nyou launch. You can generate a ssh key pair locally on you workstation and\nupload the public key to EC2. To do this create a directory to hold the keys.\ne.g. `~/.ssh`. From inside `~/.ssh` directory you can generate the keys with the\ncommand\n\n``` sh\nssh-keygen -m PEM\n```\n\nIn the dialog that ensues name the key prefix something like `power1_appssh-rsa`.\n\nBack in the browser on EC2 select `security/keys`, A dialog starts and\nasks for the location of the public key. Browse to the `~/.ssh` directory on\nyour workstation\nand import the public key `power1_appssh-rsa.pub`.\n\nAlternatively, you can select \n`Create Key Pair` in EC2. Give the pair a name, say\n`power1_appssh`, and a pair of keys will be created and the private key\n`power1_appssh.pem` will be downloaded to you local machine. In my case to\nthe default `~/Downloads` directory. Move the file to the `~/.ssh` directory. \nChange the access permissions: `sudo chmod 600 power1ssh.pem`.\n- update software on server: `sudo apt-get update`\n\n\n# firewall\n\n6.  Add security group, e.g. 'power1.firewall' allowing 22 (ssh), and\n    443 (https).\n\n- Create a firewall using `Network settings` pane\nChoose `Create security\n  group` and select `Allow SSH traffic` and `Allow HTTPS traffic`. \n\nThe default name for the firewall will be something like `launch-wizard-6`. \n\n# Set up static IP address\n\nUse \"elastic IP\" to get a static IP that can be assigned to the server.\nNavigate to Network and Security again and select Allocate Elastic IP.\nAn IP will be assigned from the EC2 pool of IPv4 IP addresses. (there is\na fee for use of the static IP).\n\n\n# Domain Name\n\nTo obtain a dedicated domain name go to godaddy.com or Amazon route 53\nto select a domain name and associate it  with your Elastic IP.\n\n\nOnce a domain name is aquired, eg rgtlab.org, you want to associate it\nwith your static IP address. To associate domain name rgtlab.org with\nelastic IP do as follows.\n\nin Route 53:\n\n-   click on 'hosted zones' in side panel\n-   click on rgtlab.org in center panel\n-   click on checkbox for rgtlab.org type=A line\n-   then click on edit record in right panel\n-   change ip address to the Elastic IP (e.g. 13.57.139.31).\n\n::: column-margin\n![](img/ec2a.png)\n:::\n\n# Select and launch instance\n\n2.  From \"Quick Start\" in the EC2 dashboard click `Ubuntu` button.\n\n-   Name the server, say power1\n\n3.  Next choose an instance **type**, e.g. \"t2-micro\". Different\n    instance types are mixtures of size, processors, memory, instance\n    storage capacity, network performance.\n\n4.  click \"Next: Configure Instance Details\"\n\n5.  choose a Key pair (use power1.rsa from your environment) .\n\n6.  Add security group, e.g. 'power1.firewall' from your environment.\n\n7.  choose 30 GB of EBS General Purpose (SSD) or Magnetic storage\n\n8.  click Launch Instance\n\n- Configure  30 GiB of gp2 (general purpose SSD) storage. Define the size and\n  type of disc storage. \n\nNow Launch the Instance.\n\nWe still need a static IP address and a domain name.\n\n- Navigate back to the EC2 page. \n- Select `Elastic IPs` from the `Network & Security` section.\n- check box for `power1`, and choose  `Associate IP address` from the `Actions`\n  drop down menu. Choose the `power1server` server from the `Instance` drop down list.\n\nSelect Domain Name\n\n\n\n# Access instance\n\n\nOn your laptop log into server with\n\n``` sh\nssh -i \"~/.ssh/power1ssh.pem\" ubuntu@power1app.org\n```\n\n\n\n\n\n\n\n\n\n\n\n\n# Appendix:  Tips and Tricks\n\n::: {.callout-tip}\n\n## Tip 1.\n\nFor convenience, construct a `config` file in `~/.ssh` as:\n\n``` sh\nHost ec2\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/Downloads/power1.rsa\n```\n\nthen you can ssh into the new server with\n\n``` sh\nsh> ssh ec2\n```\n:::\n\nOpen the Amazon EC2 console at <https://console.aws.amazon.com/ec2/>\n\nFrom the top navigation bar, select a Region to create an instance in. For me its \"N. California\".\n\n\nCreate an account or sign in and navigate to the EC2 dashboard. \n\nIn the left side panel select **Key Pairs** (under Network and Security).\n\nAt the top right select the **Create key pair** button. A **Key Pair** form will\nopen. \n\nGive the key pair a name. Something like  `power1_appssh`.  Select a key pair\ntype, suggest `RSA`. Select a **Private key file format**, suggest `.pem`\n\nBelow the form select the **Create key pair** button. \nA pair of keys will be created and the private key\n`power1_appssh.pem` will be downloaded to you local machine. In my case to\nthe default `~/Downloads` directory. \n\nMove the file to the `~/.ssh` directory: `mv ~/Downloads/power1_appssh.pem ~/.ssh `\n\nChange the access permissions: `sudo chmod 600 power1ssh.pem` to be more\nrestrictive. \n\n** REWRITE TO HERE.... 2023-03-27\n\nIn the navigation pane, choose **Instances**.\n\nSelect your instance and, in bottom half of the screen, choose the Security tab. Security groups lists the security groups that are associated with the instance. Inbound rules displays a list of the inbound rules that are in effect for the instance.\n\nFor the security group to which you'll add the new rule, choose the security group ID link to open the security group.\n\nOn the Inbound rules tab, choose Edit inbound rules.\n\nOn the Edit inbound rules page, do the following:\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}