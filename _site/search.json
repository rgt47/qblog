[
  {
    "objectID": "posts/setupquarto/index.html",
    "href": "posts/setupquarto/index.html",
    "title": "Setting up Quarto",
    "section": "",
    "text": "quarto\n\n\n\n1 Introduction\nQuarto is an extension of the Rmarkdown ecosystem. It leverages the power of knitr andpandoc. From my perspective it provides a number of useful additional tools for literate programming and blogging.\nI’m using quarto for my lab’s home page with an embedded blog. (focusonR).\nThis post will include some of the most useful and interesting quarto tools presented in the context of a Palmer Penguins data set analysis.\nTo start a blog, say qblog, begin by running quarto create-project at the ~/prj level\n❯ quarto create-project qblog --type website:blog\nThis generates a project folder ~/prj/qblog: - cd to ~/prj/qblog/posts/ -   for the first post, create a new directory, saysetupquarto-   cd to~/prj/qblog/posts/setupquarto-   edit theindex.qmdfile and add content.vim index.qmd`\nThe framework for a quarto blog can be quite minimal. For example the following set of files is sufficient to start a useful blog:\n.\n|-- _quarto.yml\n|-- index.qmd\n|-- posts\n|   `-- firstpost\n|       `-- index.qmd\nwith file contents:\n\n\n\n_quarto.yml\n\nproject:\n  type: website\n\n\n\n\n\nindex.qmd\n\n---\ntitle: \"Minimal Blog\"\nlisting:\n  contents: posts\n---\n\n\n\n\n\nposts/firstpost/index.qmd\n\n---\ntitle: \"First post on Blog\"\nauthor: \"Joe Blogger\"\ndate: last-modified\n---\n\nThis is the first post.\n\n\n\nContrast to Rob Heyneman’s template blog:\n&gt; tree -L 1 --charset unicode\n.\n|-- _quarto.yml\n|-- _site\n|-- about\n|-- blog\n|-- header.html\n|-- index.qmd\n|-- mariecurie.png\n|-- publications\n|-- quartoweb.Rproj\n|-- software\n|-- styles.css\n|-- talks\n`-- teaching\nRefererences:\nUseful archive:\nmcanouil/awesome-quarto: A curated list of Quarto talks, tools, examples & articles\nConsider some ideas from\n\nRob Hyndman - Template of quarto website\nEric Ekholm - Modifying the Default Quarto Blog Structure\nAllison Hill - We don’t talk about Quarto\nNick Tierney - Notes on Changing from Rmarkdown/Bookdown to Quarto\n\n\n\n2 After rendering the minimum blog with the default theme. We have the following tree\nTo understand better we need to delve into the _site/site_libs directory. CSS and JS\n.\n|-- _quarto.yml\n|-- _site\n|   |-- index.html\n|   |-- listings.json\n|   |-- posts\n|   |   |-- setup_R_vimtex_ultisnips\n|   |   |   |-- img\n|   |   |   |   `-- vimR.png\n|   |   |   `-- index.html\n|   |   `-- setupgit\n|   |       |-- img\n|   |       |   `-- git.png\n|   |       `-- index.html\n|   |-- search.json\n|   `-- site_libs\n|       |-- bootstrap\n|       |   |-- bootstrap-icons.css\n|       |   |-- bootstrap-icons.woff\n|       |   |-- bootstrap.min.css\n|       |   `-- bootstrap.min.js\n|       |-- clipboard\n|       |   `-- clipboard.min.js\n|       |-- quarto-html\n|       |   |-- anchor.min.js\n|       |   |-- popper.min.js\n|       |   |-- quarto-syntax-highlighting.css\n|       |   |-- quarto.js\n|       |   |-- tippy.css\n|       |   `-- tippy.umd.min.js\n|       |-- quarto-listing\n|       |   |-- list.min.js\n|       |   `-- quarto-listing.js\n|       |-- quarto-nav\n|       |   `-- quarto-nav.js\n|       `-- quarto-search\n|           |-- autocomplete.umd.js\n|           |-- fuse.min.js\n|           `-- quarto-search.js\n|-- index.qmd\n`-- posts\n    |-- setup_R_vimtex_ultisnips\n    |   |-- img\n    |   |   |-- git1.png\n    |   |   `-- vimR.png\n    |   `-- index.qmd\n    `-- setupgit\n        |-- img\n        |   `-- git.png\n        `-- index.qmd"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nSetting up git for (solo) data science workflow\n\n\n\n\n\n\n\n\n\n\n\nJan 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up Quarto\n\n\n\n\n\n\n\n\n\n\n\nJan 23, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "Thomas Lab",
    "section": "",
    "text": "twitter\n  \n  \n    \n     Github\n  \n\n      \nThe Thomas Lab in the the Herbert Wertheim School of Public Health and Human Longevity Science at UC San Diego focuses on developing data science methodology and educational materials."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Thomas lab",
    "section": "",
    "text": "Director: Professor Ronald G. Thomas School of Public Health UC, San Diego La Jolla, California\nFocused on new and interesting data science technologies."
  },
  {
    "objectID": "posts/setupgit/index.html",
    "href": "posts/setupgit/index.html",
    "title": "Setting up git for (solo) data science workflow",
    "section": "",
    "text": "1 Introduction\nVersion Control for biostatistics is the challenge.\nLets take it one step at a time.\nScenario 1: rgt47 has been working on a data analysis for some ADNI data. Its moderately complex and uses lots of packages. He’s ready to have his team join the analysis process. What are the first steps to do that? Start by adding git user rgt4748 to the team….\nReference:\nBest way to manage your dotfiles.\n\n\n2 Methods\n\n\n3 Invite a colleague to collaborate on a github repostiory\nSelect settings and then collaborators tab (in the left panel)\nSelect green “add people” button in the center of the page\nEnter the github user name (rgt4748) and select. “Add rgt4748”\nlogin as rgt4748 and accept invitation\nclick “message” icon in upper right corner.\nSelect “Invitation to join rgt47/x23 from rgt47”\nClone directory to local machine\n&gt; git clone https://github.com/rgt47/x23.git\n&gt; cd x23\n&gt; git branch myedits\n&gt; git checkout myedits\n&gt; vim x23.Rmd\nmodify\ntitle: \"R2\"\nto\ntitle: \"changed R2\"\n\n&gt; git add .\n&gt; git commit -m \"sample edit\"\n&gt; git push origin myedits\n&gt; git checkout master\n&gt; git merge myedits\n&gt; git branch -d myedits\ncreate a branch:\ncreate new branch for testing\ngit checkout -b test; git pull origin master; git push origin test; git checkout master; git pull origin test\n\n#merging branch back into master\n\ngit checkout test\ngit pull origin master\ngit checkout master\ngit merge test\ngit push origin master\n\n\n#to delete branch\ngit branch -d test\ngit push origin –delete test\n\nDraft ….\nGIT for nitwits\ngit init\ngit add fname\ngit status #see what happens on commit git commit -am “commit message”\ngit push\ngit branch work\ngit checkout work\n… make changes … git add * git commit -m “something”\ngit checkout master\ngit merge work\ngit branch -d work\ngit log #see all commits\ngit checkout HASH #Restore old branch\nConsider editing ./.git/config\nView file in master branch. git show master:a101.Rmd | mvim -\nCopy file from other branch (master) git checkout master uw.png\nTroubleshooting git pull –allow-unrelated-histories\nRule 6: Use the Imperative mood\nA valuable practice involves crafting commit messages with the underlying understanding that the commit, when implemented, will achieve a precise action. Construct your commit message in a manner that logically completes the sentence “If applied, this commit will…”. For instance, rather than,git commit -m “Fixed the bug on the layout page” . use this git commit -m “Fix the bug on the layout page” ✔\nIn other words, if this commit were to be applied, it would indeed fix the bug on the layout page.\nRule 7: Explain “What” and “Why”, but not “How”.\nLimiting commit messages to “what” and “why” creates concise yet informative explanations of each change. Developers seeking “How” the code was implemented can refer directly to the codebase. Instead, highlight what was altered and the rationale for the change, including which component or area was affected.\nCase Study: Angular’s Commit Message Practices\nAngular stands as a prominent illustration of effective commit messaging practices. The Angular team advocates for the use of specific prefixes when crafting commit messages. These prefixes include “chore: ,” “docs: ,” “style: ,” “feat: ,” “fix: ,” “refactor: ,” and “test: .” By incorporating these prefixes, the commit history becomes a valuable resource for understanding the nature of each commit. Tips\nRemember to prioritize clear and meaningful communication through your commit messages. A well-crafted commit message serves as a story that explains ‘what,’ ‘why,’ but not ‘how’ a change was made. Remember, your commit history is a collaborative resource that future you and your team will rely on. Make it a habit to create commit messages that stand as informative, concise, and consistent narratives.\nInterested in deepening your understanding of Git and evolving into a proficient “version controller”? Explore these exceptional resources:\n\nhttps://git-scm.com/doc\nhttps://git-scm.com/book/en/v2\nhttps://lab.github.com/\nhttps://www.atlassian.com/git/tutorials\nhttps://learngitbranching.js.org/\nhttps://www.gitkraken.com/git-cheat-sheet\nhttps://www.git-tower.com/learn/\n\n\n\n4 References:\nGit Basics — All You Need To Know as a New Developer. | by Gabriel Bonfim | Sep, 2023 | Medium"
  }
]