[
  {
    "objectID": "posts/setupaws/index.html",
    "href": "posts/setupaws/index.html",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash \n\nIntroduction\nOnce we have a working shiny app, we can move on to the task of hosting the app on a (virtual) server to share with our collaborators. There are many ways to accomplish this. In this post, we’ll describe how to ‘spin’ up a server on Amazon Web Service EC2, and in the next post show how, in just a few steps, through the application of Docker, R, Shiny, and Caddy (webserver) functionality we can have a fully functional and secure web app to share with colleagues.\n\n\nHosting\n\n\n\n\n\nData flow \n\n\nFigure 3 illustrates the tools we’ll use and the flow of program and configuration files. In order to host a shiny app, say power1_shiny, online we’ll need to complete the following tasks: 1. create a virtual server (connected via ssh) with a firewall 2. obtain a static IP address (to identify the server online) 3. obtain a domain name (name for IP address) 4. install and configure a webserver (tool to interact with https protocol requests and respond) 5. obtain and install an SSL certificate (to allow encrypted communication) 6. setup an authentication method (password protection) 7. configure a reverse proxy method (translate https (port 443) requests to Shiny (port 3838)\nIn this post we’ll address the first three of these. Tasks four through seven will be accomplished using docker-compose and described in the next post.\nAt first glance these 7 requirements can appear daunting, but on closer inspection all can be met with relative ease and minimal cost ( using a cloud-hosting service, e.g. Amazon’s EC2 or Digital Ocean, and a “leased” domain name from, e.g. GoDaddy, or Amazon’s Route 53) or at no cost( if you have your own server with IP address, and domain name)\n\n\nSelect a hosting service\nok! got my shiny app running. Works great! Now how do I get it up on the web and shared with my client?\nThere are a number of cloud based server options to choose from: Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nAn overview of the process with EC2 follows.\nAWS is a reasonable choice for setting up a small custom server.\nTo start open the EC2 console.\n   https://aws.amazon.com/console\nChoose regional service. For me its “N. California”.\n\n\n\nCreate an account or sign in and navigate to the EC2 dashboard.\nAlong with selecting a server you’ll need to set up a working environment. This environment consists of four main components:\n\nssh key-pair to allow you to remotely and securely login to the virtual server.\nA firewall to restrict access to only secure connections.\nA static IP address. This is required for maintaining the link between the domain name and the server when rebooting. (The default is for the instance/server to be assigned a new IP each time its rebooted.)\n\nand\n\nA domain name, say rgtlab.org. A domain name is not required but will facilitate collaborator access by not needing to use the IP address directly.\n\nThe host host setup process is a simpler if you set up the working environment first.\n\n\nSsh key pair\nThe first time you create an AWS account you need to exchange an ssh (secure shell) key pair with AWS. This will allow you to login remotely to any server you launch. You can generate a ssh key pair locally on you workstation and upload the public key to EC2. To do this create a directory to hold the keys. e.g. ~/.ssh. From inside ~/.ssh directory you can generate the keys with the command\nssh-keygen -m PEM\nIn the dialog that ensues name the key prefix something like power1_appssh-rsa.\nBack in the browser on EC2 select security/keys, A dialog starts and asks for the location of the public key. Browse to the ~/.ssh directory on your workstation and import the public key power1_appssh-rsa.pub.\nAlternatively, you can select Create Key Pair in EC2. Give the pair a name, say power1_appssh, and a pair of keys will be created and the private key power1_appssh.pem will be downloaded to you local machine. In my case to the default ~/Downloads directory. Move the file to the ~/.ssh directory. Change the access permissions: sudo chmod 600 power1ssh.pem. - update software on server: sudo apt-get update\n\n\nfirewall\n\nAdd security group, e.g. ‘power1.firewall’ allowing 22 (ssh), and 443 (https).\n\n\nCreate a firewall using Network settings pane Choose Create security   group and select Allow SSH traffic and Allow HTTPS traffic.\n\nThe default name for the firewall will be something like launch-wizard-6.\n\n\nSet up static IP address\nUse “elastic IP” to get a static IP that can be assigned to the server. Navigate to Network and Security again and select Allocate Elastic IP. An IP will be assigned from the EC2 pool of IPv4 IP addresses. (there is a fee for use of the static IP).\n\n\nDomain Name\nTo obtain a dedicated domain name go to godaddy.com or Amazon route 53 to select a domain name and associate it with your Elastic IP.\nOnce a domain name is aquired, eg rgtlab.org, you want to associate it with your static IP address. To associate domain name rgtlab.org with elastic IP do as follows.\nin Route 53:\n\nclick on ‘hosted zones’ in side panel\nclick on rgtlab.org in center panel\nclick on checkbox for rgtlab.org type=A line\nthen click on edit record in right panel\nchange ip address to the Elastic IP (e.g. 13.57.139.31).\n\n\n\n\n\n\nSelect and launch instance\n\nFrom “Quick Start” in the EC2 dashboard click Ubuntu button.\n\n\nName the server, say power1\n\n\nNext choose an instance type, e.g. “t2-micro”. Different instance types are mixtures of size, processors, memory, instance storage capacity, network performance.\nclick “Next: Configure Instance Details”\nchoose a Key pair (use power1.rsa from your environment) .\nAdd security group, e.g. ‘power1.firewall’ from your environment.\nchoose 30 GB of EBS General Purpose (SSD) or Magnetic storage\nclick Launch Instance\n\n\nConfigure 30 GiB of gp2 (general purpose SSD) storage. Define the size and type of disc storage.\n\nNow Launch the Instance.\nWe still need a static IP address and a domain name.\n\nNavigate back to the EC2 page.\nSelect Elastic IPs from the Network & Security section.\ncheck box for power1, and choose Associate IP address from the Actions drop down menu. Choose the power1server server from the Instance drop down list.\n\nSelect Domain Name\n\n\nAccess instance\nOn your laptop log into server with\nssh -i \"~/.ssh/power1ssh.pem\" ubuntu@power1app.org\n\n\nAppendix: Tips and Tricks\n\n\n\n\n\n\nTip 1.\n\n\n\nFor convenience, construct a config file in ~/.ssh as:\nHost ec2\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/Downloads/power1.rsa\nthen you can ssh into the new server with\nsh> ssh ec2\n\n\nOpen the Amazon EC2 console at https://console.aws.amazon.com/ec2/\nFrom the top navigation bar, select a Region to create an instance in. For me its “N. California”.\nCreate an account or sign in and navigate to the EC2 dashboard.\nIn the left side panel select Key Pairs (under Network and Security).\nAt the top right select the Create key pair button. A Key Pair form will open.\nGive the key pair a name. Something like power1_appssh. Select a key pair type, suggest RSA. Select a Private key file format, suggest .pem\nBelow the form select the Create key pair button. A pair of keys will be created and the private key power1_appssh.pem will be downloaded to you local machine. In my case to the default ~/Downloads directory.\nMove the file to the ~/.ssh directory: mv ~/Downloads/power1_appssh.pem ~/.ssh\nChange the access permissions: sudo chmod 600 power1ssh.pem to be more restrictive.\n** REWRITE TO HERE…. 2023-03-27\nIn the navigation pane, choose Instances.\nSelect your instance and, in bottom half of the screen, choose the Security tab. Security groups lists the security groups that are associated with the instance. Inbound rules displays a list of the inbound rules that are in effect for the instance.\nFor the security group to which you’ll add the new rule, choose the security group ID link to open the security group.\nOn the Inbound rules tab, choose Edit inbound rules.\nOn the Edit inbound rules page, do the following:\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {{Set} up a Virtual Server on {AWS} (in Anticipation of\n    Hosting {Shiny} Apps)},\n  url = {https://focusonr.org/posts/setupaws},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d.“Set up a Virtual Server on AWS (in\nAnticipation of Hosting Shiny Apps) .” https://focusonr.org/posts/setupaws."
  },
  {
    "objectID": "posts/setupquarto/setupquarto.html",
    "href": "posts/setupquarto/setupquarto.html",
    "title": "Setting up Quarto",
    "section": "",
    "text": "This is inline code plus a small code chunk.\n\nlibrary(tidyverse)\n\nggplot(mpg) +\n  geom_jitter(aes(cty, hwy), size = 4, alpha = 0.5) \n\n\n\n\n\n\n\n\n\n\nTransforming OLS estimatesMaximizing likelihood\n\n\n\n\nCode\npreds_lm %>% \n  ggplot(aes(body_mass_g, bill_length_mm, col = correct)) +\n  geom_jitter(size = 4, alpha = 0.6) +\n  facet_wrap(vars(species)) +\n  scale_color_manual(values = c('grey60', thematic::okabe_ito(3)[3])) +\n  scale_x_continuous(breaks = seq(3000, 6000, 1000)) +\n  theme_minimal(base_size = 12) +\n  theme(\n    legend.position = 'top', \n    panel.background = element_rect(color = 'black'),\n    panel.grid.minor = element_blank()\n  ) +\n  labs(\n    x = 'Body mass (in g)',\n    y = 'Bill length (in mm)'\n  )\n\n\n\n\n\n\n\n\n\nCode\nglm.mod <- glm(sex ~ body_mass_g + bill_length_mm + species, family = binomial, data = dat)\n\npreds <- dat %>% \n  mutate(\n    prob.fit = glm.mod$fitted.values,\n    prediction = if_else(prob.fit > 0.5, 'male', 'female'),\n    correct = if_else(sex == prediction, 'correct', 'incorrect')\n  )\n\n\npreds %>% \n  ggplot(aes(body_mass_g, bill_length_mm, col = correct)) +\n  geom_jitter(size = 4, alpha = 0.6) +\n  facet_wrap(vars(species)) +\n  scale_x_continuous(breaks = seq(3000, 6000, 1000)) +\n  scale_color_manual(values = c('grey60', thematic::okabe_ito(3)[3])) +\n  theme_minimal(base_size = 10) +\n  theme(\n    legend.position = 'top', \n    panel.background = element_rect(color = 'black'),\n    panel.grid.minor = element_blank()\n  ) +\n  labs(\n    x = 'Body mass (in g)',\n    y = 'Bill length (in mm)'\n  )\n\n\n\n\n\n\n\n\n\n\n\\[\n\\int_0^1 f(x) \\ dx\n\\]\n\n\n\n\n\n\n\ngeom_density(\n  mapping = NULL,\n  data = NULL,\n  stat = \"density\",\n  position = \"identity\",\n  ...,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE,\n  outline.type = \"upper\"\n)\n\n\nstat_density(\n  mapping = NULL,\n  data = NULL,\n  geom = \"area\",\n  position = \"stack\",\n  ...,\n  bw = \"nrd0\",\n  adjust = 1,\n  kernel = \"gaussian\",\n  n = 512,\n  trim = FALSE,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE\n)\n\n\n\n\n\n\n\nggplot(data = gapminder::gapminder, mapping = aes(x = lifeExp, fill = continent)) +\n  stat_density(position = \"identity\", alpha = 0.5)\n\n\n\n\nBla bla bla. This is a caption in the margin. Super cool isn’t it?\n\n\n\n\nStart with running quarto create-project at ~/prj level\n~/Dropbox/prj via 📐 v4.2.1\n❯ quarto create-project qblog --type website:blog\nCreating project at /Users/zenn/Dropbox/prj/qblog:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created posts/welcome/index.qmd\n  - Created posts/post-with-code/index.qmd\n  - Created about.qmd\n  - Created styles.css\n  - Created posts/_metadata.yml\n\ncd to ~/qblog/posts/\ncreate a new directory, say setupquarto\ncd to ~/qblog/posts/setupquarto\ntouch setupquarto.qmd\nv setupquarto.qmd"
  },
  {
    "objectID": "posts/setupneovim/TODO.html",
    "href": "posts/setupneovim/TODO.html",
    "title": "Focus on R: a new qblog",
    "section": "",
    "text": "Reusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  url = {https://focusonr.org/TODO.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. https://focusonr.org/TODO.html."
  },
  {
    "objectID": "posts/setupneovim/index.html",
    "href": "posts/setupneovim/index.html",
    "title": "Setting up a minimal neovim environment for data science code development",
    "section": "",
    "text": "under construction\n\n\n\n Photo by Nathan Waters on Unsplash \n\nIntroduction\nNeovim (a fork of Vim) is a text editor that has several advantages for data science code development. One of the main attractions is that it is open source and has a number of useful plugins to facilitate working on R, python, and julia code. Also, its modal, keyboard-centric system allows text and code manipulation at potentially far greater speed than conventional, mouse-centric, systems.\nIn this post we describe both a minimal, yet functional setup, as well as a more extensive setup utilizing several of the newest neovim-only plugins, for neovim to allow IDE style code editing and REML interaction for the three primary data science coding tools: R, Python, and Julia.\nOur presentation here is for a macos environment. Appendix one contains required adjustments for a ubuntu linux environment.\n\n\nStep one: Install the latest stable version of neovim.\nWith minimal effort we can install both the terminal and GUI versions of neovim. The simplist approach is to use homebrew:\n> brew install neovim neovim-qt\nSet up convenience aliases in zsh.\n> alias ng = neovim-qt\n> alias nt = neovim\n(mnemonic: the t in nt is for terminal, the g in ng is for GUI)\n\n\nStep 2: Configure neovim\nThe standard location for neovim configuration files on “unix-like” systems is ~/.config/nvim. The main config file is either init.vim (VimL) or init.lua (Lua). In this post we’ll focus on lua based configuration.\nSpecifically, the following code block creates an nvim subdirectory under ~/.config and initialize a configuration file init.lua.\nHere is the file hierarchy we’ll construct. In fact all the code could be bundled into the init.lua file, but this approach is clearer and cleaner.\ntree --charset=ascii\n.\n|-- init.lua\n|-- leap-config.lua\n|-- lua\n|   |-- basics.lua\n|   |-- nvim-R-config.lua\n|   |-- nvim-cmp-config.lua\n|   |-- nvim-telescope-config.lua\n|   |-- nvim-tree-config.lua\n|-- my_snippets\n|   |-- giles.tex.snipppets\n|   |-- mail.snippets\n|   |-- rmd.snippets\n|   |-- snippets.snippets\n|   |-- tex.snippets\n|   |-- text.snippets\n|   `-- txt.snippets\n|-- spell\n|   |-- en.utf-8.add\n|   `-- en.utf-8.add.spl\n> cd .config\n> mkdir nvim\n> cd nvim\n> touch init.lua\n\ninstall the paq plugin manager\n\ngit clone --depth=1 https://github.com/savq/paq-nvim.git \\\n    ~/.local/share/nvim/site/pack/paqs/start/paq-nvim\n:PaqInstall\nAdd the following code to init.lua list the plugins needed to be installed from github and “feed” them to paq for installation.\nNvim-R, Leap, UltiSnips, and vimtex need additional configuration. The required code is contained in bespoke files under the lua directory.\nto use paq-nvim to manage plugins (maximally minimal)\nrequire \"paq\" {\n\"savq/paq-nvim\";                  \n\"junegunn/fzf\";\n'voldikss/vim-floaterm';\n'preservim/nerdcommenter';\n\"NLKNguyen/papercolor-theme\";\n\"SirVer/ultisnips\"; \n\"honza/vim-snippets\";\n\"ggandor/leap.nvim\";\n\"jalvesaq/Nvim-R\";\n'davidhalter/jedi-vim';\n\"lervag/vimtex\";\n\"owickstrom/vim-colors-paramount\"\n}\nrequire('basics')\nrequire('nvim-R-config')\nrequire('leap').add_default_mappings()\nvim.keymap.del({'x', 'o'}, 'x')\nvim.keymap.del({'x', 'o'}, 'X')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplugin discussions\n\n\nkeymaps\n\n\nvim.cmd([[\nset number relativenumber\nset textwidth=80\nset cursorline\nset iskeyword-=_ \nset hlsearch   \nset splitright\nset hidden   \nset incsearch    \nset noswapfile\nset showmatch\nset ignorecase\nset smartcase\nset gdefault\nfiletype plugin on\n\n\"completion \n\"        for text: S-Tab launches pop-up words\n\"   for R and Rmd completion is automatic\n\"ultisnips, \n\"   launch with C-j, move forward with C-j, move backward with C-k\n\"   open ultisnips file with <leader>u\n\nset dictionary+=/usr/share/dict/words\nlet g:UltiSnipsSnippetDirectories=[\"UltiSnips\", \"my_snippets\"]\n\nlet g:UltiSnipsExpandTrigger=\"<c-j>\"\nlet g:UltiSnipsJumpForwardTrigger=\"<c-j>\"\nlet g:UltiSnipsJumpBackwardTrigger=\"<c-k>\"\n\nlet g:UltiSnipsEditSplit=\"vertical\"\nlet g:UltiSnipsUsePythonVersion = 3\n\"nnoremap <leader>u :UltiSnipsEdit<cr>\nset completeopt=longest,menuone\n\ninoremap <expr> <TAB> pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\ninoremap <expr> <S-TAB> pumvisible() ? \"\\<C-p>\" : \"\\<TAB>\"\ninoremap <expr> <CR> pumvisible() ? \"\\<C-y>\" : \"\\<C-g>u\\<CR>\"\nlet R_set_omnifunc = [\"r\",  \"rmd\", \"quarto\",  \"rhelp\"]\nlet R_auto_omni = [\"r\", \"rmd\", \"rhelp\"]\n]])\nvim.g.mapleader = \",\"\nvim.g.maplocalleader = \" \"\nlocal map = vim.keymap.set\nlocal opts = {noremap = true}\nmap('n', ':', ';', opts)\nmap('n', ';', ':', opts)\nmap('n', '<Space><leader>','<C-u>', opts)\nmap('n', '<leader>u',':UltiSnipsEdit<cr>', opts)\nmap('n', '<Space><Space>','<C-d>', opts)\nmap('n', '-','$', opts)\nmap('n', '<leader>f','vipgq', opts)\nmap('n', '<leader>v','edit ~/.config/nvim/init.lua<cr>', opts)\nmap('n', '<leader>a','ggVG', opts)\nmap('n', '<leader>t',':tab split<cr>', opts)\nmap('n', '<leader>y',':vert sb2<cr>', opts)\nmap('n', '<leader>0',':ls!<CR>:b<Space>', opts)\nmap('n', '<leader><leader>','<C-w>w', opts)\nmap('n', '<leader>1','<C-w>:b1<cr>', opts)\nmap('n', '<leader>2','<C-w>:b2<cr>', opts)\nmap('n', '<leader>3','<C-w>:b3<cr>', opts)\nmap('t',  'ZZ', \"q('no')<CR>\", opts)\nmap('t',  'ZQ', \"q('no')<CR>\", opts)\nmap('v',  '-', '$', opts)\nmap('t',  '<leader>0','<C-\\\\><C-n><C-w>:ls!<cr>:b<Space>', opts)\nmap('t',  '<Escape>','<C-\\\\><C-n>', opts)\nmap('t',  '<leader><leader>','<C-\\\\><C-n><C-w>w', opts)\nmap('i',  '<Esc>', '<Esc>`^', opts)\nmap('i',  '<S-Tab>', '<C-x><C-k>', opts)\n\nvim.cmd([[\n\"    copy clipboard to register x for safe keeping\nnnoremap <leader>x :let @x=@*\n\"    paste registers into terminal\ntnoremap <expr> <C-R> '<C-\\><C-N>\"'.nr2char(getchar()).'pi'\nset background=light\ncolorscheme paramount\n]])\n\n\n\n\n\n\n\n\n\n\n\nSet up R\n\n\nvim.cmd([[\nlet $FZF_DEFAULT_COMMAND = 'rg --files --hidden'\nlet R_auto_start = 2\nlet R_hl_term = 0\nlet R_clear_line = 1\nlet R_pdfviewer = \"zathura\" \nlet R_assign = 2\nlet R_latexcmd = ['xelatex']\naugroup rmarkdown\nautocmd!\nautocmd FileType rmd,r nnoremap <buffer> <CR>  :call SendLineToR(\"down\")<CR>\nautocmd FileType rmd,r nnoremap <buffer> <space>l :call SendChunkToR(\"silent\",\"down\")<cr>\nautocmd FileType rmd,r nnoremap <buffer> <space>' :call RMakeRmd(\"default\")<cr>\nautocmd FileType rmd,r noremap <space>s :call RAction(\"str\")<cr>\nautocmd FileType rmd,r noremap <space>i :call RAction(\"dim\")<cr>\nautocmd FileType rmd,r noremap <space>h :call RAction(\"head\")<cr>\nautocmd FileType rmd,r noremap <space>p :call RAction(\"print\")<cr>\nautocmd FileType rmd,r noremap <space>q :call RAction(\"length\")<cr>\nautocmd FileType rmd,r noremap <space>n :call RAction(\"nvim.names\")<cr>\nautocmd FileType rmd,r noremap <space>c :call RAction(\"cnt\")<cr>\nautocmd FileType rmd,r noremap <space>k :call PreviousRChunk()<cr>\nautocmd FileType rmd,r noremap <space>j :call NextRChunk()<cr>\naugroup END\n]])\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Setting up a Minimal Neovim Environment for Data Science Code\n    Development},\n  date = {},\n  url = {https://focusonr.org/posts/setupneovim},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. “Setting up a Minimal Neovim\nEnvironment for Data Science Code Development.” https://focusonr.org/posts/setupneovim."
  },
  {
    "objectID": "posts/setupubuntu/index.html",
    "href": "posts/setupubuntu/index.html",
    "title": "Setup Ubuntu on parallels",
    "section": "",
    "text": "Introduction\nCould I use Docker?\nThis seems like genius:\n alias nvim=\"docker run -it -v `pwd`:/mnt/volume --workdir=/mnt/volume anatolelucet/neovim:stable\"\nalias nvim=\"docker run -it -v `pwd`:/mnt/volume --workdir=/mnt/volume anatolelucet/neovim:nightly\"\n\nstep one set up parallels tools. Use “Actions” menu to select “install parallels tools. This will point CD/DVD device at the iso image. Open the DVD in”Files”. Open install parallel tool-gui.\nmacbook harddrive will be available under share\nFirefox is installed. Add vinium-ff extension.\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2022,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Setup {Ubuntu} on Parallels},\n  date = {2022-09-10},\n  url = {https://focusonr.org/posts/setupubuntu},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2022. “Setup Ubuntu on\nParallels.” September 10, 2022. https://focusonr.org/posts/setupubuntu."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Focus on R blog",
    "section": "",
    "text": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)\n\n\n\n\n\n\n\nAWS\n\n\n\n\nDetailed steps for setting up a lightweight server on AWS.\n\n\n\n\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nA simple process to get your Shiny app online (securely).\n\n\n\n\n\n\n\nDocker\n\n\nShiny\n\n\n\n\nThis is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\n\n\n\n\n\n\nMar 26, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nA simple five-ish step process to get your Shiny app online (securely).\n\n\nGithub, Docker-compose, EC2 version\n\n\n\n\nDocker\n\n\nShiny\n\n\ndocker-compose\n\n\n\n\nThis is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\n\n\n\n\n\n\nMar 26, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up Quarto\n\n\n\n\n\n\n\n123\n\n\nSecond Tag\n\n\n\n\nThis is a second post.\n\n\n\n\n\n\nAug 31, 2022\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up a minimal neovim environment for data science code development\n\n\nA neovim IDE for R, Python, and Julia\n\n\n\n\nNeovim\n\n\n\n\nThis is the first in a series of posts offering suggested strategies for setting up key tools for data science code development\n\n\n\n\n\n\nInvalid Date\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetup Ubuntu on parallels\n\n\n\n\n\n\n\nDocker\n\n\nShiny\n\n\n\n\nstep by step description to create vitual server and setting up optimal neovim config.\n\n\n\n\n\n\nSep 10, 2022\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Focused on new and interesting data science technologies."
  }
]