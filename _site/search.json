[
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html",
    "href": "posts/multilanguage_quarto_demo/index.html",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "",
    "text": "Creating multi-language documents in Quarto can be powerful but requires careful setup. This guide walks through setting up a macOS environment to run Quarto documents that combine R, Python, Julia, and Observable JS. We’ll use the Palmer Penguins dataset as an example, creating visualizations in each language."
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#introduction",
    "href": "posts/multilanguage_quarto_demo/index.html#introduction",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "",
    "text": "Creating multi-language documents in Quarto can be powerful but requires careful setup. This guide walks through setting up a macOS environment to run Quarto documents that combine R, Python, Julia, and Observable JS. We’ll use the Palmer Penguins dataset as an example, creating visualizations in each language."
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#system-requirements",
    "href": "posts/multilanguage_quarto_demo/index.html#system-requirements",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.2 System Requirements",
    "text": "0.2 System Requirements\n\nmacOS (tested on Monterey and later)\nAt least 8GB RAM\n~5GB free disk space for all installations\nAdmin privileges for installations\nInternet connection for package downloads"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#basic-setup",
    "href": "posts/multilanguage_quarto_demo/index.html#basic-setup",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.3 Basic Setup",
    "text": "0.3 Basic Setup\n\n0.3.1 1. R and RStudio\n\nInstall R from CRAN\nInstall RStudio\nInstall Quarto\n\nInstall required R packages:\ninstall.packages(c(\n  \"palmerpenguins\",  # for example data\n  \"dplyr\",           # for data manipulation\n  \"ggplot2\",         # for R plotting\n  \"scales\",          # for plot formatting\n  \"reticulate\",      # for Python integration\n  \"JuliaCall\"        # for Julia integration\n))\n\n\n0.3.2 2. Python Setup\n\nInstall Anaconda (recommended) or Miniconda\nInstall required Python packages:\n\nconda install pandas seaborn matplotlib\n\nVerify Python configuration in R:\n\nlibrary(reticulate)\npy_config()  # Should show your Anaconda Python path\n\n\n\n\n\n\nCommon Python Issues\n\n\n\n\nIf py_config() doesn’t show your Anaconda installation, you may need to specify it:\nuse_python(\"/path/to/anaconda/bin/python\")\nSeaborn styling requires specific syntax:\nsns.set_theme(style=\"whitegrid\")  # Don't use plt.style.use()\n\n\n\n\n\n0.3.3 3. Julia Setup\n\nInstall Julia from julialang.org\nAdd Julia to PATH (usually automatic with installer)\nInstall required Julia packages:\n\nusing Pkg\nPkg.add([\n  \"UnicodePlots\",\n  \"DataFrames\",\n  \"CSV\",\n  \"Statistics\"\n])\n\nSetup Julia-R connection:\n\nlibrary(JuliaCall)\njulia_setup()\n\n\n\n\n\n\nJulia Gotchas\n\n\n\n\nSome Julia plotting backends have system dependencies\nUse UnicodePlots for most reliable results\nEnsure Julia working directory has write permissions\n\n\n\n\n\n0.3.4 4. Observable JS Setup\nNo separate installation needed, but your Quarto document must include:\ndependencies:\n  - name: \"@observablehq/plot\"\n    version: latest"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#verifying-your-setup",
    "href": "posts/multilanguage_quarto_demo/index.html#verifying-your-setup",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.4 Verifying Your Setup",
    "text": "0.4 Verifying Your Setup\nRun these commands to verify each language integration:\n\n0.4.1 R Environment\nsessionInfo()\n\n\n0.4.2 Python Environment\nlibrary(reticulate)\npy_config()\n\n\n0.4.3 Julia Environment\nlibrary(JuliaCall)\njulia_eval(\"versioninfo()\")"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#testing-a-minimal-example",
    "href": "posts/multilanguage_quarto_demo/index.html#testing-a-minimal-example",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.5 Testing a Minimal Example",
    "text": "0.5 Testing a Minimal Example\nHere’s a minimal example combining all languages:\n\n\nCode\n# R code\nprint(\"Hello from R!\")\n\n\n[1] \"Hello from R!\"\n\n\n\n\nCode\n# Python code\nprint(\"Hello from Python!\")\n\n\nHello from Python!\n\n\n# Julia code\nprintln(\"Hello from Julia!\")\n\n\nCode\n// Observable JS code\nmd`Hello from Observable JS!`"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#common-issues-and-solutions",
    "href": "posts/multilanguage_quarto_demo/index.html#common-issues-and-solutions",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.6 Common Issues and Solutions",
    "text": "0.6 Common Issues and Solutions\n\n0.6.1 Working Directory Problems\nAll languages need to access the same files. Check working directories:\n# R\ngetwd()\n\n# Python\nimport os\nos.getcwd()\n\n# Julia\npwd()\n\n\n0.6.2 File Permissions\nEnsure your working directory has write permissions:\nchmod 755 /path/to/working/directory\n\n\n0.6.3 Memory Issues\nMonitor memory usage:\n# R memory usage\ngc()\n\n# Python memory usage\nimport psutil\npsutil.Process().memory_info().rss / 1024 / 1024  # MB"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#full-example-palmer-penguins-visualization",
    "href": "posts/multilanguage_quarto_demo/index.html#full-example-palmer-penguins-visualization",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.7 Full Example: Palmer Penguins Visualization",
    "text": "0.7 Full Example: Palmer Penguins Visualization\nHere’s a complete example creating the same visualization in all four languages. See the companion repository at [GitHub Link] for the full code."
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#best-practices",
    "href": "posts/multilanguage_quarto_demo/index.html#best-practices",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.8 Best Practices",
    "text": "0.8 Best Practices\n\nTest Incrementally\n\nStart with R chunks\nAdd Python integration\nAdd Julia integration\nFinally, add Observable JS\n\nUse Version Control\n\nTrack your environment specifications\nDocument package versions\nShare reproducible setups\n\nDocument Dependencies\n\nCreate a requirements.txt for Python\nUse renv for R\nDocument Julia package versions"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#resources",
    "href": "posts/multilanguage_quarto_demo/index.html#resources",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.9 Resources",
    "text": "0.9 Resources\n\nQuarto Documentation\nR Markdown Cookbook\nReticulate Documentation\nJuliaCall Documentation\nObservable Documentation"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#conclusion",
    "href": "posts/multilanguage_quarto_demo/index.html#conclusion",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.10 Conclusion",
    "text": "0.10 Conclusion\nSetting up a multi-language Quarto environment requires attention to detail but offers powerful capabilities for data analysis and visualization. Keep your system updated, use version control, and document your setup for reproducibility."
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#session-info",
    "href": "posts/multilanguage_quarto_demo/index.html#session-info",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.11 Session Info",
    "text": "0.11 Session Info\n\n\nCode\nsessionInfo()\n\n\nR version 4.5.0 (2025-04-11)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.4.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Los_Angeles\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] shiny_1.10.0       styler_1.10.3      quarto_1.4.4       pacman_0.5.1       readxl_1.4.5       knitr_1.50         lubridate_1.9.4    forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4       \n[11] purrr_1.0.4        readr_2.1.5        tidyr_1.3.1        tibble_3.2.1       ggplot2_3.5.2      tidyverse_2.0.0    tidytuesdayR_1.1.2 rmarkdown_2.29     kableExtra_1.4.0   janitor_2.2.1     \n[21] datapasta_3.1.0    ggthemes_5.1.0     conflicted_1.2.0   DT_0.33            naniar_1.1.0       devtools_2.4.5     usethis_3.1.0     \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1  viridisLite_0.4.2 R.utils_2.13.0    fastmap_1.2.0     promises_1.3.2    digest_0.6.37     timechange_0.3.0  mime_0.13         lifecycle_1.0.4   ellipsis_0.3.2   \n[11] processx_3.8.6    magrittr_2.0.3    compiler_4.5.0    rlang_1.1.6       tools_4.5.0       yaml_2.3.10       htmlwidgets_1.6.4 pkgbuild_1.4.7    here_1.0.1        reticulate_1.42.0\n[21] xml2_1.3.8        pkgload_1.4.0     miniUI_0.1.1.1    R.cache_0.16.0    withr_3.0.2       R.oo_1.27.0       grid_4.5.0        urlchecker_1.0.1  profvis_0.4.0     xtable_1.8-4     \n[31] colorspace_2.1-1  scales_1.3.0      cli_3.6.4         generics_0.1.3    remotes_2.5.0     rstudioapi_0.17.1 tzdb_0.5.0        sessioninfo_1.2.3 cachem_1.1.0      cellranger_1.1.0 \n[41] vctrs_0.6.5       Matrix_1.7-3      jsonlite_2.0.0    hms_1.1.3         visdat_0.6.0      systemfonts_1.2.2 glue_1.8.0        ps_1.9.0          stringi_1.8.7     gtable_0.3.6     \n[51] later_1.4.2       munsell_0.5.1     pillar_1.10.2     htmltools_0.5.8.1 R6_2.6.1          rprojroot_2.0.4   lattice_0.22-6    evaluate_1.0.3    png_0.1-8         R.methodsS3_1.8.2\n[61] memoise_2.0.1     snakecase_0.11.1  httpuv_1.6.15     Rcpp_1.0.14       svglite_2.1.3     xfun_0.52         fs_1.6.6          pkgconfig_2.0.3"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#appendix-fully-documented-multi3.qmd",
    "href": "posts/multilanguage_quarto_demo/index.html#appendix-fully-documented-multi3.qmd",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.12 Appendix: Fully Documented multi3.qmd",
    "text": "0.12 Appendix: Fully Documented multi3.qmd\nHere’s a complete, documented version of the multi-language visualization example. Each section includes detailed explanations of the code and important considerations.\n---\ntitle: \"Palmer Penguins: Multi-Language Visualization Comparison\"\nauthor: \"[Your Name]\"\ndate: \"`r Sys.Date()`\"\nformat:\n  html:\n    # Enable code folding for cleaner output\n    code-fold: true\n    # Bundle all resources into single HTML\n    embed-resources: true\n    theme: default\n    execute:\n      echo: true\n# Required for Observable Plot\ndependencies:\n  - name: \"@observablehq/plot\"\n    version: latest\n---\n\n## Introduction\nThis document demonstrates how to create the same visualization - a scatterplot of \nbill depth versus bill length by species - using four different programming \nlanguages: R, Python, Julia, and Observable JS. Each implementation showcases \nthe unique strengths of its ecosystem.\n\n## Data Preparation in R\n# First, we load required libraries and prepare our data\n\n\nCode\n# Load required libraries\nlibrary(palmerpenguins)  # Contains our dataset\nlibrary(dplyr)           # For data manipulation\nlibrary(ggplot2)         # For visualization\nlibrary(scales)          # For plot scaling\nconflicts_prefer(palmerpenguins::penguins)\n\n\n[conflicted] Will prefer palmerpenguins::penguins over any other package.\n\n\nCode\n# Prepare and save data for other languages\n# We remove NA values to ensure consistency across languages\ndata &lt;- penguins %&gt;% na.omit()\n\n# Save to CSV for other languages to read\n# Note: row.names=FALSE prevents adding an index column\nwrite.csv(data, \"penguins.csv\", row.names = FALSE)\n\n# Display data structure for verification\nglimpse(data)\n\n\nRows: 333\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Ad…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen…\n$ bill_length_mm    &lt;dbl&gt; 39, 40, 40, 37, 39, 39, 39, 41, 39, 35, 37…\n$ bill_depth_mm     &lt;dbl&gt; 19, 17, 18, 19, 21, 18, 20, 18, 21, 21, 18…\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, 193, 190, 181, 195, 182, 19…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, 3450, 3650, 3625, 4675, …\n$ sex               &lt;fct&gt; male, female, female, female, male, female…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, …"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#visualization-in-r-ggplot2",
    "href": "posts/multilanguage_quarto_demo/index.html#visualization-in-r-ggplot2",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "0.13 Visualization in R (ggplot2)",
    "text": "0.13 Visualization in R (ggplot2)"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#visualization-in-python-seaborn",
    "href": "posts/multilanguage_quarto_demo/index.html#visualization-in-python-seaborn",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "1.1 Visualization in Python (Seaborn)",
    "text": "1.1 Visualization in Python (Seaborn)"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#visualization-in-julia",
    "href": "posts/multilanguage_quarto_demo/index.html#visualization-in-julia",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "2.1 Visualization in Julia",
    "text": "2.1 Visualization in Julia"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#visualization-in-observable-js",
    "href": "posts/multilanguage_quarto_demo/index.html#visualization-in-observable-js",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "3.1 Visualization in Observable JS",
    "text": "3.1 Visualization in Observable JS"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#conclusion-1",
    "href": "posts/multilanguage_quarto_demo/index.html#conclusion-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.1 Conclusion",
    "text": "4.1 Conclusion\nEach language offers unique advantages for visualization:\n\nR (ggplot2): Excellent defaults and highly customizable aesthetic options\nPython (Seaborn): Clean integration with statistical functions and good handling of categorical variables\nJulia (UnicodePlots): Fast performance and text-based visualization capabilities\nObservable JS: Interactive capabilities and web-native visualization\n\nThe core visualization remains consistent across all implementations, showing the relationship between bill depth and length across different penguin species, while each implementation showcases the strengths of its respective ecosystem.\n\n### Key Implementation Notes\n\n1. **YAML Header**\n   - Includes necessary dependencies for Observable Plot\n   - Sets up HTML output with code folding\n   - Ensures resources are embedded for portability\n\n2. **Data Preparation**\n   - Uses R for initial data loading and cleaning\n   - Exports clean CSV for other languages\n   - Maintains consistent data across all visualizations\n\n3. **Language-Specific Considerations**\n   - R: Uses ggplot2 for publication-quality static plots\n   - Python: Matches R's aesthetic choices for consistency\n   - Julia: Uses UnicodePlots for reliability\n   - Observable JS: Provides interactive web-native visualization\n\n4. **Common Patterns**\n   - Consistent color schemes\n   - Similar axis labels and titles\n   - Comparable point sizes and transparencies\n   - Aligned legend positions where possible\n\n5. **Error Prevention**\n   - Explicit NA handling\n   - Consistent working directory usage\n   - Clear data export/import chain\n   - Reliable plotting backends\n\nThis implementation provides a robust template for multi-language visualization\nthat can be adapted for other datasets and analysis needs.\n\n## Prerequisites\n\nIn development\n\n## Step-by-Step Implementation\n\nIn development\n\n## Key Takeaways\n\nIn development\n\n## Further Reading\n\nIn development\n\n\n\n\n:::{#quarto-navigation-envelope .hidden}\n[Thomas Lab]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyLXRpdGxl\"}\n[Thomas Lab]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXItdGl0bGU=\"}\n[Categories]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOnF1YXJ0by1zaWRlYmFyLXNlY3Rpb24tMQ==\"}\n[Programming & Development]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOnF1YXJ0by1zaWRlYmFyLXNlY3Rpb24tMg==\"}\n[Data Analysis & Visualization]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOnF1YXJ0by1zaWRlYmFyLXNlY3Rpb24tMw==\"}\n[Deployment & Operations]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOnF1YXJ0by1zaWRlYmFyLXNlY3Rpb24tNA==\"}\n[Development Environment]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOnF1YXJ0by1zaWRlYmFyLXNlY3Rpb24tNQ==\"}\n[Shiny Applications]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOnF1YXJ0by1zaWRlYmFyLXNlY3Rpb24tNg==\"}\n[AI & Automation]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOnF1YXJ0by1zaWRlYmFyLXNlY3Rpb24tNw==\"}\n[System Administration]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOnF1YXJ0by1zaWRlYmFyLXNlY3Rpb24tOA==\"}\n[Home]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SG9tZQ==\"}\n[/index.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L2luZGV4Lmh0bWw=\"}\n[Blog]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6QmxvZw==\"}\n[/posts/index.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L3Bvc3RzL2luZGV4Lmh0bWw=\"}\n[About]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6QWJvdXQ=\"}\n[/about/index.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L2Fib3V0L2luZGV4Lmh0bWw=\"}\n[https://twitter.com/rgt47]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6aHR0cHM6Ly90d2l0dGVyLmNvbS9yZ3Q0Nw==\"}\n[https://github.com/rgt47]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6aHR0cHM6Ly9naXRodWIuY29tL3JndDQ3\"}\n\n:::{.hidden .quarto-markdown-envelope-contents render-id=\"Zm9vdGVyLWxlZnQ=\"}\nCopyright 2023-2025, Ronald G. Thomas\n:::\n\n:::\n\n\n\n:::{#quarto-meta-markdown .hidden}\n[Setting Up Multi-Language Quarto Documents on macOS – Thomas Lab]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW1ldGF0aXRsZQ==\"}\n[Setting Up Multi-Language Quarto Documents on macOS – Thomas Lab]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLXR3aXR0ZXJjYXJkdGl0bGU=\"}\n[Setting Up Multi-Language Quarto Documents on macOS – Thomas Lab]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW9nY2FyZHRpdGxl\"}\n[Thomas Lab]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW1ldGFzaXRlbmFtZQ==\"}\n[A Complete Guide to R, Python, Julia, and Observable JS Integration]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLXR3aXR0ZXJjYXJkZGVzYw==\"}\n[A Complete Guide to R, Python, Julia, and Observable JS Integration]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW9nY2FyZGRkZXNj\"}\n:::\n\n\n\n\n&lt;!-- --&gt;\n\n::: {.quarto-embedded-source-code}\n```````````````````{.markdown shortcodes=\"false\"}\n---\ntitle: \"Setting Up Multi-Language Quarto Documents on macOS\"\nsubtitle: \"A Complete Guide to R, Python, Julia, and Observable JS Integration\"\nauthor: \"[Your Name]\"\ndate: \"`r Sys.Date()`\"\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    code-fold: true\nexecute:\n  echo: true\n---\n\n## Introduction\n\nCreating multi-language documents in Quarto can be powerful but requires careful setup. This guide walks through setting up a macOS environment to run Quarto documents that combine R, Python, Julia, and Observable JS. We'll use the Palmer Penguins dataset as an example, creating visualizations in each language.\n\n## System Requirements\n\n- macOS (tested on Monterey and later)\n- At least 8GB RAM\n- ~5GB free disk space for all installations\n- Admin privileges for installations\n- Internet connection for package downloads\n\n## Basic Setup\n\n### 1. R and RStudio\n\n1. Install R from [CRAN](https://cran.r-project.org/)\n2. Install [RStudio](https://posit.co/download/rstudio-desktop/)\n3. Install [Quarto](https://quarto.org/docs/get-started/)\n\nInstall required R packages:\n\n```r\ninstall.packages(c(\n  \"palmerpenguins\",  # for example data\n  \"dplyr\",           # for data manipulation\n  \"ggplot2\",         # for R plotting\n  \"scales\",          # for plot formatting\n  \"reticulate\",      # for Python integration\n  \"JuliaCall\"        # for Julia integration\n))\n\n4.1.1 2. Python Setup\n\nInstall Anaconda (recommended) or Miniconda\nInstall required Python packages:\n\nconda install pandas seaborn matplotlib\n\nVerify Python configuration in R:\n\nlibrary(reticulate)\npy_config()  # Should show your Anaconda Python path\n\n\n\n\n\n\nCommon Python Issues\n\n\n\n\nIf py_config() doesn’t show your Anaconda installation, you may need to specify it:\nuse_python(\"/path/to/anaconda/bin/python\")\nSeaborn styling requires specific syntax:\nsns.set_theme(style=\"whitegrid\")  # Don't use plt.style.use()\n\n\n\n\n\n4.1.2 3. Julia Setup\n\nInstall Julia from julialang.org\nAdd Julia to PATH (usually automatic with installer)\nInstall required Julia packages:\n\nusing Pkg\nPkg.add([\n  \"UnicodePlots\",\n  \"DataFrames\",\n  \"CSV\",\n  \"Statistics\"\n])\n\nSetup Julia-R connection:\n\nlibrary(JuliaCall)\njulia_setup()\n\n\n\n\n\n\nJulia Gotchas\n\n\n\n\nSome Julia plotting backends have system dependencies\nUse UnicodePlots for most reliable results\nEnsure Julia working directory has write permissions\n\n\n\n\n\n4.1.3 4. Observable JS Setup\nNo separate installation needed, but your Quarto document must include:\ndependencies:\n  - name: \"@observablehq/plot\"\n    version: latest"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#verifying-your-setup-1",
    "href": "posts/multilanguage_quarto_demo/index.html#verifying-your-setup-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.2 Verifying Your Setup",
    "text": "4.2 Verifying Your Setup\nRun these commands to verify each language integration:\n\n4.2.1 R Environment\nsessionInfo()\n\n\n4.2.2 Python Environment\nlibrary(reticulate)\npy_config()\n\n\n4.2.3 Julia Environment\nlibrary(JuliaCall)\njulia_eval(\"versioninfo()\")"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#testing-a-minimal-example-1",
    "href": "posts/multilanguage_quarto_demo/index.html#testing-a-minimal-example-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.3 Testing a Minimal Example",
    "text": "4.3 Testing a Minimal Example\nHere’s a minimal example combining all languages:\nquarto-executable-code-5450563D\n# R code\nprint(\"Hello from R!\")\nquarto-executable-code-5450563D\n# Python code\nprint(\"Hello from Python!\")\n# Julia code\nprintln(\"Hello from Julia!\")\nquarto-executable-code-5450563D\n// Observable JS code\nmd`Hello from Observable JS!`"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#common-issues-and-solutions-1",
    "href": "posts/multilanguage_quarto_demo/index.html#common-issues-and-solutions-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.4 Common Issues and Solutions",
    "text": "4.4 Common Issues and Solutions\n\n4.4.1 Working Directory Problems\nAll languages need to access the same files. Check working directories:\n# R\ngetwd()\n\n# Python\nimport os\nos.getcwd()\n\n# Julia\npwd()\n\n\n4.4.2 File Permissions\nEnsure your working directory has write permissions:\nchmod 755 /path/to/working/directory\n\n\n4.4.3 Memory Issues\nMonitor memory usage:\n# R memory usage\ngc()\n\n# Python memory usage\nimport psutil\npsutil.Process().memory_info().rss / 1024 / 1024  # MB"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#full-example-palmer-penguins-visualization-1",
    "href": "posts/multilanguage_quarto_demo/index.html#full-example-palmer-penguins-visualization-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.5 Full Example: Palmer Penguins Visualization",
    "text": "4.5 Full Example: Palmer Penguins Visualization\nHere’s a complete example creating the same visualization in all four languages. See the companion repository at [GitHub Link] for the full code."
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#best-practices-1",
    "href": "posts/multilanguage_quarto_demo/index.html#best-practices-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.6 Best Practices",
    "text": "4.6 Best Practices\n\nTest Incrementally\n\nStart with R chunks\nAdd Python integration\nAdd Julia integration\nFinally, add Observable JS\n\nUse Version Control\n\nTrack your environment specifications\nDocument package versions\nShare reproducible setups\n\nDocument Dependencies\n\nCreate a requirements.txt for Python\nUse renv for R\nDocument Julia package versions"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#resources-1",
    "href": "posts/multilanguage_quarto_demo/index.html#resources-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.7 Resources",
    "text": "4.7 Resources\n\nQuarto Documentation\nR Markdown Cookbook\nReticulate Documentation\nJuliaCall Documentation\nObservable Documentation"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#conclusion-2",
    "href": "posts/multilanguage_quarto_demo/index.html#conclusion-2",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.8 Conclusion",
    "text": "4.8 Conclusion\nSetting up a multi-language Quarto environment requires attention to detail but offers powerful capabilities for data analysis and visualization. Keep your system updated, use version control, and document your setup for reproducibility."
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#session-info-1",
    "href": "posts/multilanguage_quarto_demo/index.html#session-info-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.9 Session Info",
    "text": "4.9 Session Info\nquarto-executable-code-5450563D\nsessionInfo()"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#appendix-fully-documented-multi3.qmd-1",
    "href": "posts/multilanguage_quarto_demo/index.html#appendix-fully-documented-multi3.qmd-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.10 Appendix: Fully Documented multi3.qmd",
    "text": "4.10 Appendix: Fully Documented multi3.qmd\nHere’s a complete, documented version of the multi-language visualization example. Each section includes detailed explanations of the code and important considerations.\nquarto-executable-code-5450563D\n---\ntitle: \"Palmer Penguins: Multi-Language Visualization Comparison\"\nauthor: \"[Your Name]\"\ndate: \"`r Sys.Date()`\"\nformat:\n  html:\n    # Enable code folding for cleaner output\n    code-fold: true\n    # Bundle all resources into single HTML\n    embed-resources: true\n    theme: default\n    execute:\n      echo: true\n# Required for Observable Plot\ndependencies:\n  - name: \"@observablehq/plot\"\n    version: latest\n---\n\n## Introduction\nThis document demonstrates how to create the same visualization - a scatterplot of \nbill depth versus bill length by species - using four different programming \nlanguages: R, Python, Julia, and Observable JS. Each implementation showcases \nthe unique strengths of its ecosystem.\n\n## Data Preparation in R\n# First, we load required libraries and prepare our data\n```{r setup}\n# Load required libraries\nlibrary(palmerpenguins)  # Contains our dataset\nlibrary(dplyr)           # For data manipulation\nlibrary(ggplot2)         # For visualization\nlibrary(scales)          # For plot scaling\nconflicts_prefer(palmerpenguins::penguins)\n\n# Prepare and save data for other languages\n# We remove NA values to ensure consistency across languages\ndata &lt;- penguins %&gt;% na.omit()\n\n# Save to CSV for other languages to read\n# Note: row.names=FALSE prevents adding an index column\nwrite.csv(data, \"penguins.csv\", row.names = FALSE)\n\n# Display data structure for verification\nglimpse(data)"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#visualization-in-r-ggplot2-1",
    "href": "posts/multilanguage_quarto_demo/index.html#visualization-in-r-ggplot2-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "4.11 Visualization in R (ggplot2)",
    "text": "4.11 Visualization in R (ggplot2)"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#visualization-in-python-seaborn-1",
    "href": "posts/multilanguage_quarto_demo/index.html#visualization-in-python-seaborn-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "5.1 Visualization in Python (Seaborn)",
    "text": "5.1 Visualization in Python (Seaborn)"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#visualization-in-julia-1",
    "href": "posts/multilanguage_quarto_demo/index.html#visualization-in-julia-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "6.1 Visualization in Julia",
    "text": "6.1 Visualization in Julia"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#visualization-in-observable-js-1",
    "href": "posts/multilanguage_quarto_demo/index.html#visualization-in-observable-js-1",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "7.1 Visualization in Observable JS",
    "text": "7.1 Visualization in Observable JS"
  },
  {
    "objectID": "posts/multilanguage_quarto_demo/index.html#conclusion-3",
    "href": "posts/multilanguage_quarto_demo/index.html#conclusion-3",
    "title": "Setting Up Multi-Language Quarto Documents on macOS",
    "section": "8.1 Conclusion",
    "text": "8.1 Conclusion\nEach language offers unique advantages for visualization:\n\nR (ggplot2): Excellent defaults and highly customizable aesthetic options\nPython (Seaborn): Clean integration with statistical functions and good handling of categorical variables\nJulia (UnicodePlots): Fast performance and text-based visualization capabilities\nObservable JS: Interactive capabilities and web-native visualization\n\nThe core visualization remains consistent across all implementations, showing the relationship between bill depth and length across different penguin species, while each implementation showcases the strengths of its respective ecosystem.\n\n### Key Implementation Notes\n\n1. **YAML Header**\n   - Includes necessary dependencies for Observable Plot\n   - Sets up HTML output with code folding\n   - Ensures resources are embedded for portability\n\n2. **Data Preparation**\n   - Uses R for initial data loading and cleaning\n   - Exports clean CSV for other languages\n   - Maintains consistent data across all visualizations\n\n3. **Language-Specific Considerations**\n   - R: Uses ggplot2 for publication-quality static plots\n   - Python: Matches R's aesthetic choices for consistency\n   - Julia: Uses UnicodePlots for reliability\n   - Observable JS: Provides interactive web-native visualization\n\n4. **Common Patterns**\n   - Consistent color schemes\n   - Similar axis labels and titles\n   - Comparable point sizes and transparencies\n   - Aligned legend positions where possible\n\n5. **Error Prevention**\n   - Explicit NA handling\n   - Consistent working directory usage\n   - Clear data export/import chain\n   - Reliable plotting backends\n\nThis implementation provides a robust template for multi-language visualization\nthat can be adapted for other datasets and analysis needs.\n\n## Prerequisites\n\nIn development\n\n## Step-by-Step Implementation\n\nIn development\n\n## Key Takeaways\n\nIn development\n\n## Further Reading\n\nIn development\n:::"
  },
  {
    "objectID": "template/quarto-blog-template.html",
    "href": "template/quarto-blog-template.html",
    "title": "Your Technical Blog Post Title",
    "section": "",
    "text": "Brief introduction that:\n\nHooks the reader with an interesting problem or observation\nStates the purpose of your analysis/tutorial\nOutlines what readers will learn or gain\n\n\n\n\n\n\n\nKey Takeaway\n\n\n\nHighlight the main insight readers will gain from this post."
  },
  {
    "objectID": "template/quarto-blog-template.html#introduction",
    "href": "template/quarto-blog-template.html#introduction",
    "title": "Your Technical Blog Post Title",
    "section": "",
    "text": "Brief introduction that:\n\nHooks the reader with an interesting problem or observation\nStates the purpose of your analysis/tutorial\nOutlines what readers will learn or gain\n\n\n\n\n\n\n\nKey Takeaway\n\n\n\nHighlight the main insight readers will gain from this post."
  },
  {
    "objectID": "template/quarto-blog-template.html#required-packages-and-setup",
    "href": "template/quarto-blog-template.html#required-packages-and-setup",
    "title": "Your Technical Blog Post Title",
    "section": "2 Required Packages and Setup",
    "text": "2 Required Packages and Setup\n\n# List the packages readers will need\nlibrary(tidyverse)\n# Add other packages\n\nBrief explanation of why these packages were chosen and any setup requirements."
  },
  {
    "objectID": "template/quarto-blog-template.html#the-problemdata",
    "href": "template/quarto-blog-template.html#the-problemdata",
    "title": "Your Technical Blog Post Title",
    "section": "3 The Problem/Data",
    "text": "3 The Problem/Data\n\n\nCode\n# Data loading and initial preparation\n# Replace with your actual data source\ndata &lt;- mtcars\nglimpse(data)\n\n\nRows: 32\nColumns: 11\n$ mpg  &lt;dbl&gt; 21, 21, 23, 21, 19, 18, 14, 24, 23, 19, 18, 16, 17, 15,…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…\n$ disp &lt;dbl&gt; 160, 160, 108, 258, 360, 225, 360, 147, 141, 168, 168, …\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…\n$ drat &lt;dbl&gt; 3.9, 3.9, 3.9, 3.1, 3.1, 2.8, 3.2, 3.7, 3.9, 3.9, 3.9, …\n$ wt   &lt;dbl&gt; 2.6, 2.9, 2.3, 3.2, 3.4, 3.5, 3.6, 3.2, 3.1, 3.4, 3.4, …\n$ qsec &lt;dbl&gt; 16, 17, 19, 19, 17, 20, 16, 20, 23, 18, 19, 17, 18, 18,…\n$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…\n$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…\n$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…\n$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…\n\n\n\nDescribe your data source\nExplain the problem you’re addressing\nShare any initial data preparation steps"
  },
  {
    "objectID": "template/quarto-blog-template.html#analysistutorial-steps",
    "href": "template/quarto-blog-template.html#analysistutorial-steps",
    "title": "Your Technical Blog Post Title",
    "section": "4 Analysis/Tutorial Steps",
    "text": "4 Analysis/Tutorial Steps\n\n4.1 Step 1: Initial Data Exploration\n\n\nCode\n# Your analysis code here\nggplot(data, aes(x = mpg, y = hp)) +\n  geom_point(aes(color = factor(cyl)), alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"#1e3a5f\") +\n  labs(\n    title = \"Relationship between MPG and Horsepower\",\n    subtitle = \"Grouped by number of cylinders\",\n    x = \"Miles Per Gallon\",\n    y = \"Horsepower\",\n    color = \"Cylinders\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nDescription of your visualization\n\n\n\n\nExplain what you found and why it’s interesting.\n\n\nHere you can add additional context, references, or notes that might be helpful but aren’t essential to the main flow of the post.\n\n\n4.2 Step 2: Main Analysis\n\n\nCode\n# Core analysis code\nmodel &lt;- lm(mpg ~ hp + wt + cyl, data = data)\nsummary(model)\n\n\n\nCall:\nlm(formula = mpg ~ hp + wt + cyl, data = data)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-3.929 -1.560 -0.531  1.185  5.899 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  38.7518     1.7869   21.69   &lt;2e-16 ***\nhp           -0.0180     0.0119   -1.52   0.1400    \nwt           -3.1670     0.7406   -4.28   0.0002 ***\ncyl          -0.9416     0.5509   -1.71   0.0985 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.5 on 28 degrees of freedom\nMultiple R-squared:  0.843, Adjusted R-squared:  0.826 \nF-statistic: 50.2 on 3 and 28 DF,  p-value: 2.18e-11\n\n\nWalk through your analysis, explaining: - Why you chose this approach - What the code does - What the results mean\n\n\n4.3 Step 3: Results and Visualization\n\n\nCode\n# Create compelling visualizations\nlibrary(broom)\naugmented_data &lt;- augment(model)\n\nggplot(augmented_data, aes(x = .fitted, y = .resid)) +\n  geom_point(alpha = 0.7) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  labs(\n    title = \"Residual Plot\",\n    x = \"Fitted Values\",\n    y = \"Residuals\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nVisualization of your results with clear interpretation\n\n\n\n\nInterpret your results and explain their significance."
  },
  {
    "objectID": "template/quarto-blog-template.html#key-takeaways",
    "href": "template/quarto-blog-template.html#key-takeaways",
    "title": "Your Technical Blog Post Title",
    "section": "5 Key Takeaways",
    "text": "5 Key Takeaways\n\n\n\n\n\n\nSummary of Findings\n\n\n\n\nBullet point summary of main findings\nPractical applications\nImportant insights"
  },
  {
    "objectID": "template/quarto-blog-template.html#reproducibility",
    "href": "template/quarto-blog-template.html#reproducibility",
    "title": "Your Technical Blog Post Title",
    "section": "6 Reproducibility",
    "text": "6 Reproducibility\n\n# Print session info for reproducibility\nsessionInfo()\n\nR version 4.5.0 (2025-04-11)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.4.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Los_Angeles\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] broom_1.0.8        shiny_1.10.0       styler_1.10.3      quarto_1.4.4       pacman_0.5.1       readxl_1.4.5       knitr_1.50         lubridate_1.9.4    forcats_1.0.0      stringr_1.5.1     \n[11] dplyr_1.1.4        purrr_1.0.4        readr_2.1.5        tidyr_1.3.1        tibble_3.2.1       ggplot2_3.5.2      tidyverse_2.0.0    tidytuesdayR_1.1.2 rmarkdown_2.29     kableExtra_1.4.0  \n[21] janitor_2.2.1      datapasta_3.1.0    ggthemes_5.1.0     conflicted_1.2.0   DT_0.33            naniar_1.1.0       devtools_2.4.5     usethis_3.1.0     \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1  viridisLite_0.4.2 farver_2.1.2      R.utils_2.13.0    fastmap_1.2.0     promises_1.3.2    digest_0.6.37     timechange_0.3.0  mime_0.13         lifecycle_1.0.4  \n[11] ellipsis_0.3.2    processx_3.8.6    magrittr_2.0.3    compiler_4.5.0    rlang_1.1.6       tools_4.5.0       yaml_2.3.10       labeling_0.4.3    htmlwidgets_1.6.4 pkgbuild_1.4.7   \n[21] xml2_1.3.8        pkgload_1.4.0     miniUI_0.1.1.1    R.cache_0.16.0    withr_3.0.2       R.oo_1.27.0       grid_4.5.0        urlchecker_1.0.1  profvis_0.4.0     xtable_1.8-4     \n[31] colorspace_2.1-1  scales_1.3.0      cli_3.6.4         generics_0.1.3    remotes_2.5.0     rstudioapi_0.17.1 tzdb_0.5.0        sessioninfo_1.2.3 cachem_1.1.0      splines_4.5.0    \n[41] cellranger_1.1.0  vctrs_0.6.5       Matrix_1.7-3      jsonlite_2.0.0    hms_1.1.3         visdat_0.6.0      systemfonts_1.2.2 glue_1.8.0        ps_1.9.0          stringi_1.8.7    \n[51] gtable_0.3.6      later_1.4.2       munsell_0.5.1     pillar_1.10.2     htmltools_0.5.8.1 R6_2.6.1          lattice_0.22-6    evaluate_1.0.3    backports_1.5.0   R.methodsS3_1.8.2\n[61] memoise_2.0.1     snakecase_0.11.1  httpuv_1.6.15     Rcpp_1.0.14       nlme_3.1-168      svglite_2.1.3     mgcv_1.9-1        xfun_0.52         fs_1.6.6          pkgconfig_2.0.3"
  },
  {
    "objectID": "template/quarto-blog-template.html#next-steps",
    "href": "template/quarto-blog-template.html#next-steps",
    "title": "Your Technical Blog Post Title",
    "section": "7 Next Steps",
    "text": "7 Next Steps\n\nSuggest areas for further exploration\nMention potential improvements\nInvite reader engagement"
  },
  {
    "objectID": "template/quarto-blog-template.html#references",
    "href": "template/quarto-blog-template.html#references",
    "title": "Your Technical Blog Post Title",
    "section": "8 References",
    "text": "8 References\n\nCite your sources\nLink to relevant documentation\nCredit other contributors"
  },
  {
    "objectID": "test_minimal.html",
    "href": "test_minimal.html",
    "title": "Test Document",
    "section": "",
    "text": "This is a test document.\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "test_minimal.html#test",
    "href": "test_minimal.html#test",
    "title": "Test Document",
    "section": "",
    "text": "This is a test document.\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "test_copy.html",
    "href": "test_copy.html",
    "title": "Your Technical Blog Post Title",
    "section": "",
    "text": "This is a test."
  },
  {
    "objectID": "test_copy.html#test",
    "href": "test_copy.html#test",
    "title": "Your Technical Blog Post Title",
    "section": "",
    "text": "This is a test."
  },
  {
    "objectID": "posts/setupquarto/quarto-blog-template.html",
    "href": "posts/setupquarto/quarto-blog-template.html",
    "title": "Your Technical Blog Post Title",
    "section": "",
    "text": "Brief introduction that:\n\nHooks the reader with an interesting problem or observation\nStates the purpose of your analysis/tutorial\nOutlines what readers will learn or gain"
  },
  {
    "objectID": "posts/setupquarto/quarto-blog-template.html#introduction",
    "href": "posts/setupquarto/quarto-blog-template.html#introduction",
    "title": "Your Technical Blog Post Title",
    "section": "",
    "text": "Brief introduction that:\n\nHooks the reader with an interesting problem or observation\nStates the purpose of your analysis/tutorial\nOutlines what readers will learn or gain"
  },
  {
    "objectID": "posts/setupquarto/quarto-blog-template.html#required-packages-and-setup",
    "href": "posts/setupquarto/quarto-blog-template.html#required-packages-and-setup",
    "title": "Your Technical Blog Post Title",
    "section": "2 Required Packages and Setup",
    "text": "2 Required Packages and Setup\n\n# List the packages readers will need\nlibrary(tidyverse)\n# Add other packages\n\nBrief explanation of why these packages were chosen and any setup requirements."
  },
  {
    "objectID": "posts/setupquarto/quarto-blog-template.html#the-problemdata",
    "href": "posts/setupquarto/quarto-blog-template.html#the-problemdata",
    "title": "Your Technical Blog Post Title",
    "section": "3 The Problem/Data",
    "text": "3 The Problem/Data\n\n# Data loading and initial preparation\n# Load sample dataset\ndata &lt;- mtcars\nglimpse(data)\n\nRows: 32\nColumns: 11\n$ mpg  &lt;dbl&gt; 21, 21, 23, 21, 19, 18, 14, 24, 23, 19, 18, 16, 17, 15,…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…\n$ disp &lt;dbl&gt; 160, 160, 108, 258, 360, 225, 360, 147, 141, 168, 168, …\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…\n$ drat &lt;dbl&gt; 3.9, 3.9, 3.9, 3.1, 3.1, 2.8, 3.2, 3.7, 3.9, 3.9, 3.9, …\n$ wt   &lt;dbl&gt; 2.6, 2.9, 2.3, 3.2, 3.4, 3.5, 3.6, 3.2, 3.1, 3.4, 3.4, …\n$ qsec &lt;dbl&gt; 16, 17, 19, 19, 17, 20, 16, 20, 23, 18, 19, 17, 18, 18,…\n$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…\n$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…\n$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…\n$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…\n\n\n\nDescribe your data source\nExplain the problem you’re addressing\nShare any initial data preparation steps"
  },
  {
    "objectID": "posts/setupquarto/quarto-blog-template.html#analysistutorial-steps",
    "href": "posts/setupquarto/quarto-blog-template.html#analysistutorial-steps",
    "title": "Your Technical Blog Post Title",
    "section": "4 Analysis/Tutorial Steps",
    "text": "4 Analysis/Tutorial Steps\n\n4.1 Step 1: Initial Data Exploration\n\n# Your analysis code here\nglimpse(mtcars)\n\nRows: 32\nColumns: 11\n$ mpg  &lt;dbl&gt; 21, 21, 23, 21, 19, 18, 14, 24, 23, 19, 18, 16, 17, 15,…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…\n$ disp &lt;dbl&gt; 160, 160, 108, 258, 360, 225, 360, 147, 141, 168, 168, …\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…\n$ drat &lt;dbl&gt; 3.9, 3.9, 3.9, 3.1, 3.1, 2.8, 3.2, 3.7, 3.9, 3.9, 3.9, …\n$ wt   &lt;dbl&gt; 2.6, 2.9, 2.3, 3.2, 3.4, 3.5, 3.6, 3.2, 3.1, 3.4, 3.4, …\n$ qsec &lt;dbl&gt; 16, 17, 19, 19, 17, 20, 16, 20, 23, 18, 19, 17, 18, 18,…\n$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…\n$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…\n$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…\n$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…\n\nggplot(mtcars, aes(x=cyl, y=mpg)) +\n  geom_point()\n\n\n\n\nDescription of your visualization\n\n\n\n  # Your visualization\n\nExplain what you found and why it’s interesting.\n\n\n4.2 Step 2: Main Analysis\n\n# Core analysis code\n\nWalk through your analysis, explaining: - Why you chose this approach - What the code does - What the results mean\n\n\n4.3 Step 3: Results and Visualization\n\n# Create compelling visualizations\n\nInterpret your results and explain their significance."
  },
  {
    "objectID": "posts/setupquarto/quarto-blog-template.html#key-takeaways",
    "href": "posts/setupquarto/quarto-blog-template.html#key-takeaways",
    "title": "Your Technical Blog Post Title",
    "section": "5 Key Takeaways",
    "text": "5 Key Takeaways\n\nBullet point summary of main findings\nPractical applications\nImportant insights"
  },
  {
    "objectID": "posts/setupquarto/quarto-blog-template.html#reproducibility",
    "href": "posts/setupquarto/quarto-blog-template.html#reproducibility",
    "title": "Your Technical Blog Post Title",
    "section": "6 Reproducibility",
    "text": "6 Reproducibility\n\n# Print session info for reproducibility\nsessionInfo()\n\nR version 4.5.0 (2025-04-11)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.4.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Los_Angeles\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] here_1.0.1         shiny_1.10.0       styler_1.10.3      quarto_1.4.4       pacman_0.5.1       readxl_1.4.5       knitr_1.50         lubridate_1.9.4    forcats_1.0.0      stringr_1.5.1     \n[11] dplyr_1.1.4        purrr_1.0.4        readr_2.1.5        tidyr_1.3.1        tibble_3.2.1       ggplot2_3.5.2      tidyverse_2.0.0    tidytuesdayR_1.1.2 rmarkdown_2.29     kableExtra_1.4.0  \n[21] janitor_2.2.1      datapasta_3.1.0    ggthemes_5.1.0     conflicted_1.2.0   DT_0.33            naniar_1.1.0       devtools_2.4.5     usethis_3.1.0     \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1  viridisLite_0.4.2 farver_2.1.2      R.utils_2.13.0    fastmap_1.2.0     promises_1.3.2    digest_0.6.37     timechange_0.3.0  mime_0.13         lifecycle_1.0.4  \n[11] ellipsis_0.3.2    processx_3.8.6    magrittr_2.0.3    compiler_4.5.0    rlang_1.1.6       tools_4.5.0       yaml_2.3.10       labeling_0.4.3    htmlwidgets_1.6.4 pkgbuild_1.4.7   \n[21] xml2_1.3.8        pkgload_1.4.0     miniUI_0.1.1.1    R.cache_0.16.0    withr_3.0.2       R.oo_1.27.0       grid_4.5.0        urlchecker_1.0.1  profvis_0.4.0     xtable_1.8-4     \n[31] colorspace_2.1-1  scales_1.3.0      cli_3.6.4         generics_0.1.3    remotes_2.5.0     rstudioapi_0.17.1 tzdb_0.5.0        sessioninfo_1.2.3 cachem_1.1.0      cellranger_1.1.0 \n[41] vctrs_0.6.5       jsonlite_2.0.0    hms_1.1.3         visdat_0.6.0      systemfonts_1.2.2 glue_1.8.0        ps_1.9.0          stringi_1.8.7     gtable_0.3.6      later_1.4.2      \n[51] munsell_0.5.1     pillar_1.10.2     htmltools_0.5.8.1 R6_2.6.1          rprojroot_2.0.4   evaluate_1.0.3    R.methodsS3_1.8.2 memoise_2.0.1     snakecase_0.11.1  httpuv_1.6.15    \n[61] Rcpp_1.0.14       svglite_2.1.3     xfun_0.52         fs_1.6.6          pkgconfig_2.0.3"
  },
  {
    "objectID": "posts/setupquarto/quarto-blog-template.html#next-steps",
    "href": "posts/setupquarto/quarto-blog-template.html#next-steps",
    "title": "Your Technical Blog Post Title",
    "section": "7 Next Steps",
    "text": "7 Next Steps\n\nSuggest areas for further exploration\nMention potential improvements\nInvite reader engagement"
  },
  {
    "objectID": "posts/setupquarto/quarto-blog-template.html#references",
    "href": "posts/setupquarto/quarto-blog-template.html#references",
    "title": "Your Technical Blog Post Title",
    "section": "8 References",
    "text": "8 References\n\nCite your sources\nLink to relevant documentation\nCredit other contributors"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html",
    "href": "posts/shiny_simulation_app/shiny_app/package.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-1-set-up-your-development-environment",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-1-set-up-your-development-environment",
    "title": "",
    "section": "1.1 Step 1: Set up your development environment",
    "text": "1.1 Step 1: Set up your development environment\n\nMake sure you have the necessary R packages installed:\n\ninstall.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\", \"shiny\", \"usethis\"))\nlibrary(devtools)\n\nSet up your GitHub account if you don’t already have one (github.com)."
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-2-create-the-package-structure",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-2-create-the-package-structure",
    "title": "",
    "section": "1.2 Step 2: Create the package structure",
    "text": "1.2 Step 2: Create the package structure\n\nCreate a new directory for your package:\n\nusethis::create_package(\"PHB228sims\")\n\nNavigate to your new package directory."
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-3-move-your-shiny-app-code-into-the-package",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-3-move-your-shiny-app-code-into-the-package",
    "title": "",
    "section": "1.3 Step 3: Move your Shiny app code into the package",
    "text": "1.3 Step 3: Move your Shiny app code into the package\n\nCreate an R directory for your functions if it doesn’t already exist:\n\ndir.create(\"R\", showWarnings = FALSE)\n\nMove your Shiny app code into the R directory, organizing it into separate R files:\n\nR/ui.R - User interface components\nR/server.R - Server logic\nR/simulation_functions.R - Monte Carlo simulation functions\nR/run_app.R - Function to launch the app\n\nFor the main app launcher function in run_app.R:\n\n#' Run the PHB 228 Monte Carlo Simulation App\n#'\n#' @export\n#'\n#' @import shiny\n#' @return A Shiny app object\n#' @examples\n#' \\dontrun{\n#' PHB228sims::run_app()\n#' }\nrun_app &lt;- function() {\n  ui &lt;- PHB228sims_ui()\n  server &lt;- function(input, output, session) {\n    PHB228sims_server(input, output, session)\n  }\n  shinyApp(ui = ui, server = server)\n}"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-4-add-package-documentation",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-4-add-package-documentation",
    "title": "",
    "section": "1.4 Step 4: Add package documentation",
    "text": "1.4 Step 4: Add package documentation\n\nCreate a package documentation file (R/PHB228sims-package.R):\n\n#' @keywords internal\n\"_PACKAGE\"\n\n#' PHB 228 Monte Carlo Simulation Visualizer\n#'\n#' A package that provides visualizations for Monte Carlo simulations\n#' as used in PHB 228 course materials.\n#'\n#' @docType package\n#' @name PHB228sims\nNULL\n\nCreate a README.md file at the root level:\n\nusethis::use_readme_md()\n\nEdit the README.md to include:\n\nPackage description\nInstallation instructions\nBasic usage example\nScreenshots (if available)"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-5-document-your-functions",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-5-document-your-functions",
    "title": "",
    "section": "1.5 Step 5: Document your functions",
    "text": "1.5 Step 5: Document your functions\n\nAdd roxygen2 documentation to all exported functions:\n\n#' Simulation Function Name\n#'\n#' Description of what this function does\n#' \n#' @param parameter1 Description of parameter1\n#' @param parameter2 Description of parameter2\n#' @return Description of return value\n#' @export\n#' @examples\n#' \\dontrun{\n#' simulation_function(100, 0.5)\n#' }\n\nGenerate documentation files:\n\ndevtools::document()"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-6-set-up-package-dependencies",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-6-set-up-package-dependencies",
    "title": "",
    "section": "1.6 Step 6: Set up package dependencies",
    "text": "1.6 Step 6: Set up package dependencies\n\nAdd required packages to the DESCRIPTION file using:\n\nusethis::use_package(\"shiny\")\n# Add any other packages your app depends on\nusethis::use_package(\"ggplot2\")\nusethis::use_package(\"dplyr\")\n# etc."
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-7-add-data-if-needed",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-7-add-data-if-needed",
    "title": "",
    "section": "1.7 Step 7: Add data if needed",
    "text": "1.7 Step 7: Add data if needed\n\nIf your app uses example datasets:\n\nusethis::use_data_raw()\n\nCreate an R script in the data-raw folder to prepare your data, then run:\n\nusethis::use_data(your_data_object)"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-8-create-tests",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-8-create-tests",
    "title": "",
    "section": "1.8 Step 8: Create tests",
    "text": "1.8 Step 8: Create tests\n\nSet up testing infrastructure:\n\nusethis::use_testthat()\n\nWrite tests for your simulation functions in the tests/testthat directory."
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-9-create-a-vignette-optional-but-recommended",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-9-create-a-vignette-optional-but-recommended",
    "title": "",
    "section": "1.9 Step 9: Create a vignette (optional but recommended)",
    "text": "1.9 Step 9: Create a vignette (optional but recommended)\n\nSet up vignette infrastructure:\n\nusethis::use_vignette(\"PHB228sims-introduction\")\n\nWrite a vignette that demonstrates how to use your package."
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-10-build-and-check-your-package",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-10-build-and-check-your-package",
    "title": "",
    "section": "1.10 Step 10: Build and check your package",
    "text": "1.10 Step 10: Build and check your package\n\nBuild and check your package for any issues:\n\ndevtools::check()\n\nFix any errors, warnings, or notes."
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-11-set-up-github-repository",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-11-set-up-github-repository",
    "title": "",
    "section": "1.11 Step 11: Set up GitHub repository",
    "text": "1.11 Step 11: Set up GitHub repository\n\nInitialize git in your package directory:\n\nusethis::use_git()\n\nCreate a GitHub repository:\n\nusethis::use_github()"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-12-add-github-documentation",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-12-add-github-documentation",
    "title": "",
    "section": "1.12 Step 12: Add GitHub documentation",
    "text": "1.12 Step 12: Add GitHub documentation\n\nAdd a license:\n\nusethis::use_mit_license()  # or another license of your choice\n\nCreate a code of conduct:\n\nusethis::use_code_of_conduct()\n\nAdd contribution guidelines:\n\nusethis::use_tidy_contributing()"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-13-configure-cicd-optional",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-13-configure-cicd-optional",
    "title": "",
    "section": "1.13 Step 13: Configure CI/CD (optional)",
    "text": "1.13 Step 13: Configure CI/CD (optional)\n\nSet up GitHub Actions for continuous integration:\n\nusethis::use_github_action(\"check-standard\")"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-14-publish-your-package",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-14-publish-your-package",
    "title": "",
    "section": "1.14 Step 14: Publish your package",
    "text": "1.14 Step 14: Publish your package\n\nPush your code to GitHub:\n\n# This is done automatically if you used usethis::use_github()\n\nCreate a release on GitHub (through the GitHub interface)."
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#step-15-enable-github-pages-optional",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#step-15-enable-github-pages-optional",
    "title": "",
    "section": "1.15 Step 15: Enable GitHub Pages (optional)",
    "text": "1.15 Step 15: Enable GitHub Pages (optional)\n\nBuild package documentation website:\n\nusethis::use_pkgdown()\npkgdown::build_site()\n\nConfigure GitHub Pages in your repository settings to use the docs folder."
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/package.html#additional-tips",
    "href": "posts/shiny_simulation_app/shiny_app/package.html#additional-tips",
    "title": "",
    "section": "1.16 Additional Tips",
    "text": "1.16 Additional Tips\n\nMake sure to properly separate your Shiny app’s UI and server logic into functions that can be reused.\nConsider organizing your simulation functions into a separate module within your package.\nFor any data visualizations, create functions that return ggplot objects that can be used both within and outside the Shiny app.\nDocument each parameter and function thoroughly to make your package user-friendly.\nInclude examples in your function documentation that show how to use them.\n\nWould you like me to elaborate on any specific part of this process? For example, I could provide more details on how to structure the Shiny app functions within the package or how to create effective documentation."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/zzvim-R/CHANGELOG.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/zzvim-R/CHANGELOG.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/zzvim-R/CHANGELOG.html#unreleased",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/zzvim-R/CHANGELOG.html#unreleased",
    "title": "",
    "section": "1.1 [Unreleased]",
    "text": "1.1 [Unreleased]\n\nInitial creation of the plugin."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/doc/targets-textobj-cheatsheet.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/doc/targets-textobj-cheatsheet.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/doc/targets-textobj-cheatsheet.html#commands",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/doc/targets-textobj-cheatsheet.html#commands",
    "title": "",
    "section": "1.1 Commands",
    "text": "1.1 Commands\nAvailable mappings\n     ic  ac  Ic  Ac\n    inc anc Inc Anc\n    ilc alc Ilc Alc\nChart for a list of commands\n                                     ..............\na \\cmd{ bbbbbbbb }  \\cmd{ ccccccc }  \\cmd{ dddddd }  \\cmd{ eeeeeee } \\cmd{ ffffffff }\n  │    │└ 2Ilc ┘││ ││    │└ Ilc ┘││ ││    │└ Ic ┘││ ││    │└ Inc ┘││││    │└ 2Inc ┘││\n  │    └─ 2ilc ─┘│ ││    └─ ilc ─┘│ ││    └─ ic ─┘│ ││    └─ inc ─┘│││    └─ 2inc ─┘│\n  ├────── 2alc ──┘ │├────── alc ──┘ │├────── ac ──┘ │├────── anc ──┘│└────── 2anc ──┤\n  └────── 2Alc ────┘└────── Alc ────┘└────── Ac ────┘└────── Anc ───┤               │\n                                                                    └─────── 2Anc ──┘\nChart for nested commands\n                                       ..............\na \\cmd{ b \\cmd{ cccccccc } d } \\cmd{ e \\cmd{ ffffff } g } \\cmd{ h \\cmd{ iiiiiiii }j }\n  │    ││ │    │└ 2Ilc ┘││││││││    ││ │    │└ Ic ┘││││││││    ││││    │└ 2Inc ┘│││││\n  │    ││ │    └─ 2ilc ─┘│││││││    ││ │    └─ ic ─┘│││││││    ││││    └─ 2inc ─┘││││\n  │    ││ ├────── 2alc ──┘││││││    ││ ├────── ac ──┘││││││    │││└────── 2anc ──┤│││\n  │    ││ └────── 2Alc ───┘│││││    ││ └────── Ac ───┘│││││    ││└─────── 2Anc ──┘│││\n  │    │└───────── Ilc ────┘││││    │└─────── 2Ic ────┘││││    │└───────── Inc ───┘││\n  │    └────────── ilc ─────┘│││    └──────── 2ic ─────┘│││    └────────── inc ────┘│\n  ├─────────────── alc ──────┘│├───────────── 2ac ──────┘│└─────────────── anc ─────┤\n  └─────────────── Alc ───────┘└───────────── 2Ac ───────┤                          │\n                                                         └──────────────── Anc ─────┘"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/doc/targets-textobj-cheatsheet.html#environments",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/doc/targets-textobj-cheatsheet.html#environments",
    "title": "",
    "section": "1.2 Environments",
    "text": "1.2 Environments\nAvailable mappings\n     ie  ae  Ie  Ae\n    ine ane Ine Ane\n    ile ale Ile Ale\nChart for list of environments\n \\begin{A} ────────────┬────┐\n           ───────┐    │    │\n   a       ──┐    │    │    │\n   a        2Ile 2ile 2ale 2Ale\n   a       ──┘    │    │    │\n           ───────┘    │    │\n \\end{A}   ────────────┘    │\n           ─────────────────┘\n \\begin{B} ─────────┬───┐\n           ─────┐   │   │\n   b       ─┐   │   │   │\n   b        Ile ile ale Ale\n   b       ─┘   │   │   │\n           ─────┘   │   │\n \\end{B}   ─────────┘   │\n           ─────────────┘\n.\\begin{C} ───────┬──┐\n.          ────┐  │  │\n.  c       ─┐  │  │  │\n.  c        Ie ie ae Ae\n.  c       ─┘  │  │  │\n.          ────┘  │  │\n.\\end{C}   ───────┘  │\n           ──────────┘\n \\begin{D} ─────────┬───┐\n           ─────┐   │   │\n   d       ─┐   │   │   │\n   d        Ine ine ane Ane\n   d       ─┘   │   │   │\n           ─────┘   │   │\n \\end{D}   ─────────┘   │\n           ─────────────┴───┐\n \\begin{E} ────────────┐    │\n           ───────┐    │    │\n   e       ──┐    │    │    │\n   e        2Ine 2ine 2ane 2Ane\n   e       ──┘    │    │    │\n           ───────┘    │    │\n \\end{E}   ────────────┴────┘\nChart for nested environments\n \\begin{A}      ────────────────────────────┬───┐\n                ────────────────────────┐   │   │\n     a          ────────────────────┐   │   │   │\n                                    │   │   │   │\n     \\begin{B}  ───────────┬────┐   │   │   │   │\n                ──────┐    │    │   │   │   │   │\n     b          ─┐    │    │    │   │   │   │   │\n     b          2Ile 2ile 2ale 2Ale Ile ile ale Ale\n     b          ─┘    │    │    │   │   │   │   │\n                ──────┘    │    │   │   │   │   │\n     \\end{B}    ───────────┘    │   │   │   │   │\n                ────────────────┘   │   │   │   │\n     a          ────────────────────┘   │   │   │\n                ────────────────────────┘   │   │\n \\end{A}        ────────────────────────────┘   │\n                ────────────────────────────────┘\n \\begin{C}      ──────────────────────┬───┐\n                ──────────────────┐   │   │\n     c          ──────────────┐   │   │   │\n                              │   │   │   │\n.    \\begin{D}  ───────┬──┐   │   │   │   │\n.               ────┐  │  │   │   │   │   │\n.    d          ─┐  │  │  │   │   │   │   │\n.    d           Ie ie ae Ae 2Ie 2ie 2ae 2Ae\n.    d          ─┘  │  │  │   │   │   │   │\n.               ────┘  │  │   │   │   │   │\n.    \\end{D}    ───────┘  │   │   │   │   │\n                ──────────┘   │   │   │   │\n     c          ──────────────┘   │   │   │\n                ──────────────────┘   │   │\n \\end{C}        ──────────────────────┘   │\n                ──────────────────────────┴──────┐\n \\begin{E}      ─────────────────────────────┐   │\n                ─────────────────────────┐   │   │\n     e          ─────────────────────┐   │   │   │\n                                     │   │   │   │\n     \\begin{F}  ────────────┬────┐   │   │   │   │\n                ───────┐    │    │   │   │   │   │\n     f          ──┐    │    │    │   │   │   │   │\n     f           2Ine 2ine 2ane 2Ane Ine ine ane Ane\n     f          ──┘    │    │    │   │   │   │   │\n                ───────┘    │    │   │   │   │   │\n     \\end{F}    ────────────┘    │   │   │   │   │\n                ─────────────────┘   │   │   │   │\n     e          ─────────────────────┘   │   │   │\n                ─────────────────────────┘   │   │\n \\end{E}        ─────────────────────────────┴───┘"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/LICENSE.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/LICENSE.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\nMIT license\nCopyright (c) 2025 Karl Yngve Lervåg\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/vimtex/LICENSE.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/vimtex/LICENSE.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/CONTRIBUTING.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/CONTRIBUTING.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/CONTRIBUTING.html#branch-model",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/CONTRIBUTING.html#branch-model",
    "title": "",
    "section": "1.1 Branch model",
    "text": "1.1 Branch model\nVimTeX is developed mainly through the master branch, and pull requests should be fork based."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/CONTRIBUTING.html#documentation-style",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/CONTRIBUTING.html#documentation-style",
    "title": "",
    "section": "1.2 Documentation style",
    "text": "1.2 Documentation style\nVim help files have their own specific syntax. There is a Vim help section on how to write them, see :h help-writing.\nThe VimTeX documentation style should be relatively clear, and it should be easy to see from the existing documentation how to write it. Still, here are some pointers:\n\nMax 80 columns per line\nUse the help tag system for pointers to other parts of the Vim documentation\nUse line of =s to separate sections\nUse line of -s to separate subsections\nThe section tags should be right aligned at the 79th column\nSections should be included and linked to from the table of contents\n\nVimTeX also has a high level code documentation mainly for developers. It should provide an overview of the VimTeX code and APIs and may help developers (and users) to understand the functionalities of the plugin a little bit faster."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/CONTRIBUTING.html#code-style",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/CONTRIBUTING.html#code-style",
    "title": "",
    "section": "1.3 Code style",
    "text": "1.3 Code style\nWhen submitting code for VimTeX, please adhere to the following standards:\n\nUse shiftwidth=2 - no tabs!\nWrite readable code\n\nBreak lines for readability\n\nLine should not be longer than 80 columns\n\nUse comments:\n\nFor complex code that is difficult to understand\nSimple code does not need comments\n\nUse (single) empty lines to separate logical blocks of code\nUse good variable names\n\nThe name should indicate what the variable is/does\nVariable names should be lower case\nLocal function variables should be preceded with l:\n\nPrefer single quoted strings\nSee also the Google vimscript style guide\n\nUse markers for folding\n\nI generally only fold functions, and I tend to group similar functions so that when folded, I get a nice structural overview of a file\nSee some of the files for examples of how I do this"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/CONTRIBUTING.html#running-tests",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/CONTRIBUTING.html#running-tests",
    "title": "",
    "section": "1.4 Running tests",
    "text": "1.4 Running tests\nNew functionality should be accompanied by tests. Tests can be run from the test folder with make. The tests currently only run on Linux, and the following utilities are required to run all the tests:\n\nwget\nchronic (from moreutils)\n\nThese utilities may not come with all Linux distributions and may need to be installed with your favorite package manager (e.g. yum, apt-get, or brew on Mac).\nBy default, the tests are run with the Neovim executable nvim. You can change the executable by setting the environment variable MYVIM before running. To run with vanilla vim, use MYVIM=\"vim -T dumb --not-a-term --noplugin -n\". Either export this in your shell, or prepend to make, that is, run MYVIM=\"vim -T dumb --not-a-term --noplugin -n\" make."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CONTRIBUTING.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CONTRIBUTING.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CONTRIBUTING.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CONTRIBUTING.html#installation",
    "title": "",
    "section": "2.1 1. Installation",
    "text": "2.1 1. Installation\n$ cd /path/to/vim-airline\n$ git submodule add https://github.com/thinca/vim-themis ./.themis-bin"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CONTRIBUTING.html#running-tests",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CONTRIBUTING.html#running-tests",
    "title": "",
    "section": "2.2 2. Running tests",
    "text": "2.2 2. Running tests\n$ ./path/to/themis-bin/bin/themis path/to/vim-airline/test --reporter spec"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/ultisnips/CONTRIBUTING.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/ultisnips/CONTRIBUTING.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/ultisnips/CONTRIBUTING.html#before-you-add-a-feature",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/ultisnips/CONTRIBUTING.html#before-you-add-a-feature",
    "title": "",
    "section": "1.1 Before you add a feature",
    "text": "1.1 Before you add a feature\nUltiSnips is so rich on features that it borders on feature creep. It is also an understaffed and undermaintained project. Since every feature needs to be maintained forever, we are very careful about new ones. Please create alignment before putting too much work into a novel idea. There are several ways of doing this:\n\nOpen an issue to discuss your idea.\nOpen a PR with a hackish or minimal implementation, i.e. no tests and no docs.\nWrite a short (&lt;= 1 page) design doc in a Gist or on Google Docs.\n\nShould there be agreement that your feature idea adds enough value to offset the maintenance burden, you can go ahead and implement it, including tests and documentation."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/ultisnips/CONTRIBUTING.html#debugging",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/ultisnips/CONTRIBUTING.html#debugging",
    "title": "",
    "section": "1.2 Debugging",
    "text": "1.2 Debugging\nUltiSnips embeds some remote debugging facilities in the UltiSnips.remote_pdb module. When enabled (by setting let g:UltiSnipsDebugServerEnable=1), whenever an exception is raised, vim will pause and you will be able to connect to the debug server with netcat or telnet. By default, the server listens on ‘localhost:8080’ (it can be changed).\nSee :help UltiSnips-Advanced-Debugging for more informations"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/ultisnips/CONTRIBUTING.html#testing",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/ultisnips/CONTRIBUTING.html#testing",
    "title": "",
    "section": "1.3 Testing",
    "text": "1.3 Testing\nUltiSnips has a rigorous test suite and every new feature or bug fix is expected to come with a new test. The overwhelming number of the &gt; 500 test cases are integration tests. Each test case sets up a full on-disk Vim configuration, including .vimrc, plugins and snippet definitions. We then simulate a user typing out a test case by programmatically sending keys into a tmux terminal that runs Vim.\nA test is a Python class in the test directory. Some simple examples are in test_Expand.py. Each class contains at least\n\na keys property that defines the key strokes taken,\na wanted golden string that defines the expected output of the snippet, and\na snippets list that defines the snippet that are in scope for the test case.\n\nEach test types out a given set of key strokes and compares the resulting text in the Vim buffer to wanted.\n\n1.3.1 Running the test suite.\nThe basic process of running the suite is simple:\n\nopen a terminal and start a new tmux session in the current directory named vim: tmux new -s vim. Do not type anything into the tmux session.\nIn a second terminal, run ./test_all.py.\n\nTo filter the tests that are executed, specify a pattern to be used to match the beginning of the test name. For instance, the following will execute all tests that start with SimpleExpand:\n$ ./test_all.py SimpleExpand\nCurrently, the test suite only runs under Linux and Mac, not under Windows. Contributions to make it work under Windows again would be very much appreciated.\n\n1.3.1.1 Running using docker.\nThe problem with running tests on the system directly is that the user’s environment can bleed into the test execution. To avoid this problem, we strongly suggest running the tests inside of Docker. It is useful to think of Docker as a lightweight virtual machine, i.e. a way of running exactly the same OS and userland configuration on any machine.\nUltiSnips comes with a Makefile that makes the use of Docker easy. First, build the image of the test environment (Vim 8.0, using Python 3):\n$ make image_repro\nNow we can launch the image in a container and run the tmux session for testing.\n$ make repro\n... now inside container\n# tmux new -s vim\nThe container will have the current directory mounted under /src/UltiSnips. This means all changes you make to UltiSnips’ sources will directly be represented inside the container and therefore available for testing.\nIn a second terminal we’ll use docker run to get another shell in the already running container. In this shell we can then trigger the test execution:\n$ make shell_in_repro\n... now inside container\n# ./test_all.py\n\n\n\n1.3.2 Enable the remote debug server\nThe test suite provides --remote-pdb* options equivalent to the config variables to enable the debug server during the test suite. Note that some tests may fail because the post-mortem will catch an expected exceptions and that these options are mainly useful for single test case debugging.\nCheck ./test_all.py --help for more informations."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/ultisnips/CONTRIBUTING.html#documenting",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/ultisnips/CONTRIBUTING.html#documenting",
    "title": "",
    "section": "1.4 Documenting",
    "text": "1.4 Documenting\nUser documentation goes into doc/UltiSnips.txt. Developer documentation should go into this file."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section",
    "title": "",
    "section": "1.1 0.60.3",
    "text": "1.1 0.60.3\n\nBug fixes and improvements\n\n[fish] Enable multiple history commands insertion (#4280) (@bitraid)\nwalker Append ‘/’ to directory entries on MSYS2 (#4281)\nTrim trailing whitespaces after processing ANSI sequences (#4282)\nRemove temp files before become when using --tmux option (#4283)\nFix condition for using item numlines cache (#4285) (@alex-huff)\nMake --accept-nth compatible with --select-1 (#4287)\nIncrease the query length limit from 300 to 1000 (#4292)\n[windows] Prevent fzf from consuming user input while paused (#4260)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-1",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-1",
    "title": "",
    "section": "1.2 0.60.2",
    "text": "1.2 0.60.2\n\nTemplate for --with-nth and --accept-nth now supports {n} which evaluates to the zero-based ordinal index of the item\nFixed a regression that caused the last field in the “nth” expression to be trimmed when a regular expression delimiter is used\n\nThanks to @phanen for the fix\n\nFixed ‘jump’ action when the pointer is an empty string"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-2",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-2",
    "title": "",
    "section": "1.3 0.60.1",
    "text": "1.3 0.60.1\n\nBug fixes and minor improvements\n\nBuilt-in walker now prints directory entries with a trailing slash\nFixed a bug causing unexpected behavior with fzf-tab. Please upgrade if you use it.\n\nThanks to @alexeisersun, @bitraid, @Lompik, and @fsc0 for the contributions"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-3",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-3",
    "title": "",
    "section": "1.4 0.60.0",
    "text": "1.4 0.60.0\nRelease highlights: https://junegunn.github.io/fzf/releases/0.60.0/\n\nAdded --accept-nth for choosing output fields\nps -ef | fzf --multi --header-lines 1 | awk '{print $2}'\n# Becomes\nps -ef | fzf --multi --header-lines 1 --accept-nth 2\n\ngit branch | fzf | cut -c3-\n# Can be rewritten as\ngit branch | fzf --accept-nth -1\n--accept-nth and --with-nth now support a template that includes multiple field index expressions in curly braces\necho foo,bar,baz | fzf --delimiter , --accept-nth '{1}, {3}, {2}'\n  # foo, baz, bar\n\necho foo,bar,baz | fzf --delimiter , --with-nth '{1},{3},{2},{1..2}'\n  # foo,baz,bar,foo,bar\nAdded exclude and exclude-multi actions for dynamically excluding items\nseq 100 | fzf --bind 'ctrl-x:exclude'\n\n# 'exclude-multi' will exclude the selected items or the current item\nseq 100 | fzf --multi --bind 'ctrl-x:exclude-multi'\nPreview window now prints wrap indicator when wrapping is enabled\nseq 100 | xargs | fzf --wrap --preview 'echo {}' --preview-window wrap\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-4",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-4",
    "title": "",
    "section": "1.5 0.59.0",
    "text": "1.5 0.59.0\nRelease highlights: https://junegunn.github.io/fzf/releases/0.59.0/\n\nPrioritizing file name matches (#4192)\n\nAdded a new tiebreak option pathname for prioritizing file name matches\n--scheme=path now sets --tiebreak=pathname,length\nfzf will automatically choose path scheme\n\nwhen the input is a TTY device, where fzf would start its built-in walker or run $FZF_DEFAULT_COMMAND which is usually a command for listing files,\nbut not when reload or transform action is bound to start event, because in that case, fzf can’t be sure of the input type.\n\n\nAdded --header-lines-border to display header from --header-lines with a separate border\n# Use --header-lines-border to separate two headers\nps -ef | fzf --style full --layout reverse --header-lines 1 \\\n             --bind 'ctrl-r:reload(ps -ef)' --header 'Press CTRL-R to reload' \\\n             --header-lines-border bottom --no-list-border\nclick-header event now sets $FZF_CLICK_HEADER_WORD and $FZF_CLICK_HEADER_NTH. You can use them to implement a clickable header for changing the search scope using the new transform-nth action.\n# Click on the header line to limit search scope\nps -ef | fzf --style full --layout reverse --header-lines 1 \\\n             --header-lines-border bottom --no-list-border \\\n             --color fg:dim,nth:regular \\\n             --bind 'click-header:transform-nth(\n                       echo $FZF_CLICK_HEADER_NTH\n                     )+transform-prompt(\n                       echo \"$FZF_CLICK_HEADER_WORD&gt; \"\n                     )'\n\n$FZF_KEY was updated to expose the type of the click. e.g. click, ctrl-click, etc. You can use it to implement a more sophisticated behavior.\nkill completion for bash and zsh were updated to use this feature\n\nAdded --no-input option to completely disable and hide the input section\n# Click header to trigger search\nfzf --header '[src] [test]' --no-input --layout reverse \\\n    --header-border bottom --input-border \\\n    --bind 'click-header:transform-search:echo ${FZF_CLICK_HEADER_WORD:1:-1}'\n\n# Vim-like mode switch\nfzf --layout reverse-list --no-input \\\n    --bind 'j:down,k:up,/:show-input+unbind(j,k,/)' \\\n    --bind 'enter,esc,ctrl-c:transform:\n      if [[ $FZF_INPUT_STATE = enabled ]]; then\n        echo \"rebind(j,k,/)+hide-input\"\n      elif [[ $FZF_KEY = enter ]]; then\n        echo accept\n      else\n        echo abort\n      fi\n    '\n\nYou can later show the input section using show-input or toggle-input action, and hide it again using hide-input, or toggle-input.\n\nExtended {q} placeholder to support ranges. e.g. {q:1}, {q:2..}, etc.\nAdded search(...) and transform-search(...) action to trigger an fzf search with an arbitrary query string. This can be used to extend the search syntax of fzf. In the following example, fzf will use the first word of the query to trigger ripgrep search, and use the rest of the query to perform fzf search within the result.\nexport TEMP=$(mktemp -u)\ntrap 'rm -f \"$TEMP\"' EXIT\n\nTRANSFORMER='\n  rg_pat={q:1}      # The first word is passed to ripgrep\n  fzf_pat={q:2..}   # The rest are passed to fzf\n\n  if ! [[ -r \"$TEMP\" ]] || [[ $rg_pat != $(cat \"$TEMP\") ]]; then\n    echo \"$rg_pat\" &gt; \"$TEMP\"\n    printf \"reload:sleep 0.1; rg --column --line-number --no-heading --color=always --smart-case %q || true\" \"$rg_pat\"\n  fi\n  echo \"+search:$fzf_pat\"\n'\nfzf --ansi --disabled \\\n  --with-shell 'bash -c' \\\n  --bind \"start,change:transform:$TRANSFORMER\"\nYou can now bind actions to multiple keys and events at once by writing a comma-separated list of keys and events before the colon\n# Load 'ps -ef' output on start and reload it on CTRL-R\nfzf --bind 'start,ctrl-r:reload:ps -ef'\n--min-height option now takes a number followed by +, which tells fzf to show at least that many items in the list section. The default value is now changed to 10+.\n# You will only see the input section which takes 3 lines\nfzf --style=full --height 1% --min-height 3\n\n# You will see 3 items in the list section\nfzf --style full --height 1% --min-height 3+\n\nShell integration scripts were updated to use --min-height 20+ by default\n\n--header-lines will be displayed at the top in reverse-list layout\nAdded bell action to ring the terminal bell\n# Press CTRL-Y to copy the current line to the clipboard and ring the bell\nfzf --bind 'ctrl-y:execute-silent(echo -n {} | pbcopy)+bell'\nAdded toggle-bind action\nBug fixes and improvements\nFixed fish script to support fish 3.1.2 or later (@bitraid)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-5",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-5",
    "title": "",
    "section": "1.6 0.58.0",
    "text": "1.6 0.58.0\nRelease highlights: https://junegunn.github.io/fzf/releases/0.58.0/\nThis version introduces three new border types, --list-border, --input-border, and --header-border, offering much greater flexibility for customizing the user interface.\n\nAlso, fzf now offers “style presets” for quick customization, which can be activated using the --style option.\n\n\n\n\n\n\n\nPreset\nScreenshot\n\n\n\n\ndefault\n\n\n\nfull\n\n\n\nminimal\n\n\n\n\n\nStyle presets (#4160)\n\n--style=full[:BORDER_STYLE]\n--style=default\n--style=minimal\n\nBorder and label for the list section (#4148)\n\nOptions\n\n--list-border[=STYLE]\n--list-label=LABEL\n--list-label-pos=COL[:bottom]\n\nColors\n\nlist-fg\nlist-bg\nlist-border\nlist-label\n\nActions\n\nchange-list-label\ntransform-list-label\n\n\nBorder and label for the input section (prompt line and info line) (#4154)\n\nOptions\n\n--input-border[=STYLE]\n--input-label=LABEL\n--input-label-pos=COL[:bottom]\n\nColors\n\ninput-fg (query)\ninput-bg\ninput-border\ninput-label\n\nActions\n\nchange-input-label\ntransform-input-label\n\n\nBorder and label for the header section (#4159)\n\nOptions\n\n--header-border[=STYLE]\n--header-label=LABEL\n--header-label-pos=COL[:bottom]\n\nColors\n\nheader-fg (header)\nheader-bg\nheader-border\nheader-label\n\nActions\n\nchange-header-label\ntransform-header-label\n\n\nAdded --preview-border[=STYLE] as short for --preview-window=border[-STYLE]\nAdded new preview border style line which draws a single separator line between the preview window and the rest of the interface\nfzf will now render a dashed line (┈┈) in each --gap for better visual separation.\n# All bash/zsh functions, highlighted\ndeclare -f |\n  perl -0 -pe 's/^}\\n/}\\0/gm' |\n  bat --plain --language bash --color always |\n  fzf --read0 --ansi --layout reverse --multi --highlight-line --gap\n\nYou can customize the line using --gap-line[=STR].\n\nYou can specify border-native to --tmux so that native tmux border is used instead of --border. This can be useful if you start a different program from inside the popup.\nfzf --tmux border-native --bind 'enter:execute:less {}'\nAdded toggle-multi-line action\nAdded toggle-hscroll action\nAdded change-nth action for dynamically changing the value of the --nth option\n# Start with --nth 1, then 2, then 3, then back to the default, 1\necho 'foo foobar foobarbaz' | fzf --bind 'space:change-nth(2|3|)' --nth 1 -q foo\n--nth parts of each line can now be rendered in a different text style\n# nth in a different style\nls -al | fzf --nth -1 --color nth:italic\nls -al | fzf --nth -1 --color nth:reverse\nls -al | fzf --nth -1 --color nth:reverse:bold\n\n# Dim the other parts\nls -al | fzf --nth -1 --color nth:regular,fg:dim\n\n# With 'change-nth'. The current nth option is exported as $FZF_NTH.\nps -ef | fzf --reverse --header-lines 1 --header-border bottom --input-border \\\n           --color nth:regular,fg:dim \\\n           --bind 'ctrl-n:change-nth(8..|1|2|3|4|5|6|7|)' \\\n           --bind 'result:transform-prompt:echo \"${FZF_NTH}&gt; \"'\nA single-character delimiter is now treated as a plain string delimiter rather than a regular expression delimiter, even if it’s a regular expression meta-character.\n\nThis means you can just write --delimiter '|' instead of escaping it as --delimiter '\\|'\n\nBug fixes\nBug fixes and improvements in fish scripts (thanks to @bitraid)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-6",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-6",
    "title": "",
    "section": "1.7 0.57.0",
    "text": "1.7 0.57.0\n\nYou can now resize the preview window by dragging the border\nBuilt-in walker improvements\n\n--walker-root can take multiple directory arguments. e.g. --walker-root include src lib\n--walker-skip can handle multi-component patterns. e.g. --walker-skip target/build\n\nRemoved long processing delay when displaying images in the preview window\nFZF_PREVIEW_* environment variables are exported to all child processes (#4098)\nBug fixes in fish scripts"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-7",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-7",
    "title": "",
    "section": "1.8 0.56.3",
    "text": "1.8 0.56.3\n\nBug fixes in zsh scripts\n\nfix(zsh): handle backtick trigger edge case (#4090)\nrevert(zsh): remove ‘fc -RI’ call in the history widget (#4093)\nThanks to @LangLangBart for the contributions"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-8",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-8",
    "title": "",
    "section": "1.9 0.56.2",
    "text": "1.9 0.56.2\n\nBug fixes\n\nFixed abnormal scrolling behavior when --wrap is set (#4083)\n[zsh] Fixed warning message when ksh_arrays is set (#4084)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-9",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-9",
    "title": "",
    "section": "1.10 0.56.1",
    "text": "1.10 0.56.1\n\nBug fixes and improvements\n\nFixed a race condition which would cause fzf to present stale results after reload (#4070)\npage-up and page-down actions now work correctly with multi-line items (#4069)\n{n} is allowed in SCROLL expression in --preview-window (#4079)\n[zsh] Fixed regression in history loading with shared option (#4071)\n[zsh] Better command extraction in zsh completion (#4082)\n\nThanks to @LangLangBart, @jaydee-coder, @alex-huff, and @vejkse for the contributions"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-10",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-10",
    "title": "",
    "section": "1.11 0.56.0",
    "text": "1.11 0.56.0\n\nAdded --gap[=N] option to display empty lines between items.\n\nThis can be useful to visually separate adjacent multi-line items. sh     # All bash functions, highlighted     declare -f | perl -0777 -pe 's/^}\\n/}\\0/gm' |       bat --plain --language bash --color always |       fzf --read0 --ansi --reverse --multi --highlight-line --gap\nOr just to make the list easier to read. For single-line items, you probably want to set --color gutter:-1 as well to hide the gutter. sh     fzf --info inline-right --gap --color gutter:-1\n\nAdded noinfo option to --preview-window to hide the scroll indicator in the preview window\nBug fixes\n\nThanks to @LangLangBart, @akinomyoga, and @charlievieth for fixing the bugs"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-11",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-11",
    "title": "",
    "section": "1.12 0.55.0",
    "text": "1.12 0.55.0\nRelease highlights: https://junegunn.github.io/fzf/releases/0.55.0/\n\nAdded exact-boundary-match type to the search syntax. When a search term is single-quoted, fzf will search for the exact occurrences of the string with both ends at word boundaries.\nfzf --query \"'here'\" &lt;&lt; EOF\ncome here\nnot there\nEOF\n[bash] Fuzzy path completion is enabled for all commands\n\n\nIf the default completion is not already set\n\n\nAnd if the current bash supports complete -D option\n\nHowever, fuzzy completion for some commands can be “dynamically” disabled by the dynamic completion loader\nSee the comment in __fzf_default_completion function for more information\n\nComments are now allowed in $FZF_DEFAULT_OPTS and $FZF_DEFAULT_OPTS_FILE\nexport FZF_DEFAULT_OPTS='\n  # Layout options\n  --layout=reverse\n  --info=inline-right   # Show info on the right side of the prompt line\n  # ...\n'\nHyperlinks (OSC 8) are now supported in the preview window and in the main window\nprintf '&lt;&lt; \\e]8;;http://github.com/junegunn/fzf\\e\\\\Link to \\e[32mfz\\e[0mf\\e]8;;\\e\\\\ &gt;&gt;' | fzf --ansi\n\nfzf --preview \"printf '&lt;&lt; \\e]8;;http://github.com/junegunn/fzf\\e\\\\Link to \\e[32mfz\\e[0mf\\e]8;;\\e\\\\ &gt;&gt;'\"\nThe default --ellipsis is now ·· instead of ...\n[vim] A spec can have exit callback that is called with the exit status of fzf\n\nThis can be used to clean up temporary resources or restore the original state when fzf is closed without a selection\n\nFixed --tmux bottom when the status line is not at the bottom\nFixed extra scroll offset in multi-line mode (--read0 or --wrap)\nAdded fallback ps command for kill completion on Cygwin"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-12",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-12",
    "title": "",
    "section": "1.13 0.54.3",
    "text": "1.13 0.54.3\n\nFixed incompatibility of adaptive height specification and ‘start:reload’\n# A regression in 0.54.0 would cause this to fail\nfzf --height '~100%' --bind 'start:reload:seq 10'\nEnvironment variables are now available to $FZF_DEFAULT_COMMAND\nFZF_DEFAULT_COMMAND='echo $FZF_QUERY' fzf --query foo"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-13",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-13",
    "title": "",
    "section": "1.14 0.54.2",
    "text": "1.14 0.54.2\n\nFixed incorrect syntax highlighting of truncated multi-line entries\nUpdated GoReleaser to 2.1.0 to simplify notarization of macOS binaries\n\nmacOS archives will be in tar.gz format instead of zip format since we no longer notarize the zip files but binaries\n\n(Windows) Reverted a mintty fix in 0.54.0\n\nAs a result, mouse may not work on mintty in fullscreen mode. However, fzf will correctly read non-ASCII input in fullscreen mode (--no-height).\nfzf unfortunately cannot read non-ASCII input when not in fullscreen mode on Windows. So if you need to input non-ASCII characters, add --no-height to your $FZF_DEFAULT_OPTS.\nAny help in fixing this issue will be appreciated (#3799, #3847)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-14",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-14",
    "title": "",
    "section": "1.15 0.54.1",
    "text": "1.15 0.54.1\n\nUpdated fastwalk dependency for built-in directory walker\n\nfastwalk: add optional sorting and improve documentation\nfastwalk: only check if MSYSTEM is set during MSYS/MSYS2\nThanks to @charlievieth\n\nReverted ALT-C binding of fish to use cd instead of builtin cd\n\nbuiltin cd was introduced to work around a bug of cd coming from zoxide init --cmd cd fish where it cannot handle -- argument.\nHowever, the default cd of fish is actually a wrapper function for supporting cd -, so we want to use it instead.\nSee #3928 for more information and consider helping zoxide fix the bug."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-15",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-15",
    "title": "",
    "section": "1.16 0.54.0",
    "text": "1.16 0.54.0\nRelease highlights: https://junegunn.github.io/fzf/releases/0.54.0/\n\nImplemented line wrap of long items\n\n--wrap option enables line wrap\n--wrap-sign customizes the sign for wrapped lines (default: ↳)\ntoggle-wrap action toggles line wrap sh     history | fzf --tac --wrap --bind 'ctrl-/:toggle-wrap' --wrap-sign $'\\t↳ '\nfzf by default binds CTRL-/ and ALT-/ to toggle-wrap\n\nUpdated shell integration scripts to leverage line wrap\n\nCTRL-R binding includes --wrap-sign $'\\t↳ ' to indent wrapped lines\nkill ** completion uses --wrap to show the whole line by default instead of showing it in the preview window\n\nAdded --info-command option for customizing the info line\n# Prepend the current cursor position in yellow\nfzf --info-command='echo -e \"\\x1b[33;1m$FZF_POS\\x1b[m/$FZF_INFO 💛\"'\n\n$FZF_INFO is set to the original info text\nANSI color codes are supported\n\nPointer and marker signs can be set to empty strings\n# Minimal style\nfzf --pointer '' --marker '' --prompt '' --info hidden\nBetter cache management and improved rendering for --tail\nImproved --sync behavior\n\nWhen --sync is provided, fzf will not render the interface until the initial filtering and the associated actions (bound to any of start, load, result, or focus) are complete. sh     # fzf will not render intermediate states     (sleep 1; seq 1000000; sleep 1) |       fzf --sync --query 5 --listen --bind start:up,load:up,result:up,focus:change-header:Ready\n\nGET endpoint is now available from execute and transform actions (it used to timeout due to lock conflict)\nfzf --listen --sync --bind 'focus:transform-header:curl -s localhost:$FZF_PORT?limit=0 | jq .'\nAdded offset-middle action to place the current item is in the middle of the screen\nfzf will not start the initial reader when reload or reload-sync is bound to start event. fzf &lt; /dev/null or : | fzf are no longer required and extraneous load event will not fire due to the empty list.\n# Now this will work as expected. Previously, this would print an invalid header line.\n# `fzf &lt; /dev/null` or `: | fzf` would fix the problem, but then an extraneous\n# `load` event would fire and the header would be prematurely updated.\nfzf --header 'Loading ...' --header-lines 1 \\\n    --bind 'start:reload:sleep 1; ps -ef' \\\n    --bind 'load:change-header:Loaded!'\nFixed mouse support on Windows\nFixed crash when using --tiebreak=end with very long items\nzsh 5.0 compatibility (thanks to @LangLangBart)\nFixed --walker-skip to also skip symlinks to directories\nFixed result event not fired when input stream is not complete\nNew tags will have v prefix so that they are available on https://proxy.golang.org/"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-16",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-16",
    "title": "",
    "section": "1.17 0.53.0",
    "text": "1.17 0.53.0\nRelease highlights: https://junegunn.github.io/fzf/releases/0.53.0/\n\nMulti-line display\n\nSee Processing multi-line items\nfzf can now display multi-line items\n# All bash functions, highlighted\ndeclare -f | perl -0777 -pe 's/^}\\n/}\\0/gm' |\n  bat --plain --language bash --color always |\n  fzf --read0 --ansi --reverse --multi --highlight-line\n\n# Ripgrep multi-line output\nrg --pretty bash | perl -0777 -pe 's/\\n\\n/\\n\\0/gm' |\n  fzf --read0 --ansi --multi --highlight-line --reverse --tmux 70%\n\nTo disable multi-line display, use --no-multi-line\n\nCTRL-R bindings of bash, zsh, and fish have been updated to leverage multi-line display\nThe default --pointer and --marker have been changed from &gt; to Unicode bar characters as they look better with multi-line items\nAdded --marker-multi-line to customize the select marker for multi-line entries with the default set to ╻┃╹ ╻First line     ┃...     ╹Last line\n\nNative tmux integration\n\nAdded --tmux option to replace fzf-tmux script and simplify distribution\n# --tmux [center|top|bottom|left|right][,SIZE[%]][,SIZE[%]]\n# Center, 100% width and 70% height\nfzf --tmux 100%,70% --border horizontal --padding 1,2\n\n# Left, 30% width\nfzf --tmux left,30%\n\n# Bottom, 50% height\nfzf --tmux bottom,50%\n\nTo keep the implementation simple, it only uses popups. You need tmux 3.3 or later.\n\nTo use --tmux in Vim plugin: vim     let g:fzf_layout = { 'tmux': '100%,70%' }\n\nAdded support for endless input streams\n\nSee Browsing log stream with fzf\nAdded --tail=NUM option to limit the number of items to keep in memory. This is useful when you want to browse an endless stream of data (e.g. log stream) with fzf while limiting memory usage. sh     # Interactive filtering of a log stream     tail -f *.log | fzf --tail 100000 --tac --no-sort --exact\n\nBetter Windows Support\n\nfzf now works on Git bash (mintty) out of the box via winpty integration\nMany fixes and improvements for Windows\n\nman page is now embedded in the binary; fzf --man to see it\nChanged the default --scroll-off to 3, as we think it’s a better default\nProcess started by execute action now directly writes to and reads from /dev/tty. Manual /dev/tty redirection for interactive programs is no longer required.\n# Vim will work fine without /dev/tty redirection\nls | fzf --bind 'space:execute:vim {}' &gt; selected\nAdded print(...) action to queue an arbitrary string to be printed on exit. This was mainly added to work around the limitation of --expect where it’s not compatible with --bind on the same key and it would ignore other actions bound to it.\n# This doesn't work as expected because --expect is not compatible with --bind\nfzf --multi --expect ctrl-y --bind 'ctrl-y:select-all'\n\n# This is something you can do instead\nfzf --multi --bind 'enter:print()+accept,ctrl-y:select-all+print(ctrl-y)+accept'\n\nWe also considered making them compatible, but realized that some users may have been relying on the current behavior.\n\nNO_COLOR environment variable is now respected. If the variable is set, fzf defaults to --no-color unless otherwise specified."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-17",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-17",
    "title": "",
    "section": "1.18 0.52.1",
    "text": "1.18 0.52.1\n\nFixed a critical bug in the Windows version\n\nWindows users are strongly encouraged to upgrade to this version"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-18",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-18",
    "title": "",
    "section": "1.19 0.52.0",
    "text": "1.19 0.52.0\n\nAdded --highlight-line to highlight the whole current line (à la set cursorline of Vim)\nAdded color names for selected lines: selected-fg, selected-bg, and selected-hl\nfzf --border --multi --info inline-right --layout reverse --marker ▏ --pointer ▌ --prompt '▌ '  \\\n    --highlight-line --color gutter:-1,selected-bg:238,selected-fg:146,current-fg:189\nAdded click-header event that is triggered when the header section is clicked. When the event is triggered, $FZF_CLICK_HEADER_COLUMN and $FZF_CLICK_HEADER_LINE are set.\nfd --type f |\n  fzf --header $'[Files] [Directories]' --header-first \\\n      --bind 'click-header:transform:\n        (( FZF_CLICK_HEADER_COLUMN &lt;= 7 )) && echo \"reload(fd --type f)\"\n        (( FZF_CLICK_HEADER_COLUMN &gt;= 9 )) && echo \"reload(fd --type d)\"\n      '\nAdd $FZF_COMPLETION_{DIR,PATH}_OPTS for separately customizing the behavior of fuzzy completion\n# Set --walker options without 'follow' not to follow symbolic links\nFZF_COMPLETION_PATH_OPTS=\"--walker=file,dir,hidden\"\nFZF_COMPLETION_DIR_OPTS=\"--walker=dir,hidden\"\nFixed Windows argument escaping\nBug fixes and improvements\nThe code was heavily refactored to allow using fzf as a library in Go programs. The API is still experimental and subject to change.\n\nhttps://gist.github.com/junegunn/193990b65be48a38aac6ac49d5669170"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-19",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-19",
    "title": "",
    "section": "1.20 0.51.0",
    "text": "1.20 0.51.0\n\nAdded a new environment variable $FZF_POS exported to the child processes. It’s the vertical position of the cursor in the list starting from 1.\n# Toggle selection to the top or to the bottom\nseq 30 | fzf --multi --bind 'load:pos(10)' \\\n  --bind 'shift-up:transform:for _ in $(seq $FZF_POS $FZF_MATCH_COUNT); do echo -n +toggle+up; done' \\\n  --bind 'shift-down:transform:for _ in $(seq 1 $FZF_POS); do echo -n +toggle+down; done'\nAdded --with-shell option to start child processes with a custom shell command and flags\ngem list | fzf --with-shell 'ruby -e' \\\n  --preview 'pp Gem::Specification.find_by_name({1})' \\\n  --bind 'ctrl-o:execute-silent:\n      spec = Gem::Specification.find_by_name({1})\n      [spec.homepage, *spec.metadata.filter { _1.end_with?(\"uri\") }.values].uniq.each do\n        system \"open\", _1\n      end\n  '\nAdded change-multi action for dynamically changing --multi option\n\nchange-multi - enable multi-select mode with no limit\nchange-multi(NUM) - enable multi-select mode with a limit\nchange-multi(0) - disable multi-select mode\n\nWindows improvements\n\nbecome action is now supported on Windows\n\nUnlike in *nix, this does not use execve(2). Instead it spawns a new process and waits for it to finish, so the exact behavior may differ.\n\nFixed argument escaping for Windows cmd.exe. No redundant escaping of backslashes.\n\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-20",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-20",
    "title": "",
    "section": "1.21 0.50.0",
    "text": "1.21 0.50.0\n\nSearch performance optimization. You can observe 50%+ improvement in some scenarios.\n$ rg --line-number --no-heading --smart-case . &gt; $DATA\n\n$ wc &lt; $DATA\n 5520118 26862362 897487793\n\n$ hyperfine -w 1 -L bin fzf-0.49.0,fzf-7ce6452,fzf-a5447b8,fzf '{bin} --filter \"///\" &lt; $DATA | head -30'\nSummary\n  fzf --filter \"///\" &lt; $DATA | head -30 ran\n    1.16 ± 0.03 times faster than fzf-a5447b8 --filter \"///\" &lt; $DATA | head -30\n    1.23 ± 0.03 times faster than fzf-7ce6452 --filter \"///\" &lt; $DATA | head -30\n    1.52 ± 0.03 times faster than fzf-0.49.0 --filter \"///\" &lt; $DATA | head -30\nAdded jump and jump-cancel events that are triggered when leaving jump mode\n# Default behavior\nfzf --bind space:jump\n\n# Same as jump-accept action\nfzf --bind space:jump,jump:accept\n\n# Accept on jump, abort on cancel\nfzf --bind space:jump,jump:accept,jump-cancel:abort\n\n# Change header on jump-cancel\nfzf --bind 'space:change-header(Type jump label)+jump,jump-cancel:change-header:Jump cancelled'\nAdded a new environment variable $FZF_KEY exported to the child processes. It’s the name of the last key pressed.\nfzf --bind 'space:jump,jump:accept,jump-cancel:transform:[[ $FZF_KEY =~ ctrl-c ]] && echo abort'\nfzf can be built with profiling options. See BUILD.md for more information.\nBug fixes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-21",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-21",
    "title": "",
    "section": "1.22 0.49.0",
    "text": "1.22 0.49.0\n\nIngestion performance improved by around 40% (more or less depending on options)\n--info=hidden and --info=inline-right will no longer hide the horizontal separator by default. This gives you more flexibility in customizing the layout. sh     fzf --border --info=inline-right     fzf --border --info=inline-right --separator ═     fzf --border --info=inline-right --no-separator     fzf --border --info=hidden     fzf --border --info=hidden --separator ━     fzf --border --info=hidden --no-separator\nAdded two environment variables exported to the child processes\n\nFZF_PREVIEW_LABEL\nFZF_BORDER_LABEL\n\n# Use the current value of $FZF_PREVIEW_LABEL to determine which actions to perform\ngit ls-files |\n  fzf --header 'Press CTRL-P to change preview mode' \\\n      --bind='ctrl-p:transform:[[ $FZF_PREVIEW_LABEL =~ cat ]] \\\n      && echo \"change-preview(git log --color=always \\{})+change-preview-label([[ log ]])\" \\\n      || echo \"change-preview(bat --color=always \\{})+change-preview-label([[ cat ]])\"'\nRenamed track action to track-current to highlight the difference between the global tracking state set by --track and a one-off tracking action\n\ntrack is still available as an alias\n\nAdded untrack-current and toggle-track-current actions\n\n*-current actions are no-op when the global tracking state is set\n\nBug fixes and minor improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-22",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-22",
    "title": "",
    "section": "1.23 0.48.1",
    "text": "1.23 0.48.1\n\nCTRL-T and ALT-C bindings can be disabled by setting FZF_CTRL_T_COMMAND and FZF_ALT_C_COMMAND to empty strings respectively when sourcing the script ```sh # bash FZF_CTRL_T_COMMAND= FZF_ALT_C_COMMAND= eval “$(fzf –bash)”\n# zsh FZF_CTRL_T_COMMAND= FZF_ALT_C_COMMAND= eval “$(fzf –zsh)”\n# fish fzf –fish | FZF_CTRL_T_COMMAND= FZF_ALT_C_COMMAND= source ```\n\nSetting the variables after sourcing the script will have no effect\n\nBug fixes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-23",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-23",
    "title": "",
    "section": "1.24 0.48.0",
    "text": "1.24 0.48.0\n\nShell integration scripts are now embedded in the fzf binary. This simplifies the distribution, and the users are less likely to have problems caused by using incompatible scripts and binaries.\n\nbash sh     # Set up fzf key bindings and fuzzy completion     eval \"$(fzf --bash)\"\nzsh sh     # Set up fzf key bindings and fuzzy completion     eval \"$(fzf --zsh)\"\nfish fish     # Set up fzf key bindings     fzf --fish | source\n\nAdded options for customizing the behavior of the built-in walker | Option | Description | Default | | — | — | — | | --walker=OPTS | Walker options ([file][,dir][,follow][,hidden]) | file,follow,hidden | | --walker-root=DIR | Root directory from which to start walker | . | | --walker-skip=DIRS | Comma-separated list of directory names to skip | .git,node_modules |\n\nExamples ```sh # Built-in walker is only used by standalone fzf when $FZF_DEFAULT_COMMAND is not set unset FZF_DEFAULT_COMMAND\nfzf # default: –walker=file,follow,hidden –walker-root=. –walker-skip=.git,node_modules fzf –walker=file,dir,hidden,follow –walker-skip=.git,node_modules,target\n# Walker options in $FZF_DEFAULT_OPTS export FZF_DEFAULT_OPTS=“–walker=file,dir,hidden,follow –walker-skip=.git,node_modules,target” fzf\n# Reading from STDIN; –walker is ignored seq 100 | fzf –walker=dir\n# Reading from $FZF_DEFAULT_COMMAND; –walker is ignored export FZF_DEFAULT_COMMAND=‘seq 100’ fzf –walker=dir ```\n\nShell integration scripts have been updated to use the built-in walker with these new options and they are now much faster out of the box."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-24",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-24",
    "title": "",
    "section": "1.25 0.47.0",
    "text": "1.25 0.47.0\n\nReplaced “the default find command” with a built-in directory walker to simplify the code and to achieve better performance and consistent behavior across platforms. This doesn’t affect you if you have $FZF_DEFAULT_COMMAND set.\n\nBreaking changes:\n\nUnlike the previous “find” command, the new traversal code will list hidden files, but hidden directories will still be ignored\nNo filtering of devtmpfs or proc types\nTraversal is parallelized, so the order of the entries will be different each time\n\nYou may wonder why fzf implements directory walker anyway when it’s a filter program following the Unix philosophy. But fzf has had the walker code for years to tackle the performance problem on Windows. And I decided to use the same approach on different platforms as well for the benefits listed above.\nBuilt-in walker is using the excellent charlievieth/fastwalk library, which easily outperforms its competitors and supports safely following symlinks.\n\nAdded $FZF_DEFAULT_OPTS_FILE to allow managing default options in a file\n\nSee #3618\nOption precedence from lower to higher\n\nOptions read from $FZF_DEFAULT_OPTS_FILE\nOptions from $FZF_DEFAULT_OPTS\nOptions from command-line arguments\n\n\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-25",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-25",
    "title": "",
    "section": "1.26 0.46.1",
    "text": "1.26 0.46.1\n\nBug fixes and improvements\nFixed Windows binaries\nDowngraded Go version to 1.20 to support older versions of Windows\n\nhttps://tip.golang.org/doc/go1.21#windows\n\nUpdated rivo/uniseg dependency to v0.4.6"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-26",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-26",
    "title": "",
    "section": "1.27 0.46.0",
    "text": "1.27 0.46.0\n\nAdded two new events\n\nresult - triggered when the filtering for the current query is complete and the result list is ready\nresize - triggered when the terminal size is changed\n\nfzf now exports the following environment variables to the child processes | Variable | Description | | — | — | | FZF_LINES | Number of lines fzf takes up excluding padding and margin | | FZF_COLUMNS | Number of columns fzf takes up excluding padding and margin | | FZF_TOTAL_COUNT | Total number of items | | FZF_MATCH_COUNT | Number of matched items | | FZF_SELECT_COUNT | Number of selected items | | FZF_QUERY | Current query string | | FZF_PROMPT | Prompt string | | FZF_ACTION | The name of the last action performed |\n\nThis allows you to write sophisticated transformations like so\n# Script to dynamically resize the preview window\ntransformer='\n  # 1 line for info, another for prompt, and 2 more lines for preview window border\n  lines=$(( FZF_LINES - FZF_MATCH_COUNT - 4 ))\n  if [[ $FZF_MATCH_COUNT -eq 0 ]]; then\n    echo \"change-preview-window:hidden\"\n  elif [[ $lines -gt 3 ]]; then\n    echo \"change-preview-window:$lines\"\n  elif [[ $FZF_PREVIEW_LINES -ne 3 ]]; then\n    echo \"change-preview-window:3\"\n  fi\n'\nseq 10000 | fzf --preview 'seq {} 10000' --preview-window up \\\n                --bind \"result:transform:$transformer\" \\\n                --bind \"resize:transform:$transformer\"\nAnd we’re phasing out {fzf:prompt} and {fzf:action}\n\nChanged mattn/go-runewidth dependency to rivo/uniseg for accurate results\n\nSet --ambidouble if your terminal displays ambiguous width characters (e.g. box-drawing characters for borders) as 2 columns\nRUNEWIDTH_EASTASIAN=1 is still respected for backward compatibility, but it’s recommended that you use this new option instead\n\nBug fixes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-27",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-27",
    "title": "",
    "section": "1.28 0.45.0",
    "text": "1.28 0.45.0\n\nAdded transform action to conditionally perform a series of actions\n# Disallow selecting an empty line\necho -e \"1. Hello\\n2. Goodbye\\n\\n3. Exit\" |\n  fzf --height '~100%' --reverse --header 'Select one' \\\n      --bind 'enter:transform:[[ -n {} ]] && echo accept || echo \"change-header:Invalid selection\"'\n\n# Move cursor past the empty line\necho -e \"1. Hello\\n2. Goodbye\\n\\n3. Exit\" |\n  fzf --height '~100%' --reverse --header 'Select one' \\\n      --bind 'enter:transform:[[ -n {} ]] && echo accept || echo \"change-header:Invalid selection\"' \\\n      --bind 'focus:transform:[[ -n {} ]] && exit; [[ {fzf:action} =~ up$ ]] && echo up || echo down'\n\n# A single key binding to toggle between modes\nfd --type file |\n  fzf --prompt 'Files&gt; ' \\\n      --header 'CTRL-T: Switch between Files/Directories' \\\n      --bind 'ctrl-t:transform:[[ ! {fzf:prompt} =~ Files ]] &&\n                echo \"change-prompt(Files&gt; )+reload(fd --type file)\" ||\n                echo \"change-prompt(Directories&gt; )+reload(fd --type directory)\"'\nAdded placeholder expressions\n\n{fzf:action} - The name of the last action performed\n{fzf:prompt} - Prompt string (including ANSI color codes)\n{fzf:query} - Synonym for {q}\n\nAdded support for negative height\n# Terminal height minus 1, so you can still see the command line\nfzf --height=-1\n\nThis handles a terminal resize better than --height=$(($(tput lines) - 1))\n\nAdded accept-or-print-query action that acts like accept but prints the current query when there’s no match for the query\n# You can make CTRL-R paste the current query when there's no match\nexport FZF_CTRL_R_OPTS='--bind enter:accept-or-print-query'\n\nNote that there are alternative ways to implement the same strategy\n# 'become' is apparently more versatile but it's not available on Windows.\nexport FZF_CTRL_R_OPTS='--bind \"enter:become:if [ -z {} ]; then echo {q}; else echo {}; fi\"'\n\n# Using the new 'transform' action\nexport FZF_CTRL_R_OPTS='--bind \"enter:transform:[ -z {} ] && echo print-query || echo accept\"'\n\nAdded show-header and hide-header actions\nBug fixes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-28",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-28",
    "title": "",
    "section": "1.29 0.44.1",
    "text": "1.29 0.44.1\n\nFixed crash when preview window is hidden on focus event"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-29",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-29",
    "title": "",
    "section": "1.30 0.44.0",
    "text": "1.30 0.44.0\n\n(Experimental) Sixel image support in preview window (not available on Windows)\n\nbin/fzf-preview.sh is added to demonstrate how to display an image using Kitty image protocol or Sixel. You can use it like so: sh     fzf --preview='fzf-preview.sh {}'\n\n(Experimental) iTerm2 inline image protocol support in preview window (not available on Windows)\n# Using https://iterm2.com/utilities/imgcat\nfzf --preview 'imgcat -W $FZF_PREVIEW_COLUMNS -H $FZF_PREVIEW_LINES {}'\nHTTP server can be configured to accept remote connections\n# FZF_API_KEY is required for a non-localhost listen address\nexport FZF_API_KEY=\"$(head -c 32 /dev/urandom | base64)\"\nfzf --listen 0.0.0.0:6266\n\nTo allow remote process execution, use --listen-unsafe instead (execute*, reload*, become, preview, change-preview, transform-*) sh     fzf --listen-unsafe 0.0.0.0:6266\n\nBug fixes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-30",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-30",
    "title": "",
    "section": "1.31 0.43.0",
    "text": "1.31 0.43.0\n\n(Experimental) Added support for Kitty image protocol in the preview window (not available on Windows)\nfzf --preview='\n  if file --mime-type {} | grep -qF image/; then\n    # --transfer-mode=memory is the fastest option but if you want fzf to be able\n    # to redraw the image on terminal resize or on 'change-preview-window',\n    # you need to use --transfer-mode=stream.\n    kitty icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}@0x0 {} | sed \\$d\n  else\n    bat --color=always {}\n  fi\n'\n(Experimental) --listen server can report program state in JSON format (GET /)\n# fzf server started in \"headless\" mode\nfzf --listen 6266 2&gt; /dev/null\n\n# Get program state\ncurl localhost:6266 | jq .\n\n# Increase the number of items returned (default: 100)\ncurl localhost:6266?limit=1000 | jq .\n--listen server can be secured by setting $FZF_API_KEY environment variable.\nexport FZF_API_KEY=\"$(head -c 32 /dev/urandom | base64)\"\n\n# Server\nfzf --listen 6266\n\n# Client\ncurl localhost:6266 -H \"x-api-key: $FZF_API_KEY\" -d 'change-query(yo)'\nAdded toggle-header action\nAdded mouse events for --bind\n\nscroll-up (bound to up)\nscroll-down (bound to down)\nshift-scroll-up (bound to toggle+up)\nshift-scroll-down (bound to toggle+down)\nshift-left-click (bound to toggle)\nshift-right-click (bound to toggle)\npreview-scroll-up (bound to preview-up)\npreview-scroll-down (bound to preview-down)\n\n# Twice faster scrolling both in the main window and the preview window\nfzf --bind 'scroll-up:up+up,scroll-down:down+down' \\\n    --bind 'preview-scroll-up:preview-up+preview-up' \\\n    --bind 'preview-scroll-down:preview-down+preview-down' \\\n    --preview 'cat {}'\nAdded offset-up and offset-down actions\n# Scrolling will behave similarly to CTRL-E and CTRL-Y of vim\nfzf --bind scroll-up:offset-up,scroll-down:offset-down \\\n    --bind ctrl-y:offset-up,ctrl-e:offset-down \\\n    --scroll-off=5\nShell extensions\n\nUpdated bash completion for fzf options\nbash key bindings no longer requires perl; it will use awk or mawk instead if perl is not found\nBasic context-aware completion for ssh command\nApplied --scheme=path for better ordering of the result\n\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-31",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-31",
    "title": "",
    "section": "1.32 0.42.0",
    "text": "1.32 0.42.0\n\nAdded new info style: --info=right\nAdded new info style: --info=inline-right\nAdded new border style thinblock which uses symbols for legacy computing one eighth block elements\n\nSimilarly to block, this style is suitable when using a different background color because the window is completely contained within the border. sh     BAT_THEME=GitHub fzf --info=right --border=thinblock --preview-window=border-thinblock \\         --margin=3 --scrollbar=▏▕ --preview='bat --color=always --style=numbers {}' \\         --color=light,query:238,fg:238,bg:251,bg+:249,gutter:251,border:248,preview-bg:253\nThis style may not render correctly depending on the font and the terminal emulator."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-32",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-32",
    "title": "",
    "section": "1.33 0.41.1",
    "text": "1.33 0.41.1\n\nFixed a bug where preview window is not updated when --disabled is set and a reload is triggered by change:reload binding"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-33",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-33",
    "title": "",
    "section": "1.34 0.41.0",
    "text": "1.34 0.41.0\n\nAdded color name preview-border and preview-scrollbar\nAdded new border style block which uses block elements\n--scrollbar can take two characters, one for the main window, the other for the preview window\nPutting it altogether:\nfzf-tmux -p 80% --padding 1,2 --preview 'bat --style=plain --color=always {}' \\\n    --color 'bg:237,bg+:235,gutter:237,border:238,scrollbar:236' \\\n    --color 'preview-bg:235,preview-border:236,preview-scrollbar:234' \\\n    --preview-window 'border-block' --border block --scrollbar '▌▐'\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-34",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-34",
    "title": "",
    "section": "1.35 0.40.0",
    "text": "1.35 0.40.0\n\nAdded zero event that is triggered when there’s no match\n# Reload the candidate list when there's no match\necho $RANDOM | fzf --bind 'zero:reload(echo $RANDOM)+clear-query' --height 3\nNew actions\n\nAdded track action which makes fzf track the current item when the search result is updated. If the user manually moves the cursor, or the item is not in the updated search result, tracking is automatically disabled. Tracking is useful when you want to see the surrounding items by deleting the query string. sh     # Narrow down the list with a query, point to a command,     # and hit CTRL-T to see its surrounding commands.     export FZF_CTRL_R_OPTS=\"       --preview 'echo {}' --preview-window up:3:hidden:wrap       --bind 'ctrl-/:toggle-preview'       --bind 'ctrl-t:track+clear-query'       --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'       --color header:italic       --header 'Press CTRL-Y to copy command into clipboard'\"\nAdded change-header(...)\nAdded transform-header(...)\nAdded toggle-track action\n\nFixed --track behavior when used with --tac\n\nHowever, using --track with --tac is not recommended. The resulting behavior can be very confusing.\n\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-35",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-35",
    "title": "",
    "section": "1.36 0.39.0",
    "text": "1.36 0.39.0\n\nAdded one event that is triggered when there’s only one match\n# Automatically select the only match\nseq 10 | fzf --bind one:accept\nAdded --track option that makes fzf track the current selection when the result list is updated. This can be useful when browsing logs using fzf with sorting disabled.\ngit log --oneline --graph --color=always | nl |\n    fzf --ansi --track --no-sort --layout=reverse-list\nIf you use --listen option without a port number fzf will automatically allocate an available port and export it as $FZF_PORT environment variable.\n# Automatic port assignment\nfzf --listen --bind 'start:execute-silent:echo $FZF_PORT &gt; /tmp/fzf-port'\n\n# Say hello\ncurl \"localhost:$(cat /tmp/fzf-port)\" -d 'preview:echo Hello, fzf is listening on $FZF_PORT.'\nA carriage return and a line feed character will be rendered as dim ␍ and ␊ respectively.\nprintf \"foo\\rbar\\nbaz\" | fzf --read0 --preview 'echo {}'\nfzf will stop rendering a non-displayable characters as a space. This will likely cause less glitches in the preview window.\nfzf --preview 'head -1000 /dev/random'\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-36",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-36",
    "title": "",
    "section": "1.37 0.38.0",
    "text": "1.37 0.38.0\n\nNew actions\n\nbecome(...) - Replace the current fzf process with the specified command using execve(2) system call. See https://github.com/junegunn/fzf#turning-into-a-different-process for more information.\n# Open selected files in Vim\nfzf --multi --bind 'enter:become(vim {+})'\n\n# Open the file in Vim and go to the line\ngit grep --line-number . |\n    fzf --delimiter : --nth 3.. --bind 'enter:become(vim {1} +{2})'\n\nThis action is not supported on Windows\n\nshow-preview\nhide-preview\n\nBug fixes\n\n--preview-window 0,hidden should not execute the preview command until toggle-preview action is triggered"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-37",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-37",
    "title": "",
    "section": "1.38 0.37.0",
    "text": "1.38 0.37.0\n\nAdded a way to customize the separator of inline info\nfzf --info 'inline: ╱ ' --prompt '╱ ' --color prompt:bright-yellow\nNew event\n\nfocus - Triggered when the focus changes due to a vertical cursor movement or a search result update\nfzf --bind 'focus:transform-preview-label:echo [ {} ]' --preview 'cat {}'\n\n# Any action bound to the event runs synchronously and thus can make the interface sluggish\n# e.g. lolcat isn't one of the fastest programs, and every cursor movement in\n#      fzf will be noticeably affected by its execution time\nfzf --bind 'focus:transform-preview-label:echo [ {} ] | lolcat -f' --preview 'cat {}'\n\n# Beware not to introduce an infinite loop\nseq 10 | fzf --bind 'focus:up' --cycle\n\nNew actions\n\nchange-border-label\nchange-preview-label\ntransform-border-label\ntransform-preview-label\n\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-38",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-38",
    "title": "",
    "section": "1.39 0.36.0",
    "text": "1.39 0.36.0\n\nAdded --listen=HTTP_PORT option to start HTTP server. It allows external processes to send actions to perform via POST method.\n# Start HTTP server on port 6266\nfzf --listen 6266\n\n# Send actions to the server\ncurl -XPOST localhost:6266 -d 'reload(seq 100)+change-prompt(hundred&gt; )'\nAdded draggable scrollbar to the main search window and the preview window\n# Hide scrollbar\nfzf --no-scrollbar\n\n# Customize scrollbar\nfzf --scrollbar ┆ --color scrollbar:blue\nNew event\n\nAdded load event that is triggered when the input stream is complete and the initial processing of the list is complete.\n# Change the prompt to \"loaded\" when the input stream is complete\n(seq 10; sleep 1; seq 11 20) | fzf --prompt 'Loading&gt; ' --bind 'load:change-prompt:Loaded&gt; '\n\n# You can use it instead of 'start' event without `--sync` if asynchronous\n# trigger is not an issue.\n(seq 10; sleep 1; seq 11 20) | fzf --bind 'load:last'\n\nNew actions\n\nAdded pos(...) action to move the cursor to the numeric position\n\nfirst and last are equivalent to pos(1) and pos(-1) respectively\n\n# Put the cursor on the 10th item\nseq 100 | fzf --sync --bind 'start:pos(10)'\n\n# Put the cursor on the 10th to last item\nseq 100 | fzf --sync --bind 'start:pos(-10)'\nAdded reload-sync(...) action which replaces the current list only after the reload process is complete. This is useful when the command takes a while to produce the initial output and you don’t want fzf to run against an empty list while the command is running. sh     # You can still filter and select entries from the initial list for 3 seconds     seq 100 | fzf --bind 'load:reload-sync(sleep 3; seq 1000)+unbind(load)'\nAdded next-selected and prev-selected actions to move between selected items\n    # `next-selected` will move the pointer to the next selected item below the current line\n    # `prev-selected` will move the pointer to the previous selected item above the current line\nseq 10 | fzf --multi --bind ctrl-n:next-selected,ctrl-p:prev-selected\n\n# Both actions respect --layout option\nseq 10 | fzf --multi --bind ctrl-n:next-selected,ctrl-p:prev-selected --layout reverse\nAdded change-query(...) action that simply changes the query string to the given static string. This can be useful when used with --listen. sh     curl localhost:6266 -d \"change-query:$(date)\"\nAdded transform-prompt(...) action for transforming the prompt string using an external command sh     # Press space to change the prompt string using an external command     # (only the first line of the output is taken)     fzf --bind 'space:reload(ls),load:transform-prompt(printf \"%s&gt; \" \"$(date)\")'\nAdded transform-query(...) action for transforming the query string using an external command\n# Press space to convert the query to uppercase letters\nfzf --bind 'space:transform-query(tr \"[:lower:]\" \"[:upper:]\" &lt;&lt;&lt; {q})'\n\n# Bind it to 'change' event for automatic conversion\nfzf --bind 'change:transform-query(tr \"[:lower:]\" \"[:upper:]\" &lt;&lt;&lt; {q})'\n\n# Can only type numbers\nfzf --bind 'change:transform-query(sed \"s/[^0-9]//g\" &lt;&lt;&lt; {q})'\nput action can optionally take an argument string sh     # a will put 'alpha' on the prompt, ctrl-b will put 'bravo'     fzf --bind 'a:put+put(lpha),ctrl-b:put(bravo)'\n\nAdded color name preview-label for --preview-label (defaults to label for --border-label)\nBetter support for (Windows) terminals where each box-drawing character takes 2 columns. Set RUNEWIDTH_EASTASIAN environment variable to 0 or 1.\n\nOn Vim, the variable will be automatically set if &ambiwidth is double\n\nBehavior changes\n\nfzf will always execute the preview command if the command template contains {q} even when it’s empty. If you prefer the old behavior, you’ll have to check if {q} is empty in your command.\n# This will show // even when the query is empty\n: | fzf --preview 'echo /{q}/'\n\n# But if you don't want it,\n: | fzf --preview '[ -n {q} ] || exit; echo /{q}/'\ndouble-click will behave the same as enter unless otherwise specified, so you don’t have to repeat the same action twice in --bind in most cases. sh     # No need to bind 'double-click' to the same action     fzf --bind 'enter:execute:less {}' # --bind 'double-click:execute:less {}'\nIf the color for separator is not specified, it will default to the color for border. Same holds true for scrollbar. This is to reduce the number of configuration items required to achieve a consistent color scheme.\nIf follow flag is specified in --preview-window option, fzf will automatically scroll to the bottom of the streaming preview output. But when the user manually scrolls the window, the following stops. With this version, fzf will resume following if the user scrolls the window to the bottom.\nDefault border style on Windows is changed to sharp because some Windows terminals are not capable of displaying rounded border characters correctly.\n\nMinor bug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-39",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-39",
    "title": "",
    "section": "1.40 0.35.1",
    "text": "1.40 0.35.1\n\nFixed a bug where fzf with --tiebreak=chunk crashes on inverse match query\nFixed a bug where clicking above fzf would paste escape sequences"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-40",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-40",
    "title": "",
    "section": "1.41 0.35.0",
    "text": "1.41 0.35.0\n\nAdded start event that is triggered only once when fzf finder starts. Since fzf consumes the input stream asynchronously, the input list is not available unless you use --sync.\nseq 100 | fzf --multi --sync --bind 'start:last+select-all+preview(echo welcome)'\nAdded --border-label and --border-label-pos for putting label on the border\n# ANSI color codes are supported\n# (with https://github.com/busyloop/lolcat)\nlabel=$(curl -s http://metaphorpsum.com/sentences/1 | lolcat -f)\n\n# Border label at the center\nfzf --height=10 --border --border-label=\"╢ $label ╟\" --color=label:italic:black\n\n# Left-aligned (positive integer)\nfzf --height=10 --border --border-label=\"╢ $label ╟\" --border-label-pos=3 --color=label:italic:black\n\n# Right-aligned (negative integer) on the bottom line (:bottom)\nfzf --height=10 --border --border-label=\"╢ $label ╟\" --border-label-pos=-3:bottom --color=label:italic:black\nAlso added --preview-label and --preview-label-pos for the border of the preview window\nfzf --preview 'cat {}' --border --preview-label=' Preview ' --preview-label-pos=2\nInfo panel (match counter) will be followed by a horizontal separator by default\n\nUse --no-separator or --separator='' to hide the separator\nYou can specify an arbitrary string that is repeated to form the horizontal separator. e.g. --separator=╸\nThe color of the separator can be customized via --color=separator:...\nANSI color codes are also supported\n\nfzf --separator=╸ --color=separator:green\nfzf --separator=$(lolcat -f -F 1.4 &lt;&lt;&lt; ▁▁▂▃▄▅▆▆▅▄▃▂▁▁) --info=inline\nAdded --border=bold and --border=double along with --preview-window=border-bold and --preview-window=border-double"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-41",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-41",
    "title": "",
    "section": "1.42 0.34.0",
    "text": "1.42 0.34.0\n\nAdded support for adaptive --height. If the --height value is prefixed with ~, fzf will automatically determine the height in the range according to the input size.\nseq 1 | fzf --height ~70% --border --padding 1 --margin 1\nseq 10 | fzf --height ~70% --border --padding 1 --margin 1\nseq 100 | fzf --height ~70% --border --padding 1 --margin 1\n\nThere are a few limitations\n\nNot compatible with percent top/bottom margin/padding\n# This is not allowed (top/bottom margin in percent value)\nfzf --height ~50% --border --margin 5%,10%\n\n# This is allowed (top/bottom margin in fixed value)\nfzf --height ~50% --border --margin 2,10%\nfzf will not start until it can determine the right height for the input\n# fzf will open immediately\n(sleep 2; seq 10) | fzf --height 50%\n\n# fzf will open after 2 seconds\n(sleep 2; seq 10) | fzf --height ~50%\n(sleep 2; seq 1000) | fzf --height ~50%\n\n\nFixed tcell renderer used to render full-screen fzf on Windows\n--no-clear is deprecated. Use reload action instead."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-42",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-42",
    "title": "",
    "section": "1.43 0.33.0",
    "text": "1.43 0.33.0\n\nAdded --scheme=[default|path|history] option to choose scoring scheme\n\n(Experimental)\nWe updated the scoring algorithm in 0.32.0, however we have learned that this new scheme (default) is not always giving the optimal result\npath: Additional bonus point is only given to the characters after path separator. You might want to choose this scheme if you have many files with spaces in their paths.\nhistory: No additional bonus points are given so that we give more weight to the chronological ordering. This is equivalent to the scoring scheme before 0.32.0. This also sets --tiebreak=index.\n\nANSI color sequences with colon delimiters are now supported.\nprintf \"\\e[38;5;208mOption 1\\e[m\\nOption 2\" | fzf --ansi\nprintf \"\\e[38:5:208mOption 1\\e[m\\nOption 2\" | fzf --ansi\nSupport border-{up,down} as the synonyms for border-{top,bottom} in --preview-window\nAdded support for ANSI strikethrough\nprintf \"\\e[9mdeleted\" | fzf --ansi\nfzf --color fg+:strikethrough"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-43",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-43",
    "title": "",
    "section": "1.44 0.32.1",
    "text": "1.44 0.32.1\n\nFixed incorrect ordering of --tiebreak=chunk\nfzf-tmux will show fzf border instead of tmux popup border (requires tmux 3.3)\nfzf-tmux -p70%\nfzf-tmux -p70% --color=border:bright-red\nfzf-tmux -p100%,60% --color=border:bright-yellow --border=horizontal --padding 1,5 --margin 1,0\nfzf-tmux -p70%,100% --color=border:bright-green --border=vertical\n\n# Key bindings (CTRL-T, CTRL-R, ALT-C) will use these options\nexport FZF_TMUX_OPTS='-p100%,60% --color=border:green --border=horizontal --padding 1,5 --margin 1,0'"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-44",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-44",
    "title": "",
    "section": "1.45 0.32.0",
    "text": "1.45 0.32.0\n\nUpdated the scoring algorithm\n\nDifferent bonus points to different categories of word boundaries (listed higher to lower bonus point)\n\nWord after whitespace characters or beginning of the string\nWord after common delimiter characters (/,:;|)\nWord after other non-word characters\n\n# foo/bar.sh` is preferred over `foo-bar.sh` on `bar`\nfzf --query=bar --height=4 &lt;&lt; EOF\nfoo-bar.sh\nfoo/bar.sh\nEOF\n\nAdded a new tiebreak chunk\n\nFavors the line with shorter matched chunk. A chunk is a set of consecutive non-whitespace characters.\nUnlike the default length, this scheme works well with tabular input sh     # length prefers item #1, because the whole line is shorter,     # chunk prefers item #2, because the matched chunk (\"foo\") is shorter     fzf --height=6 --header-lines=2 --tiebreak=chunk --reverse --query=fo &lt;&lt; \"EOF\"     N | Field1 | Field2 | Field3     - | ------ | ------ | ------     1 | hello  | foobar | baz     2 | world  | foo    | bazbaz     EOF\nIf the input does not contain any spaces, chunk is equivalent to length. But we’re not going to set it as the default because it is computationally more expensive.\n\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-45",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-45",
    "title": "",
    "section": "1.46 0.31.0",
    "text": "1.46 0.31.0\n\nAdded support for an alternative preview window layout that is activated when the size of the preview window is smaller than a certain threshold.\n# If the width of the preview window is smaller than 50 columns,\n# it will be displayed above the search window.\nfzf --preview 'cat {}' --preview-window 'right,50%,border-left,&lt;50(up,30%,border-bottom)'\n\n# Or you can just hide it like so\nfzf --preview 'cat {}' --preview-window '&lt;50(hidden)'\nfzf now uses SGR mouse mode to properly support mouse on larger terminals\nYou can now use characters that do not satisfy unicode.IsGraphic constraint for --marker, --pointer, and --ellipsis. Allows Nerd Fonts and stuff. Use at your own risk.\nBug fixes and improvements\nShell extension\n\nkill completion now requires trigger sequence (**) for consistency"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-46",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-46",
    "title": "",
    "section": "1.47 0.30.0",
    "text": "1.47 0.30.0\n\nFixed cursor flickering over the screen by hiding it during rendering\nAdded --ellipsis option. You can take advantage of it to make fzf effectively search non-visible parts of the item.\n# Search against hidden line numbers on the far right\nnl /usr/share/dict/words                  |\n  awk '{printf \"%s%1000s\\n\", $2, $1}'     |\n  fzf --nth=-1 --no-hscroll --ellipsis='' |\n  awk '{print $2}'\nAdded rebind action for restoring bindings after unbind\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-47",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-47",
    "title": "",
    "section": "1.48 0.29.0",
    "text": "1.48 0.29.0\n\nAdded change-preview(...) action to change the --preview command\n\ncf. preview(...) is a one-off action that doesn’t change the default preview command\n\nAdded change-preview-window(...) action\n\nYou can rotate through the different options separated by | sh     fzf --preview 'cat {}' --preview-window right:40% \\         --bind 'ctrl-/:change-preview-window(right,70%|down,40%,border-top|hidden|)'\n\nFixed rendering of the prompt line when overflow occurs with --info=inline"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-48",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-48",
    "title": "",
    "section": "1.49 0.28.0",
    "text": "1.49 0.28.0\n\nAdded --header-first option to print header before the prompt line\nfzf --header $'Welcome to fzf\\n▔▔▔▔▔▔▔▔▔▔▔▔▔▔' --reverse --height 30% --border --header-first\nAdded --scroll-off=LINES option (similar to scrolloff option of Vim)\n\nYou can set it to a very large number so that the cursor stays in the middle of the screen while scrolling sh     fzf --scroll-off=5     fzf --scroll-off=999\n\nFixed bug where preview window is not updated on reload (#2644)\nfzf on Windows will also use $SHELL to execute external programs\n\nSee #2638 and #2647\nThanks to @rashil2000, @vovcacik, and @janlazo"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-49",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-49",
    "title": "",
    "section": "1.50 0.27.3",
    "text": "1.50 0.27.3\n\nPreview window is hidden by default when there are preview bindings but --preview command is not given\nFixed bug where {n} is not properly reset on reload\nFixed bug where spinner is not displayed on reload\nEnhancements in tcell renderer for Windows (#2616)\nVim plugin\n\nsinklist is added as a synonym to sink* so that it’s easier to add a function to a spec dictionary\nlet spec = { 'source': 'ls', 'options': ['--multi', '--preview', 'cat {}'] }\nfunction spec.sinklist(matches)\n  echom string(a:matches)\nendfunction\n\ncall fzf#run(fzf#wrap(spec))\nVim 7 compatibility"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-50",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-50",
    "title": "",
    "section": "1.51 0.27.2",
    "text": "1.51 0.27.2\n\n16 base ANSI colors can be specified by their names\nfzf --color fg:3,fg+:11\nfzf --color fg:yellow,fg+:bright-yellow\nFix bug where --read0 not properly displaying long lines"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-51",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-51",
    "title": "",
    "section": "1.52 0.27.1",
    "text": "1.52 0.27.1\n\nAdded unbind action. In the following Ripgrep launcher example, you can use unbind(reload) to switch to fzf-only filtering mode.\n\nSee https://github.com/junegunn/fzf/blob/master/ADVANCED.md#switching-to-fzf-only-search-mode\n\nVim plugin\n\nVim plugin will stop immediately even when the source command hasn’t finished vim     \" fzf will read the stream file while allowing other processes to append to it     call fzf#run({'source': 'cat /dev/null &gt; /tmp/stream; tail -f /tmp/stream'})\nIt is now possible to open popup window relative to the current window vim     let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true, 'yoffset': 1.0 } }"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-52",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-52",
    "title": "",
    "section": "1.53 0.27.0",
    "text": "1.53 0.27.0\n\nMore border options for --preview-window\nfzf --preview 'cat {}' --preview-window border-left\nfzf --preview 'cat {}' --preview-window border-left --border horizontal\nfzf --preview 'cat {}' --preview-window top:border-bottom\nfzf --preview 'cat {}' --preview-window top:border-horizontal\nAutomatically set /dev/tty as STDIN on execute action\n# Redirect /dev/tty to suppress \"Vim: Warning: Input is not from a terminal\"\n# ls | fzf --bind \"enter:execute(vim {} &lt; /dev/tty)\"\n\n# \"&lt; /dev/tty\" part is no longer needed\nls | fzf --bind \"enter:execute(vim {})\"\nBug fixes and improvements\nSigned and notarized macOS binaries (Huge thanks to BACKERS.md!)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-53",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-53",
    "title": "",
    "section": "1.54 0.26.0",
    "text": "1.54 0.26.0\n\nAdded support for fixed header in preview window\n# Display top 3 lines as the fixed header\nfzf --preview 'bat --style=header,grid --color=always {}' --preview-window '~3'\nMore advanced preview offset expression to better support the fixed header\n# Preview with bat, matching line in the middle of the window below\n# the fixed header of the top 3 lines\n#\n#   ~3    Top 3 lines as the fixed header\n#   +{2}  Base scroll offset extracted from the second field\n#   +3    Extra offset to compensate for the 3-line header\n#   /2    Put in the middle of the preview area\n#\ngit grep --line-number '' |\n  fzf --delimiter : \\\n      --preview 'bat --style=full --color=always --highlight-line {2} {1}' \\\n      --preview-window '~3:+{2}+3/2'\nAdded select and deselect action for unconditionally selecting or deselecting a single item in --multi mode. Complements toggle action.\nSignificant performance improvement in ANSI code processing\nBug fixes and improvements\nBuilt with Go 1.16"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-54",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-54",
    "title": "",
    "section": "1.55 0.25.1",
    "text": "1.55 0.25.1\n\nAdded close action\n\nClose preview window if open, abort fzf otherwise\n\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-55",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-55",
    "title": "",
    "section": "1.56 0.25.0",
    "text": "1.56 0.25.0\n\nText attributes set in --color are not reset when fzf sees another --color option for the same element. This allows you to put custom text attributes in your $FZF_DEFAULT_OPTS and still have those attributes even when you override the colors.\n# Default colors and attributes\nfzf\n\n# Apply custom text attributes\nexport FZF_DEFAULT_OPTS='--color fg+:italic,hl:-1:underline,hl+:-1:reverse:underline'\n\nfzf\n\n# Different colors but you still have the attributes\nfzf --color hl:176,hl+:177\n\n# Write \"regular\" if you want to clear the attributes\nfzf --color hl:176:regular,hl+:177:regular\nRenamed --phony to --disabled\nYou can dynamically enable and disable the search functionality using the new enable-search, disable-search, and toggle-search actions\nYou can assign a different color to the query string for when search is disabled\nfzf --color query:#ffffff,disabled:#999999 --bind space:toggle-search\nAdded last action to move the cursor to the last match\n\nThe opposite action top is renamed to first, but top is still recognized as a synonym for backward compatibility\n\nAdded preview-top and preview-bottom actions\nExtended support for alt key chords: alt with any case-sensitive single character\nfzf --bind alt-,:first,alt-.:last"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-56",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-56",
    "title": "",
    "section": "1.57 0.24.4",
    "text": "1.57 0.24.4\n\nAdded --preview-window option follow\n# Preview window will automatically scroll to the bottom\nfzf --preview-window follow --preview 'for i in $(seq 100000); do\n  echo \"$i\"\n  sleep 0.01\n  (( i % 300 == 0 )) && printf \"\\033[2J\"\ndone'\nAdded change-prompt action\nfzf --prompt 'foo&gt; ' --bind $'a:change-prompt:\\x1b[31mbar&gt; '\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-57",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-57",
    "title": "",
    "section": "1.58 0.24.3",
    "text": "1.58 0.24.3\n\nAdded --padding option\nfzf --margin 5% --padding 5% --border --preview 'cat {}' \\\n    --color bg:#222222,preview-bg:#333333"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-58",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-58",
    "title": "",
    "section": "1.59 0.24.2",
    "text": "1.59 0.24.2\n\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-59",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-59",
    "title": "",
    "section": "1.60 0.24.1",
    "text": "1.60 0.24.1\n\nFixed broken --color=[bw|no] option"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-60",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-60",
    "title": "",
    "section": "1.61 0.24.0",
    "text": "1.61 0.24.0\n\nReal-time rendering of preview window\n# fzf can render preview window before the command completes\nfzf --preview 'sleep 1; for i in $(seq 100); do echo $i; sleep 0.01; done'\n\n# Preview window can process ANSI escape sequence (CSI 2 J) for clearing the display\nfzf --preview 'for i in $(seq 100000); do\n  (( i % 200 == 0 )) && printf \"\\033[2J\"\n  echo \"$i\"\n  sleep 0.01\ndone'\nUpdated --color option to support text styles\n\nregular / bold / dim / underline / italic / reverse / blink\n# * Set -1 to keep the original color\n# * Multiple style attributes can be combined\n# * Italic style may not be supported by some terminals\nrg --line-number --no-heading --color=always \"\" |\n  fzf --ansi --prompt \"Rg: \" \\\n      --color fg+:italic,hl:underline:-1,hl+:italic:underline:reverse:-1 \\\n      --color pointer:reverse,prompt:reverse,input:159 \\\n      --pointer '  '\n\nMore --border options\n\nvertical, top, bottom, left, right\nUpdated Vim plugin to use these new --border options\n\" Floating popup window in the center of the screen\nlet g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }\n\n\" Popup with 100% width\nlet g:fzf_layout = { 'window': { 'width': 1.0, 'height': 0.5, 'border': 'horizontal' } }\n\n\" Popup with 100% height\nlet g:fzf_layout = { 'window': { 'width': 0.5, 'height': 1.0, 'border': 'vertical' } }\n\n\" Similar to 'down' layout, but it uses a popup window and doesn't affect the window layout\nlet g:fzf_layout = { 'window': { 'width': 1.0, 'height': 0.5, 'yoffset': 1.0, 'border': 'top' } }\n\n\" Opens on the right;\n\"   'highlight' option is still supported but it will only take the foreground color of the group\nlet g:fzf_layout = { 'window': { 'width': 0.5, 'height': 1.0, 'xoffset': 1.0, 'border': 'left', 'highlight': 'Comment' } }\n\nTo indicate if --multi mode is enabled, fzf will print the number of selected items even when no item is selected\nseq 100 | fzf\n  # 100/100\nseq 100 | fzf --multi\n  # 100/100 (0)\nseq 100 | fzf --multi 5\n  # 100/100 (0/5)\nSince 0.24.0, release binaries will be uploaded to https://github.com/junegunn/fzf/releases"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-61",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-61",
    "title": "",
    "section": "1.62 0.23.1",
    "text": "1.62 0.23.1\n\nAdded --preview-window options for disabling flags\n\nnocycle\nnohidden\nnowrap\ndefault\n\nBuilt with Go 1.14.9 due to performance regression\n\nhttps://github.com/golang/go/issues/40727"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-62",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-62",
    "title": "",
    "section": "1.63 0.23.0",
    "text": "1.63 0.23.0\n\nSupport preview scroll offset relative to window height\ngit grep --line-number '' |\n  fzf --delimiter : \\\n      --preview 'bat --style=numbers --color=always --highlight-line {2} {1}' \\\n      --preview-window +{2}-/2\nAdded --preview-window option for sharp edges (--preview-window sharp)\nAdded --preview-window option for cyclic scrolling (--preview-window cycle)\nReduced vertical padding around the preview window when --preview-window   noborder is used\nAdded actions for preview window\n\npreview-half-page-up\npreview-half-page-down\n\nVim\n\nPopup width and height can be given in absolute integer values\nAdded fzf#exec() function for getting the path of fzf executable\n\nIt also downloads the latest binary if it’s not available by running ./install --bin\n\n\nBuilt with Go 1.15.2\n\nWe no longer provide 32-bit binaries"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-63",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-63",
    "title": "",
    "section": "1.64 0.22.0",
    "text": "1.64 0.22.0\n\nAdded more options for --bind\n\nbackward-eof event sh     # Aborts when you delete backward when the query prompt is already empty     fzf --bind backward-eof:abort\nrefresh-preview action sh     # Rerun preview command when you hit '?'     fzf --preview 'echo $RANDOM' --bind '?:refresh-preview'\npreview action\n# Default preview command with an extra preview binding\nfzf --preview 'file {}' --bind '?:preview:cat {}'\n\n# A preview binding with no default preview command\n# (Preview window is initially empty)\nfzf --bind '?:preview:cat {}'\n\n# Preview window hidden by default, it appears when you first hit '?'\nfzf --bind '?:preview:cat {}' --preview-window hidden\n\nAdded preview window option for setting the initial scroll offset\n# Initial scroll offset is set to the line number of each line of\n# git grep output *minus* 5 lines\ngit grep --line-number '' |\n  fzf --delimiter : --preview 'nl {1}' --preview-window +{2}-5\nAdded support for ANSI colors in --prompt string\nSmart match of accented characters\n\nAn unaccented character in the query string will match both accented and unaccented characters, while an accented character will only match accented characters. This is similar to how “smart-case” match works.\n\nVim plugin\n\ntmux layout option for using fzf-tmux vim     let g:fzf_layout = { 'tmux': '-p90%,60%' }"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-64",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-64",
    "title": "",
    "section": "1.65 0.21.1",
    "text": "1.65 0.21.1\n\nShell extension\n\nCTRL-R will remove duplicate commands\n\nfzf-tmux\n\nSupports tmux popup window (require tmux 3.2 or above)\n\n# 50% width and height\nfzf-tmux -p\n\n# 80% width and height\nfzf-tmux -p 80%\n\n# 80% width and 40% height\nfzf-tmux -p 80%,40%\nfzf-tmux -w 80% -h 40%\n\n# Window position\nfzf-tmux -w 80% -h 40% -x 0 -y 0\nfzf-tmux -w 80% -h 40% -y 1000\n\n# Write ordinary fzf options after --\nfzf-tmux -p -- --reverse --info=inline --margin 2,4 --border\nOn macOS, you can build the latest tmux from the source with brew install tmux --HEAD\n\n\nBug fixes\n\nFixed Windows file traversal not to include directories\nFixed ANSI colors with --keep-right\nFixed _fzf_complete for zsh\n\nBuilt with Go 1.14.1"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-65",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-65",
    "title": "",
    "section": "1.66 0.21.0",
    "text": "1.66 0.21.0\n\n--height option is now available on Windows as well (@kelleyma49)\nAdded --pointer and --marker options\nAdded --keep-right option that keeps the right end of the line visible when it’s too long\nStyle changes\n\n--border will now print border with rounded corners around the finder instead of printing horizontal lines above and below it. The previous style is available via --border=horizontal\nUnicode spinner\n\nMore keys and actions for --bind\nAdded PowerShell script for downloading Windows binary\nVim plugin: Built-in floating windows support\nlet g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }\nbash: Various improvements in key bindings (CTRL-T, CTRL-R, ALT-C)\n\nCTRL-R will start with the current command-line as the initial query\nCTRL-R properly supports multi-line commands\n\nFuzzy completion API changed\n# Previous: fzf arguments given as a single string argument\n# - This style is still supported, but it's deprecated\n_fzf_complete \"--multi --reverse --prompt=\\\"doge&gt; \\\"\" \"$@\" &lt; &lt;(\n  echo foo\n)\n\n# New API: multiple fzf arguments before \"--\"\n# - Easier to write multiple options\n_fzf_complete --multi --reverse --prompt=\"doge&gt; \" -- \"$@\" &lt; &lt;(\n  echo foo\n)\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-66",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-66",
    "title": "",
    "section": "1.67 0.20.0",
    "text": "1.67 0.20.0\n\nCustomizable preview window color (preview-fg and preview-bg for --color)\nfzf --preview 'cat {}' \\\n    --color 'fg:#bbccdd,fg+:#ddeeff,bg:#334455,preview-bg:#223344,border:#778899' \\\n    --border --height 20 --layout reverse --info inline\nRemoved the immediate flicking of the screen on reload action.\n: | fzf --bind 'change:reload:seq {q}' --phony\nAdded clear-query and clear-selection actions for --bind\nIt is now possible to split a composite bind action over multiple --bind expressions by prefixing the later ones with +.\nfzf --bind 'ctrl-a:up+up'\n\n# Can be now written as\nfzf --bind 'ctrl-a:up' --bind 'ctrl-a:+up'\n\n# This is useful when you need to write special execute/reload form (i.e. `execute:...`)\n# to avoid parse errors and add more actions to the same key\nfzf --multi --bind 'ctrl-l:select-all+execute:less {+f}' --bind 'ctrl-l:+deselect-all'\nFixed parse error of --bind expression where concatenated execute/reload action contains + character.\nfzf --multi --bind 'ctrl-l:select-all+execute(less {+f})+deselect-all'\nFixed bugs of reload action\n\nNot triggered when there’s no match even when the command doesn’t have any placeholder expressions\nScreen not properly cleared when --header-lines not filled on reload"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-67",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-67",
    "title": "",
    "section": "1.68 0.19.0",
    "text": "1.68 0.19.0\n\nAdded --phony option which completely disables search functionality. Useful when you want to use fzf only as a selector interface. See below.\nAdded “reload” action for dynamically updating the input list without restarting fzf. See https://github.com/junegunn/fzf/issues/1750 to learn more about it.\n# Using fzf as the selector interface for ripgrep\nRG_PREFIX=\"rg --column --line-number --no-heading --color=always --smart-case \"\nINITIAL_QUERY=\"foo\"\nFZF_DEFAULT_COMMAND=\"$RG_PREFIX '$INITIAL_QUERY' || true\" \\\n  fzf --bind \"change:reload:$RG_PREFIX {q} || true\" \\\n      --ansi --phony --query \"$INITIAL_QUERY\"\n--multi now takes an optional integer argument which indicates the maximum number of items that can be selected\nseq 100 | fzf --multi 3 --reverse --height 50%\nIf a placeholder expression for --preview and execute action (and the new reload action) contains f flag, it is replaced to the path of a temporary file that holds the evaluated list. This is useful when you multi-select a large number of items and the length of the evaluated string may exceed ARG_MAX.\n# Press CTRL-A to select 100K items and see the sum of all the numbers\nseq 100000 | fzf --multi --bind ctrl-a:select-all \\\n                 --preview \"awk '{sum+=\\$1} END {print sum}' {+f}\"\ndeselect-all no longer deselects unmatched items. It is now consistent with select-all and toggle-all in that it only affects matched items.\nDue to the limitation of bash, fuzzy completion is enabled by default for a fixed set of commands. A helper function for easily setting up fuzzy completion for any command is now provided.\n# usage: _fzf_setup_completion path|dir COMMANDS...\n_fzf_setup_completion path git kubectl\nInfo line style can be changed by --info=STYLE\n\n--info=default\n--info=inline (same as old --inline-info)\n--info=hidden\n\nPreview window border can be disabled by adding noborder to --preview-window.\nWhen you transform the input with --with-nth, the trailing white spaces are removed.\nctrl-\\, ctrl-], ctrl-^, and ctrl-/ can now be used with --bind\nSee https://github.com/junegunn/fzf/milestone/15?closed=1 for more details"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-68",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-68",
    "title": "",
    "section": "1.69 0.18.0",
    "text": "1.69 0.18.0\n\nAdded placeholder expression for zero-based item index: {n} and {+n}\n\nfzf --preview 'echo {n}: {}'\n\nAdded color option for the gutter: --color gutter:-1\nAdded --no-unicode option for drawing borders in non-Unicode, ASCII characters\nFZF_PREVIEW_LINES and FZF_PREVIEW_COLUMNS are exported to preview process\n\nfzf still overrides LINES and COLUMNS as before, but they may be reset by the default shell.\n\nBug fixes and improvements\n\nSee https://github.com/junegunn/fzf/milestone/14?closed=1\n\nBuilt with Go 1.12.1"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-69",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-69",
    "title": "",
    "section": "1.70 0.17.5",
    "text": "1.70 0.17.5\n\nBug fixes and improvements\n\nSee https://github.com/junegunn/fzf/milestone/13?closed=1\n\nSearch query longer than the screen width is allowed (up to 300 chars)\nBuilt with Go 1.11.1"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-70",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-70",
    "title": "",
    "section": "1.71 0.17.4",
    "text": "1.71 0.17.4\n\nAdded --layout option with a new layout called reverse-list.\n\n--layout=reverse is a synonym for --reverse\n--layout=default is a synonym for --no-reverse\n\nPreview window will be updated even when there is no match for the query if any of the placeholder expressions (e.g. {q}, {+}) evaluates to a non-empty string.\nMore keys for binding: shift-{up,down}, alt-{up,down,left,right}\nfzf can now start even when /dev/tty is not available by making an educated guess.\nUpdated the default command for Windows.\nFixes and improvements on bash/zsh completion\ninstall and uninstall scripts now supports generating files under XDG_CONFIG_HOME on --xdg flag.\n\nSee https://github.com/junegunn/fzf/milestone/12?closed=1 for the full list of changes."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-71",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-71",
    "title": "",
    "section": "1.72 0.17.3",
    "text": "1.72 0.17.3\n\n$LINES and $COLUMNS are exported to preview command so that the command knows the exact size of the preview window.\nBetter error messages when the default command or $FZF_DEFAULT_COMMAND fails.\nReverted #1061 to avoid having duplicate entries in the list when find command detected a file system loop (#1120). The default command now requires that find supports -fstype option.\nfzf now distinguishes mouse left click and right click (#1130)\n\nRight click is now bound to toggle action by default\n--bind understands left-click and right-click\n\nAdded replace-query action (#1137)\n\nReplaces query string with the current selection\n\nAdded accept-non-empty action (#1162)\n\nSame as accept, except that it prevents fzf from exiting without any selection"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-72",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-72",
    "title": "",
    "section": "1.73 0.17.1",
    "text": "1.73 0.17.1\n\nFixed custom background color of preview window (#1046)\nFixed background color issues of Windows binary\nFixed Windows binary to execute command using cmd.exe with no parsing and escaping (#1072)\nAdded support for window layout on Vim 8 using Vim 8 terminal (#1055)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-73",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-73",
    "title": "",
    "section": "1.74 0.17.0-2",
    "text": "1.74 0.17.0-2\nA maintenance release for auxiliary scripts. fzf binaries are not updated.\n\nExperimental support for the builtin terminal of Vim 8\n\nfzf can now run inside GVim\n\nUpdated Vim plugin to better handle &shell issue on fish\nFixed a bug of fzf-tmux where invalid output is generated\nFixed fzf-tmux to work even when tput does not work"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-74",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-74",
    "title": "",
    "section": "1.75 0.17.0",
    "text": "1.75 0.17.0\n\nPerformance optimization\nOne can match literal spaces in extended-search mode with a space prepended by a backslash.\n--expect is now additive and can be specified multiple times."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-75",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-75",
    "title": "",
    "section": "1.76 0.16.11",
    "text": "1.76 0.16.11\n\nPerformance optimization\nFixed missing preview update"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-76",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-76",
    "title": "",
    "section": "1.77 0.16.10",
    "text": "1.77 0.16.10\n\nFixed invalid handling of ANSI colors in preview window\nFurther improved --ansi performance"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-77",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-77",
    "title": "",
    "section": "1.78 0.16.9",
    "text": "1.78 0.16.9\n\nMemory and performance optimization\n\nAround 20% performance improvement for general use cases\nUp to 5x faster processing of --ansi\nUp to 50% reduction of memory usage\n\nBug fixes and usability improvements\n\nFixed handling of bracketed paste mode\n[ERROR] on info line when the default command failed\nMore efficient rendering of preview window\n--no-clear updated for repetitive relaunching scenarios"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-78",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-78",
    "title": "",
    "section": "1.79 0.16.8",
    "text": "1.79 0.16.8\n\nNew change event and top action for --bind\n\nfzf --bind change:top\n\nMove cursor to the top result whenever the query string is changed\n\nfzf --bind 'ctrl-w:unix-word-rubout+top,ctrl-u:unix-line-discard+top'\n\ntop combined with unix-word-rubout and unix-line-discard\n\n\nFixed inconsistent tiebreak scores when --nth is used\nProper display of tab characters in --prompt\nFixed not to --cycle on page-up/page-down to prevent overshoot\nGit revision in --version output\nBasic support for Cygwin environment\nMany fixes in Vim plugin on Windows/Cygwin (thanks to @janlazo)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-79",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-79",
    "title": "",
    "section": "1.80 0.16.7",
    "text": "1.80 0.16.7\n\nAdded support for ctrl-alt-[a-z] key chords\nCTRL-Z (SIGSTOP) now works with fzf\nfzf will export $FZF_PREVIEW_WINDOW so that the scripts can use it\nBug fixes and improvements in Vim plugin and shell extensions"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-80",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-80",
    "title": "",
    "section": "1.81 0.16.6",
    "text": "1.81 0.16.6\n\nMinor bug fixes and improvements\nAdded --no-clear option for scripting purposes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-81",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-81",
    "title": "",
    "section": "1.82 0.16.5",
    "text": "1.82 0.16.5\n\nMinor bug fixes\nAdded toggle-preview-wrap action\nBuilt with Go 1.8"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-82",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-82",
    "title": "",
    "section": "1.83 0.16.4",
    "text": "1.83 0.16.4\n\nAdded --border option to draw border above and below the finder\nBug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-83",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-83",
    "title": "",
    "section": "1.84 0.16.3",
    "text": "1.84 0.16.3\n\nFixed a bug where fzf incorrectly display the lines when straddling tab characters are trimmed\nPlaceholder expression used in --preview and execute action can optionally take + flag to be used with multiple selections\n\ne.g. git log --oneline | fzf --multi --preview 'git show {+1}'\n\nAdded execute-silent action for executing a command silently without switching to the alternate screen. This is useful when the process is short-lived and you’re not interested in its output.\n\ne.g. fzf --bind 'ctrl-y:execute!(echo -n {} | pbcopy)'\n\nctrl-space is allowed in --bind"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-84",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-84",
    "title": "",
    "section": "1.85 0.16.2",
    "text": "1.85 0.16.2\n\nDropped ncurses dependency\nBinaries for freebsd, openbsd, arm5, arm6, arm7, and arm8\nOfficial 24-bit color support\nAdded support for composite actions in --bind. Multiple actions can be chained using + separator.\n\ne.g. fzf --bind 'ctrl-y:execute(echo -n {} | pbcopy)+abort'\n\n--preview-window with size 0 is allowed. This is used to make fzf execute preview command in the background without displaying the result.\nMinor bug fixes and improvements"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-85",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-85",
    "title": "",
    "section": "1.86 0.16.1",
    "text": "1.86 0.16.1\n\nFixed --height option to properly fill the window with the background color\nAdded half-page-up and half-page-down actions\nAdded -L flag to the default find command"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-86",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-86",
    "title": "",
    "section": "1.87 0.16.0",
    "text": "1.87 0.16.0\n\nAdded --height HEIGHT[%] option\n\nfzf can now display finder without occupying the full screen\n\nPreview window will truncate long lines by default. Line wrap can be enabled by :wrap flag in --preview-window.\nLatin script letters will be normalized before matching so that it’s easier to match against accented letters. e.g. sodanco can match Só Danço Samba.\n\nNormalization can be disabled via --literal\n\nAdded --filepath-word to make word-wise movements/actions (alt-b, alt-f, alt-bs, alt-d) respect path separators"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-87",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-87",
    "title": "",
    "section": "1.88 0.15.9",
    "text": "1.88 0.15.9\n\nFixed rendering glitches introduced in 0.15.8\nThe default escape delay is reduced to 50ms and is configurable via $ESCDELAY\nScroll indicator at the top-right corner of the preview window is always displayed when there’s overflow\nCan now be built with ncurses 6 or tcell to support extra features\n\nncurses 6\n\nSupports more than 256 color pairs\nSupports italics\n\ntcell\n\n24-bit color support\n\nSee https://github.com/junegunn/fzf/blob/master/BUILD.md"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-88",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-88",
    "title": "",
    "section": "1.89 0.15.8",
    "text": "1.89 0.15.8\n\nUpdated ANSI processor to handle more VT-100 escape sequences\nAdded --no-bold (and --bold) option\nImproved escape sequence processing for WSL\nAdded support for alt-[0-9], f11, and f12 for --bind and --expect"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-89",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-89",
    "title": "",
    "section": "1.90 0.15.7",
    "text": "1.90 0.15.7\n\nFixed panic when color is disabled and header lines contain ANSI colors"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-90",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-90",
    "title": "",
    "section": "1.91 0.15.6",
    "text": "1.91 0.15.6\n\nWindows binaries! (@kelleyma49)\nFixed the bug where header lines are cleared when preview window is toggled\nFixed not to display ^N and ^O on screen\nFixed cursor keys (or any key sequence that starts with ESC) on WSL by making fzf wait for additional keystrokes after ESC for up to 100ms"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-91",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-91",
    "title": "",
    "section": "1.92 0.15.5",
    "text": "1.92 0.15.5\n\nSetting foreground color will no longer set background color to black\n\ne.g. fzf --color fg:153\n\n--tiebreak=end will consider relative position instead of absolute distance\nUpdated fzf#wrap function to respect g:fzf_colors"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-92",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-92",
    "title": "",
    "section": "1.93 0.15.4",
    "text": "1.93 0.15.4\n\nAdded support for range expression in preview and execute action\n\ne.g. ls -l | fzf --preview=\"echo user={3} when={-4..-2}; cat {-1}\" --header-lines=1\n{q} will be replaced to the single-quoted string of the current query\n\nFixed to properly handle unicode whitespace characters\nDisplay scroll indicator in preview window\nInverse search term will use exact matcher by default\n\nThis is a breaking change, but I believe it makes much more sense. It is almost impossible to predict which entries will be filtered out due to a fuzzy inverse term. You can still perform inverse-fuzzy-match by prepending !' to the term."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-93",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-93",
    "title": "",
    "section": "1.94 0.15.3",
    "text": "1.94 0.15.3\n\nAdded support for more ANSI attributes: dim, underline, blink, and reverse\nFixed race condition in toggle-preview"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-94",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-94",
    "title": "",
    "section": "1.95 0.15.2",
    "text": "1.95 0.15.2\n\nPreview window is now scrollable\n\nWith mouse scroll or with bindable actions\n\npreview-up\npreview-down\npreview-page-up\npreview-page-down\n\n\nUpdated ANSI processor to support high intensity colors and ignore some VT100-related escape sequences"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-95",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-95",
    "title": "",
    "section": "1.96 0.15.1",
    "text": "1.96 0.15.1\n\nFixed panic when the pattern occurs after 2^15-th column\nFixed rendering delay when displaying extremely long lines"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-96",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-96",
    "title": "",
    "section": "1.97 0.15.0",
    "text": "1.97 0.15.0\n\nImproved fuzzy search algorithm\n\nAdded --algo=[v1|v2] option so one can still choose the old algorithm which values the search performance over the quality of the result\n\nAdvanced scoring criteria\n--read0 to read input delimited by ASCII NUL character\n--print0 to print output delimited by ASCII NUL character"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-97",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-97",
    "title": "",
    "section": "1.98 0.13.5",
    "text": "1.98 0.13.5\n\nMemory and performance optimization\n\nUp to 2x performance with half the amount of memory"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-98",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-98",
    "title": "",
    "section": "1.99 0.13.4",
    "text": "1.99 0.13.4\n\nPerformance optimization\n\nMemory footprint for ascii string is reduced by 60%\n15 to 20% improvement of query performance\nUp to 45% better performance of --nth with non-regex delimiters\n\nFixed invalid handling of hidden property of --preview-window"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-99",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-99",
    "title": "",
    "section": "1.100 0.13.3",
    "text": "1.100 0.13.3\n\nFixed duplicate rendering of the last line in preview window"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-100",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-100",
    "title": "",
    "section": "1.101 0.13.2",
    "text": "1.101 0.13.2\n\nFixed race condition where preview window is not properly cleared"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-101",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-101",
    "title": "",
    "section": "1.102 0.13.1",
    "text": "1.102 0.13.1\n\nFixed UI issue with large --preview output with many ANSI codes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-102",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-102",
    "title": "",
    "section": "1.103 0.13.0",
    "text": "1.103 0.13.0\n\nAdded preview feature\n\n--preview CMD\n--preview-window POS[:SIZE][:hidden]\n\n{} in execute action is now replaced to the single-quoted (instead of double-quoted) string of the current line\nFixed to ignore control characters for bracketed paste mode"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-103",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-103",
    "title": "",
    "section": "1.104 0.12.2",
    "text": "1.104 0.12.2\n\n256-color capability detection does not require 256 in $TERM\nAdded print-query action\nMore named keys for binding; F1 ~ F10, ALT-/, ALT-space, and ALT-enter\nAdded jump and jump-accept actions that implement EasyMotion-like movement"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-104",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-104",
    "title": "",
    "section": "1.105 0.12.1",
    "text": "1.105 0.12.1\n\nRanking algorithm introduced in 0.12.0 is now universally applied\nFixed invalid cache reference in exact mode\nFixes and improvements in Vim plugin and shell extensions"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-105",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-105",
    "title": "",
    "section": "1.106 0.12.0",
    "text": "1.106 0.12.0\n\nEnhanced ranking algorithm\nMinor bug fixes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-106",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-106",
    "title": "",
    "section": "1.107 0.11.4",
    "text": "1.107 0.11.4\n\nAdded --hscroll-off=COL option (default: 10) (#513)\nSome fixes in Vim plugin and shell extensions"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-107",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-107",
    "title": "",
    "section": "1.108 0.11.3",
    "text": "1.108 0.11.3\n\nGraceful exit on SIGTERM (#482)\n$SHELL instead of sh for execute action and $FZF_DEFAULT_COMMAND (#481)\nChanges in fuzzy completion API\n\n_fzf_compgen_{path,dir}\n_fzf_complete_COMMAND_post for post-processing"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-108",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-108",
    "title": "",
    "section": "1.109 0.11.2",
    "text": "1.109 0.11.2\n\n--tiebreak now accepts comma-separated list of sort criteria\n\nEach criterion should appear only once in the list\nindex is only allowed at the end of the list\nindex is implicitly appended to the list when not specified\nDefault is length (or equivalently length,index)\n\nbegin criterion will ignore leading whitespaces when calculating the index\nAdded toggle-in and toggle-out actions\n\nSwitch direction depending on --reverse-ness\nexport FZF_DEFAULT_OPTS=\"--bind tab:toggle-out,shift-tab:toggle-in\"\n\nReduced the initial delay when --tac is not given\n\nfzf defers the initial rendering of the screen up to 100ms if the input stream is ongoing to prevent unnecessary redraw during the initial phase. However, 100ms delay is quite noticeable and might give the impression that fzf is not snappy enough. This commit reduces the maximum delay down to 20ms when --tac is not specified, in which case the input list quickly fills the entire screen."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-109",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-109",
    "title": "",
    "section": "1.110 0.11.1",
    "text": "1.110 0.11.1\n\nAdded --tabstop=SPACES option"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-110",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-110",
    "title": "",
    "section": "1.111 0.11.0",
    "text": "1.111 0.11.0\n\nAdded OR operator for extended-search mode\nAdded --execute-multi action\nFixed incorrect cursor position when unicode wide characters are used in --prompt\nFixes and improvements in shell extensions"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-111",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-111",
    "title": "",
    "section": "1.112 0.10.9",
    "text": "1.112 0.10.9\n\nExtended-search mode is now enabled by default\n\n--extended-exact is deprecated and instead we have --exact for orthogonally controlling “exactness” of search\n\nFixed not to display non-printable characters\nAdded double-click for --bind option\nMore robust handling of SIGWINCH"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-112",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-112",
    "title": "",
    "section": "1.113 0.10.8",
    "text": "1.113 0.10.8\n\nFixed panic when trying to set colors after colors are disabled (#370)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-113",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-113",
    "title": "",
    "section": "1.114 0.10.7",
    "text": "1.114 0.10.7\n\nFixed unserialized interrupt handling during execute action which often caused invalid memory access and crash\nChanged --tiebreak=length (default) to use trimmed length when --nth is used"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-114",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-114",
    "title": "",
    "section": "1.115 0.10.6",
    "text": "1.115 0.10.6\n\nReplaced --header-file with --header option\n--header and --header-lines can be used together\nChanged exit status\n\n0: Okay\n1: No match\n2: Error\n130: Interrupted\n\n64-bit linux binary is statically-linked with ncurses to avoid compatibility issues."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-115",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-115",
    "title": "",
    "section": "1.116 0.10.5",
    "text": "1.116 0.10.5\n\n'-prefix to unquote the term in --extended-exact mode\nBackward scan when --tiebreak=end is set"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-116",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-116",
    "title": "",
    "section": "1.117 0.10.4",
    "text": "1.117 0.10.4\n\nFixed to remove ANSI code from output when --with-nth is set"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-117",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-117",
    "title": "",
    "section": "1.118 0.10.3",
    "text": "1.118 0.10.3\n\nFixed slow performance of --with-nth when used with --delimiter\n\nRegular expression engine of Golang as of now is very slow, so the fixed version will treat the given delimiter pattern as a plain string instead of a regular expression unless it contains special characters and is a valid regular expression.\nSimpler regular expression for delimiter for better performance"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-118",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-118",
    "title": "",
    "section": "1.119 0.10.2",
    "text": "1.119 0.10.2\n\n1.119.1 Fixes and improvements\n\nImprovement in perceived response time of queries\n\nEager, efficient rune array conversion\n\nGraceful exit when failed to initialize ncurses (invalid $TERM)\nImproved ranking algorithm when --nth option is set\nChanged the default command not to fail when there are files whose names start with dash"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-119",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-119",
    "title": "",
    "section": "1.120 0.10.1",
    "text": "1.120 0.10.1\n\n1.120.1 New features\n\nAdded --margin option\nAdded options for sticky header\n\n--header-file\n--header-lines\n\nAdded cancel action which clears the input or closes the finder when the input is already empty\n\ne.g. export FZF_DEFAULT_OPTS=\"--bind esc:cancel\"\n\nAdded delete-char/eof action to differentiate CTRL-D and DEL\n\n\n\n1.120.2 Minor improvements/fixes\n\nFixed to allow binding colon and comma keys\nFixed ANSI processor to handle color regions spanning multiple lines"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-120",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-120",
    "title": "",
    "section": "1.121 0.10.0",
    "text": "1.121 0.10.0\n\n1.121.1 New features\n\nMore actions for --bind\n\nselect-all\ndeselect-all\ntoggle-all\nignore\n\nexecute(...) action for running arbitrary command without leaving fzf\n\nfzf --bind \"ctrl-m:execute(less {})\"\nfzf --bind \"ctrl-t:execute(tmux new-window -d 'vim {}')\"\nIf the command contains parentheses, use any of the follows alternative notations to avoid parse errors\n\nexecute[...]\nexecute~...~\nexecute!...!\nexecute@...@\nexecute#...#\nexecute$...$\nexecute%...%\nexecute^...^\nexecute&...&\nexecute*...*\nexecute;...;\nexecute/.../\nexecute|...|\nexecute:...\n\nThis is the special form that frees you from parse errors as it does not expect the closing character\nThe catch is that it should be the last one in the comma-separated list\n\n\n\nAdded support for optional search history\n\n--history HISTORY_FILE\n\nWhen used, CTRL-N and CTRL-P are automatically remapped to next-history and previous-history\n\n--history-size MAX_ENTRIES (default: 1000)\n\nCyclic scrolling can be enabled with --cycle\nFixed the bug where the spinner was not spinning on idle input stream\n\ne.g. sleep 100 | fzf\n\n\n\n\n1.121.2 Minor improvements/fixes\n\nAdded synonyms for key names that can be specified for --bind, --toggle-sort, and --expect\nFixed the color of multi-select marker on the current line\nFixed to allow ^pattern$ in extended-search mode"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-121",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-121",
    "title": "",
    "section": "1.122 0.9.13",
    "text": "1.122 0.9.13\n\n1.122.1 New features\n\nColor customization with the extended --color option\n\n\n\n1.122.2 Bug fixes\n\nFixed premature termination of Reader in the presence of a long line which is longer than 64KB"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-122",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-122",
    "title": "",
    "section": "1.123 0.9.12",
    "text": "1.123 0.9.12\n\n1.123.1 New features\n\nAdded --bind option for custom key bindings\n\n\n\n1.123.2 Bug fixes\n\nFixed to update “inline-info” immediately after terminal resize\nFixed ANSI code offset calculation"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-123",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-123",
    "title": "",
    "section": "1.124 0.9.11",
    "text": "1.124 0.9.11\n\n1.124.1 New features\n\nAdded --inline-info option for saving screen estate (#202)\n\nUseful inside Neovim\ne.g. let $FZF_DEFAULT_OPTS = $FZF_DEFAULT_OPTS.' --inline-info'\n\n\n\n\n1.124.2 Bug fixes\n\nInvalid mutation of input on case conversion (#209)\nSmart-case for each term in extended-search mode (#208)\nFixed double-click result when scroll offset is positive"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-124",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-124",
    "title": "",
    "section": "1.125 0.9.10",
    "text": "1.125 0.9.10\n\n1.125.1 Improvements\n\nPerformance optimization\nLess aggressive memoization to limit memory usage\n\n\n\n1.125.2 New features\n\nAdded color scheme for light background: --color=light"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-125",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-125",
    "title": "",
    "section": "1.126 0.9.9",
    "text": "1.126 0.9.9\n\n1.126.1 New features\n\nAdded --tiebreak option (#191)\nAdded --no-hscroll option (#193)\nVisual indication of --toggle-sort (#194)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-126",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-126",
    "title": "",
    "section": "1.127 0.9.8",
    "text": "1.127 0.9.8\n\n1.127.1 Bug fixes\n\nFixed Unicode case handling (#186)\nFixed to terminate on RuneError (#185)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-127",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-127",
    "title": "",
    "section": "1.128 0.9.7",
    "text": "1.128 0.9.7\n\n1.128.1 New features\n\nAdded --toggle-sort option (#173)\n\n--toggle-sort=ctrl-r is applied to CTRL-R shell extension\n\n\n\n\n1.128.2 Bug fixes\n\nFixed to print empty line if --expect is set and fzf is completed by --select-1 or --exit-0 (#172)\nFixed to allow comma character as an argument to --expect option"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-128",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-128",
    "title": "",
    "section": "1.129 0.9.6",
    "text": "1.129 0.9.6\n\n1.129.1 New features\n\n1.129.1.1 Added --expect option (#163)\nIf you provide a comma-separated list of keys with --expect option, fzf will allow you to select the match and complete the finder when any of the keys is pressed. Additionally, fzf will print the name of the key pressed as the first line of the output so that your script can decide what to do next based on the information.\nfzf --expect=ctrl-v,ctrl-t,alt-s,f1,f2,~,@\nThe updated vim plugin uses this option to implement ctrlp-compatible key bindings.\n\n\n\n1.129.2 Bug fixes\n\nFixed to ignore ANSI escape code \\e[K (#162)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-129",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-129",
    "title": "",
    "section": "1.130 0.9.5",
    "text": "1.130 0.9.5\n\n1.130.1 New features\n\n1.130.1.1 Added --ansi option (#150)\nIf you give --ansi option to fzf, fzf will interpret ANSI color codes from the input, display the item with the ANSI colors (true colors are not supported), and strips the codes from the output. This option is off by default as it entails some overhead.\n\n\n\n1.130.2 Improvements\n\n1.130.2.1 Reduced initial memory footprint (#151)\nBy removing unnecessary copy of pointers, fzf will use significantly smaller amount of memory when it’s started. The difference is hugely noticeable when the input is extremely large. (e.g. locate / | fzf)\n\n\n\n1.130.3 Bug fixes\n\nFixed panic on --no-sort --filter '' (#149)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-130",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-130",
    "title": "",
    "section": "1.131 0.9.4",
    "text": "1.131 0.9.4\n\n1.131.1 New features\n\n1.131.1.1 Added --tac option to reverse the order of the input.\nOne might argue that this option is unnecessary since we can already put tac or tail -r in the command pipeline to achieve the same result. However, the advantage of --tac is that it does not block until the input is complete.\n\n\n\n1.131.2 Backward incompatible changes\n\n1.131.2.1 Changed behavior on --no-sort\n--no-sort option will no longer reverse the display order within finder. You may want to use the new --tac option with --no-sort.\nhistory | fzf +s --tac\n\n\n\n1.131.3 Improvements\n\n1.131.3.1 --filter will not block when sort is disabled\nWhen fzf works in filtering mode (--filter) and sort is disabled (--no-sort), there’s no need to block until input is complete. The new version of fzf will print the matches on-the-fly when the following condition is met:\n--filter TERM --no-sort [--no-tac --no-sync]\nor simply:\n-f TERM +s\nThis change removes unnecessary delay in the use cases like the following:\nfzf -f xxx +s | head -5\nHowever, in this case, fzf processes the lines sequentially, so it cannot utilize multiple cores, and fzf will run slightly slower than the previous mode of execution where filtering is done in parallel after the entire input is loaded. If the user is concerned about this performance problem, one can add --sync option to re-enable buffering."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-131",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/CHANGELOG.html#section-131",
    "title": "",
    "section": "1.132 0.9.3",
    "text": "1.132 0.9.3\n\n1.132.1 New features\n\nAdded --sync option for multi-staged filtering\n\n\n\n1.132.2 Improvements\n\n--select-1 and --exit-0 will start finder immediately when the condition cannot be met"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#introduction",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#introduction",
    "title": "",
    "section": "1.1 Introduction",
    "text": "1.1 Introduction\nfzf is an interactive Unix filter program that is designed to be used with other Unix tools. It reads a list of items from the standard input, allows you to select a subset of the items, and prints the selected ones to the standard output. You can think of it as an interactive version of grep, and it’s already useful even if you don’t know any of its options.\n# 1. ps:   Feed the list of processes to fzf\n# 2. fzf:  Interactively select a process using fuzzy matching algorithm\n# 3. awk:  Take the PID from the selected line\n# 3. kill: Kill the process with the PID\nps -ef | fzf | awk '{print $2}' | xargs kill -9\nWhile the above example succinctly summarizes the fundamental concept of fzf, you can build much more sophisticated interactive workflows using fzf once you learn its wide variety of features.\n\nTo see the full list of options and features, see man fzf\nTo see the latest additions, see CHANGELOG.md\n\nThis document will guide you through some examples that will familiarize you with the advanced features of fzf."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#display-modes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#display-modes",
    "title": "",
    "section": "1.2 Display modes",
    "text": "1.2 Display modes\n\n1.2.1 --height\nfzf by default opens in fullscreen mode, but it’s not always desirable. Oftentimes, you want to see the current context of the terminal while using fzf. --height is an option for opening fzf below the cursor in non-fullscreen mode so you can still see the previous commands and their results above it.\nfzf --height=40%\n\n\n\nimage\n\n\nYou might also want to experiment with other layout options such as --layout=reverse, --info=inline, --border, --margin, etc.\nfzf --height=40% --layout=reverse\nfzf --height=40% --layout=reverse --info=inline\nfzf --height=40% --layout=reverse --info=inline --border\nfzf --height=40% --layout=reverse --info=inline --border --margin=1\nfzf --height=40% --layout=reverse --info=inline --border --margin=1 --padding=1\n\n\n\nimage\n\n\n(See man page to see the full list of options)\nBut you definitely don’t want to repeat --height=40% --layout=reverse --info=inline --border --margin=1 --padding=1 every time you use fzf. You could write a wrapper script or shell alias, but there is an easier option. Define $FZF_DEFAULT_OPTS like so:\nexport FZF_DEFAULT_OPTS=\"--height=40% --layout=reverse --info=inline --border --margin=1 --padding=1\"\n\n\n1.2.2 --tmux\n(Requires tmux 3.3 or later)\nIf you’re using tmux, you can open fzf in a tmux popup using --tmux option.\n# Open fzf in a tmux popup at the center of the screen with 70% width and height\nfzf --tmux 70%\n\n\n\nimage\n\n\n--tmux option is silently ignored if you’re not on tmux. So if you’re trying to avoid opening fzf in fullscreen, try specifying both --height and --tmux.\n# --tmux is specified later so it takes precedence over --height when on tmux.\n# If you're not on tmux, --tmux is ignored and --height is used instead.\nfzf  --height 70% --tmux 70%\nYou can also specify the position, width, and height of the popup window in the following format:\n\n[center|top|bottom|left|right][,SIZE[%]][,SIZE[%][,border-native]]\n\n# 100% width and 60% height\nfzf --tmux 100%,60% --border horizontal\n\n\n\nimage\n\n\n# On the right (50% width)\nfzf --tmux right\n\n\n\nimage\n\n\n# On the left (40% width and 70% height)\nfzf --tmux left,40%,70%\n\n\n\nimage\n\n\n\n[!TIP] You might also want to check out my tmux plugins which support this popup window layout.\n\nhttps://github.com/junegunn/tmux-fzf-url\nhttps://github.com/junegunn/tmux-fzf-maccy"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#dynamic-reloading-of-the-list",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#dynamic-reloading-of-the-list",
    "title": "",
    "section": "1.3 Dynamic reloading of the list",
    "text": "1.3 Dynamic reloading of the list\nfzf can dynamically update the candidate list using an arbitrary program with reload bindings (The design document for reload can be found here).\n\n1.3.1 Updating the list of processes by pressing CTRL-R\nThis example shows how you can set up a binding for dynamically updating the list without restarting fzf.\n(date; ps -ef) |\n  fzf --bind='ctrl-r:reload(date; ps -ef)' \\\n      --header=$'Press CTRL-R to reload\\n\\n' --header-lines=2 \\\n      --preview='echo {}' --preview-window=down,3,wrap \\\n      --layout=reverse --height=80% | awk '{print $2}' | xargs kill -9\n\n\n\nimage\n\n\n\nThe initial command is (date; ps -ef). It prints the current date and time, and the list of the processes.\nWith --header option, you can show any message as the fixed header.\nTo disallow selecting the first two lines (date and ps header), we use --header-lines=2 option.\n--bind='ctrl-r:reload(date; ps -ef)' binds CTRL-R to reload action that runs date; ps -ef, so we can update the list of the processes by pressing CTRL-R.\nWe use simple echo {} preview option, so we can see the entire line on the preview window below even if it’s too long\n\n\n\n1.3.2 Toggling between data sources\nYou’re not limited to just one reload binding. Set up multiple bindings so you can switch between data sources.\nfind * | fzf --prompt 'All&gt; ' \\\n             --header 'CTRL-D: Directories / CTRL-F: Files' \\\n             --bind 'ctrl-d:change-prompt(Directories&gt; )+reload(find * -type d)' \\\n             --bind 'ctrl-f:change-prompt(Files&gt; )+reload(find * -type f)'\n\n\n\nimage\n\n\n\n\n\nimage\n\n\n\n\n1.3.3 Toggling with a single key binding\nThe above example uses two different key bindings to toggle between two modes, but can we just use a single key binding?\nTo make a key binding behave differently each time it is pressed, we need:\n\na way to store the current state. i.e. “which mode are we in?”\nand a way to dynamically perform different actions depending on the state.\n\nThe following example shows how to 1. store the current mode in the prompt string, 2. and use this information ($FZF_PROMPT) to determine which actions to perform using the transform action.\nfd --type file |\n  fzf --prompt 'Files&gt; ' \\\n      --header 'CTRL-T: Switch between Files/Directories' \\\n      --bind 'ctrl-t:transform:[[ ! $FZF_PROMPT =~ Files ]] &&\n              echo \"change-prompt(Files&gt; )+reload(fd --type file)\" ||\n              echo \"change-prompt(Directories&gt; )+reload(fd --type directory)\"' \\\n      --preview '[[ $FZF_PROMPT =~ Files ]] && bat --color=always {} || tree -C {}'"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#ripgrep-integration",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#ripgrep-integration",
    "title": "",
    "section": "1.4 Ripgrep integration",
    "text": "1.4 Ripgrep integration\n\n1.4.1 Using fzf as the secondary filter\n\nRequires bat\nRequires Ripgrep\n\nfzf is pretty fast for filtering a list that you will rarely have to think about its performance. But it is not the right tool for searching for text inside many large files, and in that case you should definitely use something like Ripgrep.\nIn the next example, Ripgrep is the primary filter that searches for the given text in files, and fzf is used as the secondary fuzzy filter that adds interactivity to the workflow. And we use bat to show the matching line in the preview window.\nThis is a bash script and it will not run as expected on other non-compliant shells. To avoid the compatibility issue, let’s save this snippet as a script file called rfv.\n#!/usr/bin/env bash\n\n# 1. Search for text in files using Ripgrep\n# 2. Interactively narrow down the list using fzf\n# 3. Open the file in Vim\nrg --color=always --line-number --no-heading --smart-case \"${*:-}\" |\n  fzf --ansi \\\n      --color \"hl:-1:underline,hl+:-1:underline:reverse\" \\\n      --delimiter : \\\n      --preview 'bat --color=always {1} --highlight-line {2}' \\\n      --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \\\n      --bind 'enter:become(vim {1} +{2})'\nAnd run it with an initial query string.\n# Make the script executable\nchmod +x rfv\n\n# Run it with the initial query \"algo\"\n./rfv algo\n\nRipgrep will perform the initial search and list all the lines that contain algo. Then we further narrow down the list on fzf.\n\n\n\n\nimage\n\n\nI know it’s a lot to digest, let’s try to break down the code.\n\nRipgrep prints the matching lines in the following format\nman/man1/fzf.1:54:.BI \"--algo=\" TYPE\nman/man1/fzf.1:55:Fuzzy matching algorithm (default: v2)\nman/man1/fzf.1:58:.BR v2 \"     Optimal scoring algorithm (quality)\"\nsrc/pattern_test.go:7:  \"github.com/junegunn/fzf/src/algo\"\nThe first token delimited by : is the file path, and the second token is the line number of the matching line. They respectively correspond to {1} and {2} in the preview command.\n\n--preview 'bat --color=always {1} --highlight-line {2}'\n\nAs we run rg with --color=always option, we should tell fzf to parse ANSI color codes in the input by setting --ansi.\nWe customize how fzf colors various text elements using --color option. -1 tells fzf to keep the original color from the input. See man fzf for available color options.\nThe value of --preview-window option consists of 5 components delimited by ,\n\nup — Position of the preview window\n60% — Size of the preview window\nborder-bottom — Preview window border only on the bottom side\n+{2}+3/3 — Scroll offset of the preview contents\n~3 — Fixed header\n\nLet’s break down the latter two. We want to display the bat output in the preview window with a certain scroll offset so that the matching line is positioned near the center of the preview window.\n\n+{2} — The base offset is extracted from the second token\n+3 — We add 3 lines to the base offset to compensate for the header part of bat output\n\n───────┬──────────────────────────────────────────────────────────            │ File: CHANGELOG.md     ───────┼──────────────────────────────────────────────────────────        1   │ CHANGELOG        2   │ =========        3   │        4   │ 0.26.0        5   │ ------\n\n/3 adjusts the offset so that the matching line is shown at a third position in the window\n~3 makes the top three lines fixed header so that they are always visible regardless of the scroll offset\n\nInstead of using shell script to process the final output of fzf, we use become(...) action which was added in fzf 0.38.0 to turn fzf into a new process that opens the file with vim (vim {1}) and move the cursor to the line (+{2}).\n\n\n\n1.4.2 Using fzf as interactive Ripgrep launcher\nWe have learned that we can bind reload action to a key (e.g. --bind=ctrl-r:execute(ps -ef)). In the next example, we are going to bind reload action to change event so that whenever the user changes the query string on fzf, reload action is triggered.\nHere is a variation of the above rfv script. fzf will restart Ripgrep every time the user updates the query string on fzf. Searching and filtering is completely done by Ripgrep, and fzf merely provides the interactive interface. So we lose the “fuzziness”, but the performance will be better on larger projects, and it will free up memory as you narrow down the results.\n#!/usr/bin/env bash\n\n# 1. Search for text in files using Ripgrep\n# 2. Interactively restart Ripgrep with reload action\n# 3. Open the file in Vim\nRG_PREFIX=\"rg --column --line-number --no-heading --color=always --smart-case \"\nINITIAL_QUERY=\"${*:-}\"\nfzf --ansi --disabled --query \"$INITIAL_QUERY\" \\\n    --bind \"start:reload:$RG_PREFIX {q}\" \\\n    --bind \"change:reload:sleep 0.1; $RG_PREFIX {q} || true\" \\\n    --delimiter : \\\n    --preview 'bat --color=always {1} --highlight-line {2}' \\\n    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \\\n    --bind 'enter:become(vim {1} +{2})'\n\n\n\nimage\n\n\n\nInstead of starting fzf in the usual rg ... | fzf form, we make it start the initial Ripgrep process immediately via start:reload binding for the consistency of the code.\nFiltering is no longer a responsibility of fzf; hence --disabled\n{q} in the reload command evaluates to the query string on fzf prompt.\nsleep 0.1 in the reload command is for “debouncing”. This small delay will reduce the number of intermediate Ripgrep processes while we’re typing in a query.\n\n\n\n1.4.3 Switching to fzf-only search mode\nIn the previous example, we lost fuzzy matching capability as we completely delegated search functionality to Ripgrep. But we can dynamically switch to fzf-only search mode by “unbinding” reload action from change event.\n#!/usr/bin/env bash\n\n# Two-phase filtering with Ripgrep and fzf\n#\n# 1. Search for text in files using Ripgrep\n# 2. Interactively restart Ripgrep with reload action\n#    * Press alt-enter to switch to fzf-only filtering\n# 3. Open the file in Vim\nRG_PREFIX=\"rg --column --line-number --no-heading --color=always --smart-case \"\nINITIAL_QUERY=\"${*:-}\"\nfzf --ansi --disabled --query \"$INITIAL_QUERY\" \\\n    --bind \"start:reload:$RG_PREFIX {q}\" \\\n    --bind \"change:reload:sleep 0.1; $RG_PREFIX {q} || true\" \\\n    --bind \"alt-enter:unbind(change,alt-enter)+change-prompt(2. fzf&gt; )+enable-search+clear-query\" \\\n    --color \"hl:-1:underline,hl+:-1:underline:reverse\" \\\n    --prompt '1. ripgrep&gt; ' \\\n    --delimiter : \\\n    --preview 'bat --color=always {1} --highlight-line {2}' \\\n    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \\\n    --bind 'enter:become(vim {1} +{2})'\n\nPhase 1. Filtering with Ripgrep \nPhase 2. Filtering with fzf \nWe added --prompt option to show that fzf is initially running in “Ripgrep launcher mode”.\nWe added alt-enter binding that\n\nunbinds change event, so Ripgrep is no longer restarted on key press\nchanges the prompt to 2. fzf&gt;\nenables search functionality of fzf\nclears the current query string that was used to start Ripgrep process\nand unbinds alt-enter itself as this is a one-off event\n\nWe reverted --color option for customizing how the matching chunks are displayed in the second phase\n\n\n\n1.4.4 Switching between Ripgrep mode and fzf mode\nfzf 0.30.0 added rebind action so we can “rebind” the bindings that were previously “unbound” via unbind.\nThis is an improved version of the previous example that allows us to switch between Ripgrep launcher mode and fzf-only filtering mode via CTRL-R and CTRL-F.\n#!/usr/bin/env bash\n\n# Switch between Ripgrep launcher mode (CTRL-R) and fzf filtering mode (CTRL-F)\nrm -f /tmp/rg-fzf-{r,f}\nRG_PREFIX=\"rg --column --line-number --no-heading --color=always --smart-case \"\nINITIAL_QUERY=\"${*:-}\"\nfzf --ansi --disabled --query \"$INITIAL_QUERY\" \\\n    --bind \"start:reload($RG_PREFIX {q})+unbind(ctrl-r)\" \\\n    --bind \"change:reload:sleep 0.1; $RG_PREFIX {q} || true\" \\\n    --bind \"ctrl-f:unbind(change,ctrl-f)+change-prompt(2. fzf&gt; )+enable-search+rebind(ctrl-r)+transform-query(echo {q} &gt; /tmp/rg-fzf-r; cat /tmp/rg-fzf-f)\" \\\n    --bind \"ctrl-r:unbind(ctrl-r)+change-prompt(1. ripgrep&gt; )+disable-search+reload($RG_PREFIX {q} || true)+rebind(change,ctrl-f)+transform-query(echo {q} &gt; /tmp/rg-fzf-f; cat /tmp/rg-fzf-r)\" \\\n    --color \"hl:-1:underline,hl+:-1:underline:reverse\" \\\n    --prompt '1. ripgrep&gt; ' \\\n    --delimiter : \\\n    --header '╱ CTRL-R (ripgrep mode) ╱ CTRL-F (fzf mode) ╱' \\\n    --preview 'bat --color=always {1} --highlight-line {2}' \\\n    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \\\n    --bind 'enter:become(vim {1} +{2})'\n\nTo restore the query string when switching between modes, we store the current query in /tmp/rg-fzf-{r,f} files and restore the query using transform-query action which was added in fzf 0.36.0.\nAlso note that we unbind ctrl-r binding on start event which is triggered once when fzf starts.\n\n\n\n1.4.5 Switching between Ripgrep mode and fzf mode using a single key binding\nIn contrast to the previous version, we use just one hotkey to toggle between ripgrep and fzf mode. This is achieved by using the $FZF_PROMPT as a state within the transform action, a feature introduced in fzf 0.45.0. A more detailed explanation of this feature can be found in a previous section - Toggling with a single keybinding.\nWhen using the transform action, the placeholder (\\{q}) should be escaped to prevent immediate evaluation.\n#!/usr/bin/env bash\n\n# Switch between Ripgrep mode and fzf filtering mode (CTRL-T)\nrm -f /tmp/rg-fzf-{r,f}\nRG_PREFIX=\"rg --column --line-number --no-heading --color=always --smart-case \"\nINITIAL_QUERY=\"${*:-}\"\nfzf --ansi --disabled --query \"$INITIAL_QUERY\" \\\n    --bind \"start:reload:$RG_PREFIX {q}\" \\\n    --bind \"change:reload:sleep 0.1; $RG_PREFIX {q} || true\" \\\n    --bind 'ctrl-t:transform:[[ ! $FZF_PROMPT =~ ripgrep ]] &&\n      echo \"rebind(change)+change-prompt(1. ripgrep&gt; )+disable-search+transform-query:echo \\{q} &gt; /tmp/rg-fzf-f; cat /tmp/rg-fzf-r\" ||\n      echo \"unbind(change)+change-prompt(2. fzf&gt; )+enable-search+transform-query:echo \\{q} &gt; /tmp/rg-fzf-r; cat /tmp/rg-fzf-f\"' \\\n    --color \"hl:-1:underline,hl+:-1:underline:reverse\" \\\n    --prompt '1. ripgrep&gt; ' \\\n    --delimiter : \\\n    --header 'CTRL-T: Switch between ripgrep/fzf' \\\n    --preview 'bat --color=always {1} --highlight-line {2}' \\\n    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \\\n    --bind 'enter:become(vim {1} +{2})'\n\n\n1.4.6 Controlling Ripgrep search and fzf search simultaneously\nsearch and transform-search action allow you to trigger an fzf search with an arbitrary query string. This frees fzf from strictly following the prompt input, enabling custom search syntax.\nIn the example below, transform action is used to conditionally trigger reload for ripgrep, followed by search for fzf. The first word of the query initiates the Ripgrep process to generate the initial results, while the remainder of the query is passed to fzf for secondary filtering.\n#!/usr/bin/env bash\n\nexport TEMP=$(mktemp -u)\ntrap 'rm -f \"$TEMP\"' EXIT\n\nINITIAL_QUERY=\"${*:-}\"\nTRANSFORMER='\n  rg_pat={q:1}      # The first word is passed to ripgrep\n  fzf_pat={q:2..}   # The rest are passed to fzf\n\n  if ! [[ -r \"$TEMP\" ]] || [[ $rg_pat != $(cat \"$TEMP\") ]]; then\n    echo \"$rg_pat\" &gt; \"$TEMP\"\n    printf \"reload:sleep 0.1; rg --column --line-number --no-heading --color=always --smart-case %q || true\" \"$rg_pat\"\n  fi\n  echo \"+search:$fzf_pat\"\n'\nfzf --ansi --disabled --query \"$INITIAL_QUERY\" \\\n    --with-shell 'bash -c' \\\n    --bind \"start,change:transform:$TRANSFORMER\" \\\n    --color \"hl:-1:underline,hl+:-1:underline:reverse\" \\\n    --delimiter : \\\n    --preview 'bat --color=always {1} --highlight-line {2}' \\\n    --preview-window 'up,60%,border-line,+{2}+3/3,~3' \\\n    --bind 'enter:become(vim {1} +{2})'"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#log-tailing",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#log-tailing",
    "title": "",
    "section": "1.5 Log tailing",
    "text": "1.5 Log tailing\nfzf can run long-running preview commands and render partial results before completion. And when you specify follow flag in --preview-window option, fzf will “tail -f” the result, automatically scrolling to the bottom.\n# With \"follow\", preview window will automatically scroll to the bottom.\n# \"\\033[2J\" is an ANSI escape sequence for clearing the screen.\n# When fzf reads this code it clears the previous preview contents.\nfzf --preview-window follow --preview 'for i in $(seq 100000); do\n  echo \"$i\"\n  sleep 0.01\n  (( i % 300 == 0 )) && printf \"\\033[2J\"\ndone'\n\n\n\nimage\n\n\nAdmittedly, that was a silly example. Here’s a practical one for browsing Kubernetes pods.\npods() {\n  command='kubectl get pods --all-namespaces' fzf \\\n    --info=inline --layout=reverse --header-lines=1 \\\n    --prompt \"$(kubectl config current-context | sed 's/-context$//')&gt; \" \\\n    --header $'╱ Enter (kubectl exec) ╱ CTRL-O (open log in editor) ╱ CTRL-R (reload) ╱\\n\\n' \\\n    --bind 'start,ctrl-r:reload:$command' \\\n    --bind 'ctrl-/:change-preview-window(80%,border-bottom|hidden|)' \\\n    --bind 'enter:execute:kubectl exec -it --namespace {1} {2} -- bash' \\\n    --bind 'ctrl-o:execute:${EDITOR:-vim} &lt;(kubectl logs --all-containers --namespace {1} {2})' \\\n    --preview-window up:follow \\\n    --preview 'kubectl logs --follow --all-containers --tail=10000 --namespace {1} {2}' \"$@\"\n}\n\n\n\nimage\n\n\n\nThe preview window will “log tail” the pod\n\nHolding on to a large amount of log will consume a lot of memory. So we limited the initial log amount with --tail=10000.\n\nexecute bindings allow you to run any command without leaving fzf\n\nPress enter key on a pod to kubectl exec into it\nPress CTRL-O to open the log in your editor\n\nPress CTRL-R to reload the pod list\nPress CTRL-/ repeatedly to rotate through a different sets of preview window options\n\n80%,border-bottom\nhidden\nEmpty string after | translates to the default options from --preview-window"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#key-bindings-for-git-objects",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#key-bindings-for-git-objects",
    "title": "",
    "section": "1.6 Key bindings for git objects",
    "text": "1.6 Key bindings for git objects\nOftentimes, you want to put the identifiers of various Git object to the command-line. For example, it is common to write commands like these:\ngit checkout [SOME_COMMIT_HASH or BRANCH or TAG]\ngit diff [SOME_COMMIT_HASH or BRANCH or TAG] [SOME_COMMIT_HASH or BRANCH or TAG]\nfzf-git.sh project defines a set of fzf-based key bindings for Git objects. I strongly recommend that you check them out because they are seriously useful.\n\n1.6.1 Files listed in git status\nCTRL-GCTRL-F\n\n\n\nimage\n\n\n\n\n1.6.2 Branches\nCTRL-GCTRL-B\n\n\n\nimage\n\n\n\n\n1.6.3 Commit hashes\nCTRL-GCTRL-H\n\n\n\nimage"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#color-themes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/ADVANCED.html#color-themes",
    "title": "",
    "section": "1.7 Color themes",
    "text": "1.7 Color themes\nYou can customize how fzf colors the text elements with --color option. Here are a few color themes. Note that you need a terminal emulator that can display 24-bit colors.\n# junegunn/seoul256.vim (dark)\nexport FZF_DEFAULT_OPTS='--color=bg+:#3F3F3F,bg:#4B4B4B,border:#6B6B6B,spinner:#98BC99,hl:#719872,fg:#D9D9D9,header:#719872,info:#BDBB72,pointer:#E12672,marker:#E17899,fg+:#D9D9D9,preview-bg:#3F3F3F,prompt:#98BEDE,hl+:#98BC99'\n\n\n\nseoul256\n\n\n# junegunn/seoul256.vim (light)\nexport FZF_DEFAULT_OPTS='--color=bg+:#D9D9D9,bg:#E1E1E1,border:#C8C8C8,spinner:#719899,hl:#719872,fg:#616161,header:#719872,info:#727100,pointer:#E12672,marker:#E17899,fg+:#616161,preview-bg:#D9D9D9,prompt:#0099BD,hl+:#719899'\n\n\n\nseoul256-light\n\n\n# morhetz/gruvbox\nexport FZF_DEFAULT_OPTS='--color=bg+:#3c3836,bg:#32302f,spinner:#fb4934,hl:#928374,fg:#ebdbb2,header:#928374,info:#8ec07c,pointer:#fb4934,marker:#fb4934,fg+:#ebdbb2,prompt:#fb4934,hl+:#fb4934'\n\n\n\ngruvbox\n\n\n# arcticicestudio/nord-vim\nexport FZF_DEFAULT_OPTS='--color=bg+:#3B4252,bg:#2E3440,spinner:#81A1C1,hl:#616E88,fg:#D8DEE9,header:#616E88,info:#81A1C1,pointer:#81A1C1,marker:#81A1C1,fg+:#D8DEE9,prompt:#81A1C1,hl+:#81A1C1'\n\n\n\nnord\n\n\n# tomasr/molokai\nexport FZF_DEFAULT_OPTS='--color=bg+:#293739,bg:#1B1D1E,border:#808080,spinner:#E6DB74,hl:#7E8E91,fg:#F8F8F2,header:#7E8E91,info:#A6E22E,pointer:#A6E22E,marker:#F92672,fg+:#F8F8F2,prompt:#F92672,hl+:#F92672'\n\n\n\nmolokai\n\n\n\n1.7.1 fzf Theme Playground\nfzf Theme Playground created by Vitor Mello is a webpage where you can interactively create fzf themes.\n\n\n1.7.2 Generating fzf color theme from Vim color schemes\nThe Vim plugin of fzf can generate --color option from the current color scheme according to g:fzf_colors variable. You can find the detailed explanation here.\nHere is an example. Add this to your Vim configuration file.\nlet g:fzf_colors =\n\\ { 'fg':         ['fg', 'Normal'],\n  \\ 'bg':         ['bg', 'Normal'],\n  \\ 'preview-bg': ['bg', 'NormalFloat'],\n  \\ 'hl':         ['fg', 'Comment'],\n  \\ 'fg+':        ['fg', 'CursorLine', 'CursorColumn', 'Normal'],\n  \\ 'bg+':        ['bg', 'CursorLine', 'CursorColumn'],\n  \\ 'hl+':        ['fg', 'Statement'],\n  \\ 'info':       ['fg', 'PreProc'],\n  \\ 'border':     ['fg', 'Ignore'],\n  \\ 'prompt':     ['fg', 'Conditional'],\n  \\ 'pointer':    ['fg', 'Exception'],\n  \\ 'marker':     ['fg', 'Keyword'],\n  \\ 'spinner':    ['fg', 'Label'],\n  \\ 'header':     ['fg', 'Comment'] }\nThen you can see how the --color option is generated by printing the result of fzf#wrap().\n:echo fzf#wrap()\nUse this command to append export FZF_DEFAULT_OPTS=\"...\" line to the end of the current file.\n:call append('$', printf('export FZF_DEFAULT_OPTS=\"%s\"', matchstr(fzf#wrap().options, \"--color[^']*\")))"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/copilot.vim/LICENSE.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/copilot.vim/LICENSE.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\nGitHub Copilot is offered under the GitHub Terms of Service.\nCopyright (C) 2023 GitHub, Inc. - All Rights Reserved.\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/copilot.vim/LICENSE.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/copilot.vim/LICENSE.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html",
    "title": "",
    "section": "",
    "text": "Code\nMake your Vim/Neovim as smart as VS Code\nCustom popup menu with snippet support"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#why",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#why",
    "title": "",
    "section": "1 Why?",
    "text": "1 Why?\n\n🚀 Fast: separated NodeJS process that does not slow down Vim most of the time.\n💎 Reliable: typed language, tested with CI.\n🌟 Featured: all LSP 3.16 features are supported, see :h coc-lsp.\n❤️ Flexible: configured like VS Code, Coc extensions function similarly to VS Code extensions"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#quick-start",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#quick-start",
    "title": "",
    "section": "2 Quick Start",
    "text": "2 Quick Start\nMake sure use Vim &gt;= 9.0.0438 or Neovim &gt;= 0.8.0.\nInstall nodejs &gt;= 16.18.0:\ncurl -sL install-node.vercel.app/lts | bash\nFor vim-plug users:\n\" Use release branch (recommended)\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\n\n\" Or build from source code by using npm\nPlug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'npm ci'}\nin your .vimrc or init.vim, then restart Vim and run :PlugInstall.\nCheckout Install coc.nvim for more info.\nYou have to install coc extensions or configure language servers for LSP support.\nInstall extensions like this:\n:CocInstall coc-json coc-tsserver\nOr you can configure a language server in your coc-settings.json(open it using :CocConfig) like this:\n{\n  \"languageserver\": {\n    \"go\": {\n      \"command\": \"gopls\",\n      \"rootPatterns\": [\"go.mod\"],\n      \"trace.server\": \"verbose\",\n      \"filetypes\": [\"go\"]\n    }\n  }\n}\nCheckout the wiki for more details:\n\nCompletion with sources\nUsing the configuration file\nUsing coc extensions\nConfigure language servers\nF.A.Q\n\nCheckout :h coc-nvim for Vim interface."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#example-vim-configuration",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#example-vim-configuration",
    "title": "",
    "section": "3 Example Vim configuration",
    "text": "3 Example Vim configuration\nConfiguration is required to make coc.nvim easier to work with, since it doesn’t change your key-mappings or Vim options. This is done as much as possible to avoid conflict with your other plugins.\n❗️Important: Some Vim plugins can change your key mappings. Please use command like:verbose imap &lt;tab&gt; to make sure that your keymap has taken effect.\n\" https://raw.githubusercontent.com/neoclide/coc.nvim/master/doc/coc-example-config.vim\n\n\" May need for Vim (not Neovim) since coc.nvim calculates byte offset by count\n\" utf-8 byte sequence\nset encoding=utf-8\n\" Some servers have issues with backup files, see #649\nset nobackup\nset nowritebackup\n\n\" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable\n\" delays and poor user experience\nset updatetime=300\n\n\" Always show the signcolumn, otherwise it would shift the text each time\n\" diagnostics appear/become resolved\nset signcolumn=yes\n\n\" Use tab for trigger completion with characters ahead and navigate\n\" NOTE: There's always complete item selected by default, you may want to enable\n\" no select by `\"suggest.noselect\": true` in your configuration file\n\" NOTE: Use command ':verbose imap &lt;tab&gt;' to make sure tab is not mapped by\n\" other plugin before putting this into your config\ninoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt;\n      \\ coc#pum#visible() ? coc#pum#next(1) :\n      \\ CheckBackspace() ? \"\\&lt;Tab&gt;\" :\n      \\ coc#refresh()\ninoremap &lt;expr&gt;&lt;S-TAB&gt; coc#pum#visible() ? coc#pum#prev(1) : \"\\&lt;C-h&gt;\"\n\n\" Make &lt;CR&gt; to accept selected completion item or notify coc.nvim to format\n\" &lt;C-g&gt;u breaks current undo, please make your own choice\ninoremap &lt;silent&gt;&lt;expr&gt; &lt;CR&gt; coc#pum#visible() ? coc#pum#confirm()\n                              \\: \"\\&lt;C-g&gt;u\\&lt;CR&gt;\\&lt;c-r&gt;=coc#on_enter()\\&lt;CR&gt;\"\n\nfunction! CheckBackspace() abort\n  let col = col('.') - 1\n  return !col || getline('.')[col - 1]  =~# '\\s'\nendfunction\n\n\" Use &lt;c-space&gt; to trigger completion\nif has('nvim')\n  inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-space&gt; coc#refresh()\nelse\n  inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-@&gt; coc#refresh()\nendif\n\n\" Use `[g` and `]g` to navigate diagnostics\n\" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list\nnmap &lt;silent&gt;&lt;nowait&gt; [g &lt;Plug&gt;(coc-diagnostic-prev)\nnmap &lt;silent&gt;&lt;nowait&gt; ]g &lt;Plug&gt;(coc-diagnostic-next)\n\n\" GoTo code navigation\nnmap &lt;silent&gt;&lt;nowait&gt; gd &lt;Plug&gt;(coc-definition)\nnmap &lt;silent&gt;&lt;nowait&gt; gy &lt;Plug&gt;(coc-type-definition)\nnmap &lt;silent&gt;&lt;nowait&gt; gi &lt;Plug&gt;(coc-implementation)\nnmap &lt;silent&gt;&lt;nowait&gt; gr &lt;Plug&gt;(coc-references)\n\n\" Use K to show documentation in preview window\nnnoremap &lt;silent&gt; K :call ShowDocumentation()&lt;CR&gt;\n\nfunction! ShowDocumentation()\n  if CocAction('hasProvider', 'hover')\n    call CocActionAsync('doHover')\n  else\n    call feedkeys('K', 'in')\n  endif\nendfunction\n\n\" Highlight the symbol and its references when holding the cursor\nautocmd CursorHold * silent call CocActionAsync('highlight')\n\n\" Symbol renaming\nnmap &lt;leader&gt;rn &lt;Plug&gt;(coc-rename)\n\n\" Formatting selected code\nxmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)\nnmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)\n\naugroup mygroup\n  autocmd!\n  \" Setup formatexpr specified filetype(s)\n  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')\naugroup end\n\n\" Applying code actions to the selected code block\n\" Example: `&lt;leader&gt;aap` for current paragraph\nxmap &lt;leader&gt;a  &lt;Plug&gt;(coc-codeaction-selected)\nnmap &lt;leader&gt;a  &lt;Plug&gt;(coc-codeaction-selected)\n\n\" Remap keys for applying code actions at the cursor position\nnmap &lt;leader&gt;ac  &lt;Plug&gt;(coc-codeaction-cursor)\n\" Remap keys for apply code actions affect whole buffer\nnmap &lt;leader&gt;as  &lt;Plug&gt;(coc-codeaction-source)\n\" Apply the most preferred quickfix action to fix diagnostic on the current line\nnmap &lt;leader&gt;qf  &lt;Plug&gt;(coc-fix-current)\n\n\" Remap keys for applying refactor code actions\nnmap &lt;silent&gt; &lt;leader&gt;re &lt;Plug&gt;(coc-codeaction-refactor)\nxmap &lt;silent&gt; &lt;leader&gt;r  &lt;Plug&gt;(coc-codeaction-refactor-selected)\nnmap &lt;silent&gt; &lt;leader&gt;r  &lt;Plug&gt;(coc-codeaction-refactor-selected)\n\n\" Run the Code Lens action on the current line\nnmap &lt;leader&gt;cl  &lt;Plug&gt;(coc-codelens-action)\n\n\" Map function and class text objects\n\" NOTE: Requires 'textDocument.documentSymbol' support from the language server\nxmap if &lt;Plug&gt;(coc-funcobj-i)\nomap if &lt;Plug&gt;(coc-funcobj-i)\nxmap af &lt;Plug&gt;(coc-funcobj-a)\nomap af &lt;Plug&gt;(coc-funcobj-a)\nxmap ic &lt;Plug&gt;(coc-classobj-i)\nomap ic &lt;Plug&gt;(coc-classobj-i)\nxmap ac &lt;Plug&gt;(coc-classobj-a)\nomap ac &lt;Plug&gt;(coc-classobj-a)\n\n\" Remap &lt;C-f&gt; and &lt;C-b&gt; to scroll float windows/popups\nif has('nvim-0.4.0') || has('patch-8.2.0750')\n  nnoremap &lt;silent&gt;&lt;nowait&gt;&lt;expr&gt; &lt;C-f&gt; coc#float#has_scroll() ? coc#float#scroll(1) : \"\\&lt;C-f&gt;\"\n  nnoremap &lt;silent&gt;&lt;nowait&gt;&lt;expr&gt; &lt;C-b&gt; coc#float#has_scroll() ? coc#float#scroll(0) : \"\\&lt;C-b&gt;\"\n  inoremap &lt;silent&gt;&lt;nowait&gt;&lt;expr&gt; &lt;C-f&gt; coc#float#has_scroll() ? \"\\&lt;c-r&gt;=coc#float#scroll(1)\\&lt;cr&gt;\" : \"\\&lt;Right&gt;\"\n  inoremap &lt;silent&gt;&lt;nowait&gt;&lt;expr&gt; &lt;C-b&gt; coc#float#has_scroll() ? \"\\&lt;c-r&gt;=coc#float#scroll(0)\\&lt;cr&gt;\" : \"\\&lt;Left&gt;\"\n  vnoremap &lt;silent&gt;&lt;nowait&gt;&lt;expr&gt; &lt;C-f&gt; coc#float#has_scroll() ? coc#float#scroll(1) : \"\\&lt;C-f&gt;\"\n  vnoremap &lt;silent&gt;&lt;nowait&gt;&lt;expr&gt; &lt;C-b&gt; coc#float#has_scroll() ? coc#float#scroll(0) : \"\\&lt;C-b&gt;\"\nendif\n\n\" Use CTRL-S for selections ranges\n\" Requires 'textDocument/selectionRange' support of language server\nnmap &lt;silent&gt; &lt;C-s&gt; &lt;Plug&gt;(coc-range-select)\nxmap &lt;silent&gt; &lt;C-s&gt; &lt;Plug&gt;(coc-range-select)\n\n\" Add `:Format` command to format current buffer\ncommand! -nargs=0 Format :call CocActionAsync('format')\n\n\" Add `:Fold` command to fold current buffer\ncommand! -nargs=? Fold :call     CocAction('fold', &lt;f-args&gt;)\n\n\" Add `:OR` command for organize imports of the current buffer\ncommand! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')\n\n\" Add (Neo)Vim's native statusline support\n\" NOTE: Please see `:h coc-status` for integrations with external plugins that\n\" provide custom statusline: lightline.vim, vim-airline\nset statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}\n\n\" Mappings for CoCList\n\" Show all diagnostics\nnnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;a  :&lt;C-u&gt;CocList diagnostics&lt;cr&gt;\n\" Manage extensions\nnnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;e  :&lt;C-u&gt;CocList extensions&lt;cr&gt;\n\" Show commands\nnnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;c  :&lt;C-u&gt;CocList commands&lt;cr&gt;\n\" Find symbol of current document\nnnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;o  :&lt;C-u&gt;CocList outline&lt;cr&gt;\n\" Search workspace symbols\nnnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;s  :&lt;C-u&gt;CocList -I symbols&lt;cr&gt;\n\" Do default action for next item\nnnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;j  :&lt;C-u&gt;CocNext&lt;CR&gt;\n\" Do default action for previous item\nnnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;k  :&lt;C-u&gt;CocPrev&lt;CR&gt;\n\" Resume latest coc list\nnnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;p  :&lt;C-u&gt;CocListResume&lt;CR&gt;"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#example-lua-configuration",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#example-lua-configuration",
    "title": "",
    "section": "4 Example Lua configuration",
    "text": "4 Example Lua configuration\nNOTE: This only works in Neovim 0.7.0dev+.\n-- https://raw.githubusercontent.com/neoclide/coc.nvim/master/doc/coc-example-config.lua\n\n-- Some servers have issues with backup files, see #649\nvim.opt.backup = false\nvim.opt.writebackup = false\n\n-- Having longer updatetime (default is 4000 ms = 4s) leads to noticeable\n-- delays and poor user experience\nvim.opt.updatetime = 300\n\n-- Always show the signcolumn, otherwise it would shift the text each time\n-- diagnostics appeared/became resolved\nvim.opt.signcolumn = \"yes\"\n\nlocal keyset = vim.keymap.set\n-- Autocomplete\nfunction _G.check_back_space()\n    local col = vim.fn.col('.') - 1\n    return col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') ~= nil\nend\n\n-- Use Tab for trigger completion with characters ahead and navigate\n-- NOTE: There's always a completion item selected by default, you may want to enable\n-- no select by setting `\"suggest.noselect\": true` in your configuration file\n-- NOTE: Use command ':verbose imap &lt;tab&gt;' to make sure Tab is not mapped by\n-- other plugins before putting this into your config\nlocal opts = {silent = true, noremap = true, expr = true, replace_keycodes = false}\nkeyset(\"i\", \"&lt;TAB&gt;\", 'coc#pum#visible() ? coc#pum#next(1) : v:lua.check_back_space() ? \"&lt;TAB&gt;\" : coc#refresh()', opts)\nkeyset(\"i\", \"&lt;S-TAB&gt;\", [[coc#pum#visible() ? coc#pum#prev(1) : \"\\&lt;C-h&gt;\"]], opts)\n\n-- Make &lt;CR&gt; to accept selected completion item or notify coc.nvim to format\n-- &lt;C-g&gt;u breaks current undo, please make your own choice\nkeyset(\"i\", \"&lt;cr&gt;\", [[coc#pum#visible() ? coc#pum#confirm() : \"\\&lt;C-g&gt;u\\&lt;CR&gt;\\&lt;c-r&gt;=coc#on_enter()\\&lt;CR&gt;\"]], opts)\n\n-- Use &lt;c-j&gt; to trigger snippets\nkeyset(\"i\", \"&lt;c-j&gt;\", \"&lt;Plug&gt;(coc-snippets-expand-jump)\")\n-- Use &lt;c-space&gt; to trigger completion\nkeyset(\"i\", \"&lt;c-space&gt;\", \"coc#refresh()\", {silent = true, expr = true})\n\n-- Use `[g` and `]g` to navigate diagnostics\n-- Use `:CocDiagnostics` to get all diagnostics of current buffer in location list\nkeyset(\"n\", \"[g\", \"&lt;Plug&gt;(coc-diagnostic-prev)\", {silent = true})\nkeyset(\"n\", \"]g\", \"&lt;Plug&gt;(coc-diagnostic-next)\", {silent = true})\n\n-- GoTo code navigation\nkeyset(\"n\", \"gd\", \"&lt;Plug&gt;(coc-definition)\", {silent = true})\nkeyset(\"n\", \"gy\", \"&lt;Plug&gt;(coc-type-definition)\", {silent = true})\nkeyset(\"n\", \"gi\", \"&lt;Plug&gt;(coc-implementation)\", {silent = true})\nkeyset(\"n\", \"gr\", \"&lt;Plug&gt;(coc-references)\", {silent = true})\n\n\n-- Use K to show documentation in preview window\nfunction _G.show_docs()\n    local cw = vim.fn.expand('&lt;cword&gt;')\n    if vim.fn.index({'vim', 'help'}, vim.bo.filetype) &gt;= 0 then\n        vim.api.nvim_command('h ' .. cw)\n    elseif vim.api.nvim_eval('coc#rpc#ready()') then\n        vim.fn.CocActionAsync('doHover')\n    else\n        vim.api.nvim_command('!' .. vim.o.keywordprg .. ' ' .. cw)\n    end\nend\nkeyset(\"n\", \"K\", '&lt;CMD&gt;lua _G.show_docs()&lt;CR&gt;', {silent = true})\n\n\n-- Highlight the symbol and its references on a CursorHold event(cursor is idle)\nvim.api.nvim_create_augroup(\"CocGroup\", {})\nvim.api.nvim_create_autocmd(\"CursorHold\", {\n    group = \"CocGroup\",\n    command = \"silent call CocActionAsync('highlight')\",\n    desc = \"Highlight symbol under cursor on CursorHold\"\n})\n\n\n-- Symbol renaming\nkeyset(\"n\", \"&lt;leader&gt;rn\", \"&lt;Plug&gt;(coc-rename)\", {silent = true})\n\n\n-- Formatting selected code\nkeyset(\"x\", \"&lt;leader&gt;f\", \"&lt;Plug&gt;(coc-format-selected)\", {silent = true})\nkeyset(\"n\", \"&lt;leader&gt;f\", \"&lt;Plug&gt;(coc-format-selected)\", {silent = true})\n\n\n-- Setup formatexpr specified filetype(s)\nvim.api.nvim_create_autocmd(\"FileType\", {\n    group = \"CocGroup\",\n    pattern = \"typescript,json\",\n    command = \"setl formatexpr=CocAction('formatSelected')\",\n    desc = \"Setup formatexpr specified filetype(s).\"\n})\n\n-- Apply codeAction to the selected region\n-- Example: `&lt;leader&gt;aap` for current paragraph\nlocal opts = {silent = true, nowait = true}\nkeyset(\"x\", \"&lt;leader&gt;a\", \"&lt;Plug&gt;(coc-codeaction-selected)\", opts)\nkeyset(\"n\", \"&lt;leader&gt;a\", \"&lt;Plug&gt;(coc-codeaction-selected)\", opts)\n\n-- Remap keys for apply code actions at the cursor position.\nkeyset(\"n\", \"&lt;leader&gt;ac\", \"&lt;Plug&gt;(coc-codeaction-cursor)\", opts)\n-- Remap keys for apply source code actions for current file.\nkeyset(\"n\", \"&lt;leader&gt;as\", \"&lt;Plug&gt;(coc-codeaction-source)\", opts)\n-- Apply the most preferred quickfix action on the current line.\nkeyset(\"n\", \"&lt;leader&gt;qf\", \"&lt;Plug&gt;(coc-fix-current)\", opts)\n\n-- Remap keys for apply refactor code actions.\nkeyset(\"n\", \"&lt;leader&gt;re\", \"&lt;Plug&gt;(coc-codeaction-refactor)\", { silent = true })\nkeyset(\"x\", \"&lt;leader&gt;r\", \"&lt;Plug&gt;(coc-codeaction-refactor-selected)\", { silent = true })\nkeyset(\"n\", \"&lt;leader&gt;r\", \"&lt;Plug&gt;(coc-codeaction-refactor-selected)\", { silent = true })\n\n-- Run the Code Lens actions on the current line\nkeyset(\"n\", \"&lt;leader&gt;cl\", \"&lt;Plug&gt;(coc-codelens-action)\", opts)\n\n\n-- Map function and class text objects\n-- NOTE: Requires 'textDocument.documentSymbol' support from the language server\nkeyset(\"x\", \"if\", \"&lt;Plug&gt;(coc-funcobj-i)\", opts)\nkeyset(\"o\", \"if\", \"&lt;Plug&gt;(coc-funcobj-i)\", opts)\nkeyset(\"x\", \"af\", \"&lt;Plug&gt;(coc-funcobj-a)\", opts)\nkeyset(\"o\", \"af\", \"&lt;Plug&gt;(coc-funcobj-a)\", opts)\nkeyset(\"x\", \"ic\", \"&lt;Plug&gt;(coc-classobj-i)\", opts)\nkeyset(\"o\", \"ic\", \"&lt;Plug&gt;(coc-classobj-i)\", opts)\nkeyset(\"x\", \"ac\", \"&lt;Plug&gt;(coc-classobj-a)\", opts)\nkeyset(\"o\", \"ac\", \"&lt;Plug&gt;(coc-classobj-a)\", opts)\n\n\n-- Remap &lt;C-f&gt; and &lt;C-b&gt; to scroll float windows/popups\n---@diagnostic disable-next-line: redefined-local\nlocal opts = {silent = true, nowait = true, expr = true}\nkeyset(\"n\", \"&lt;C-f&gt;\", 'coc#float#has_scroll() ? coc#float#scroll(1) : \"&lt;C-f&gt;\"', opts)\nkeyset(\"n\", \"&lt;C-b&gt;\", 'coc#float#has_scroll() ? coc#float#scroll(0) : \"&lt;C-b&gt;\"', opts)\nkeyset(\"i\", \"&lt;C-f&gt;\",\n       'coc#float#has_scroll() ? \"&lt;c-r&gt;=coc#float#scroll(1)&lt;cr&gt;\" : \"&lt;Right&gt;\"', opts)\nkeyset(\"i\", \"&lt;C-b&gt;\",\n       'coc#float#has_scroll() ? \"&lt;c-r&gt;=coc#float#scroll(0)&lt;cr&gt;\" : \"&lt;Left&gt;\"', opts)\nkeyset(\"v\", \"&lt;C-f&gt;\", 'coc#float#has_scroll() ? coc#float#scroll(1) : \"&lt;C-f&gt;\"', opts)\nkeyset(\"v\", \"&lt;C-b&gt;\", 'coc#float#has_scroll() ? coc#float#scroll(0) : \"&lt;C-b&gt;\"', opts)\n\n\n-- Use CTRL-S for selections ranges\n-- Requires 'textDocument/selectionRange' support of language server\nkeyset(\"n\", \"&lt;C-s&gt;\", \"&lt;Plug&gt;(coc-range-select)\", {silent = true})\nkeyset(\"x\", \"&lt;C-s&gt;\", \"&lt;Plug&gt;(coc-range-select)\", {silent = true})\n\n\n-- Add `:Format` command to format current buffer\nvim.api.nvim_create_user_command(\"Format\", \"call CocAction('format')\", {})\n\n-- \" Add `:Fold` command to fold current buffer\nvim.api.nvim_create_user_command(\"Fold\", \"call CocAction('fold', &lt;f-args&gt;)\", {nargs = '?'})\n\n-- Add `:OR` command for organize imports of the current buffer\nvim.api.nvim_create_user_command(\"OR\", \"call CocActionAsync('runCommand', 'editor.action.organizeImport')\", {})\n\n-- Add (Neo)Vim's native statusline support\n-- NOTE: Please see `:h coc-status` for integrations with external plugins that\n-- provide custom statusline: lightline.vim, vim-airline\nvim.opt.statusline:prepend(\"%{coc#status()}%{get(b:,'coc_current_function','')}\")\n\n-- Mappings for CoCList\n-- code actions and coc stuff\n---@diagnostic disable-next-line: redefined-local\nlocal opts = {silent = true, nowait = true}\n-- Show all diagnostics\nkeyset(\"n\", \"&lt;space&gt;a\", \":&lt;C-u&gt;CocList diagnostics&lt;cr&gt;\", opts)\n-- Manage extensions\nkeyset(\"n\", \"&lt;space&gt;e\", \":&lt;C-u&gt;CocList extensions&lt;cr&gt;\", opts)\n-- Show commands\nkeyset(\"n\", \"&lt;space&gt;c\", \":&lt;C-u&gt;CocList commands&lt;cr&gt;\", opts)\n-- Find symbol of current document\nkeyset(\"n\", \"&lt;space&gt;o\", \":&lt;C-u&gt;CocList outline&lt;cr&gt;\", opts)\n-- Search workspace symbols\nkeyset(\"n\", \"&lt;space&gt;s\", \":&lt;C-u&gt;CocList -I symbols&lt;cr&gt;\", opts)\n-- Do default action for next item\nkeyset(\"n\", \"&lt;space&gt;j\", \":&lt;C-u&gt;CocNext&lt;cr&gt;\", opts)\n-- Do default action for previous item\nkeyset(\"n\", \"&lt;space&gt;k\", \":&lt;C-u&gt;CocPrev&lt;cr&gt;\", opts)\n-- Resume latest coc list\nkeyset(\"n\", \"&lt;space&gt;p\", \":&lt;C-u&gt;CocListResume&lt;cr&gt;\", opts)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#articles",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#articles",
    "title": "",
    "section": "5 Articles",
    "text": "5 Articles\n\ncoc.nvim 插件体系介绍\nCocList 入坑指南\nCreate coc.nvim extension to improve Vim experience\nHow to write a coc.nvim extension (and why)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#troubleshooting",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#troubleshooting",
    "title": "",
    "section": "6 Troubleshooting",
    "text": "6 Troubleshooting\nTry these steps if you experience problems with coc.nvim:\n\nEnsure your Vim version &gt;= 8.0 using :version\nIf a service failed to start, use :CocInfo or :checkhealth if you use Neovim\nCheckout the log of coc.nvim with :CocOpenLog\nIf you have issues with the language server, it’s recommended to checkout the language server output"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#feedback",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#feedback",
    "title": "",
    "section": "7 Feedback",
    "text": "7 Feedback\n\nHave a question? Start a discussion on GitHub Discussions.\nFile a bug in GitHub Issues.\nChat with us on Matrix.\n中文用户请到 中文 Matrix 讨论"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#backers",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#backers",
    "title": "",
    "section": "8 Backers",
    "text": "8 Backers\nBecome a backer and get your image on our README on GitHub with a link to your site."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#contributors",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#contributors",
    "title": "",
    "section": "9 Contributors",
    "text": "9 Contributors\n\n\n\n\n\n\n\nQiming zhao💻\n\n\nHeyward Fann💻\n\n\nRaidou💻\n\n\nkevinhwang91💻\n\n\n年糕小豆汤💻\n\n\nAvi Dessauer💻\n\n\n最上川💻\n\n\n\n\nYatao Li💻\n\n\nwongxy💻\n\n\nSam McCall💻\n\n\nSamuel Roeca💻\n\n\nAmirali Esmaeili💻\n\n\nJack Rowlingson💻\n\n\nJaehwang Jung💻\n\n\n\n\nAntoine💻\n\n\nCosmin Popescu💻\n\n\nDuc Nghiem Xuan💻\n\n\nFrancisco Lopes💻\n\n\ndaquexian💻\n\n\ndependabot[bot]💻\n\n\ngreenkeeper[bot]💻\n\n\n\n\nChris Kipp💻\n\n\nDmytro Meleshko💻\n\n\nKirill Bobyrev💻\n\n\nGontran Baerts💻\n\n\nAndy💻\n\n\nCheng JIANG💻\n\n\nCorin💻\n\n\n\n\nDaniel Zhang💻\n\n\nFerdinand Bachmann💻\n\n\nGuangqing Chen💻\n\n\nJade Meskill💻\n\n\nJasper Poppe💻\n\n\nJean Jordaan💻\n\n\nKid💻\n\n\n\n\nPieter van Loon💻\n\n\nRobert Liebowitz💻\n\n\nSeth Messer💻\n\n\nUncleBill💻\n\n\nZERO💻\n\n\nfsouza💻\n\n\nXiaoZhang💻\n\n\n\n\nwhyreal💻\n\n\nyehuohan💻\n\n\nバクダンくん💻\n\n\nRaphael💻\n\n\ntbodt💻\n\n\nAaron McDaid💻\n\n\nAasif Versi💻\n\n\n\n\nAbner Silva💻\n\n\nAdam Stankiewicz💻\n\n\nAdamansky Anton💻\n\n\nAhmed El Gabri💻\n\n\nAlexandr Kondratev💻\n\n\nAndrew Shim💻\n\n\nAndy Lindeman💻\n\n\n\n\nAugustin💻\n\n\nBastien Orivel💻\n\n\nBen Lu💻\n\n\nBen💻\n\n\nBrendan Roy💻\n\n\nbrianembry💻\n\n\nbr💻\n\n\n\n\nCason Adams💻\n\n\nChang Y💻\n\n\nChayoung You💻\n\n\nChen Lijun💻\n\n\nChen Mulong💻\n\n\nChris Weyl💻\n\n\ndezza💻\n\n\n\n\nCody Allen💻\n\n\nDamien Rajon💻\n\n\nDaniel Eriksson💻\n\n\nDaniel Jenson💻\n\n\nDavid Mejorado💻\n\n\nDeric Pang💻\n\n\nDing Tao💻\n\n\n\n\nDoron Behar💻\n\n\nEgor Kovetskiy💻\n\n\nElKowar💻\n\n\nEmeliov Dmitrii💻\n\n\nFabian Becker💻\n\n\nFallenWarrior2k💻\n\n\nFausto Núñez Alberro💻\n\n\n\n\nFelipe Ramos💻\n\n\nFredrik Borg💻\n\n\nGavin Sim💻\n\n\nGibson Fahnestock💻\n\n\nGiovanni Giordano💻\n\n\nGopal Adhikari💻\n\n\nHanh Le💻\n\n\n\n\nhedy💻\n\n\nHendrik Lammers💻\n\n\nHenry Barreto💻\n\n\nHugo💻\n\n\nJackie Li💻\n\n\nJakub Nowak💻\n\n\nJames Pickard💻\n\n\n\n\nJia Sui💻\n\n\nEllie Hermaszewska💻\n\n\nJoel Bradshaw💻\n\n\nJohn Carlo Roberto💻\n\n\nJonas Holst Damtoft💻\n\n\nJonathan Lehman💻\n\n\nJoosep Alviste💻\n\n\n\n\nJosa Gesell💻\n\n\nJoshua Rubin💻\n\n\nJulian Grinblat💻\n\n\nJulian Valentin💻\n\n\nKabbAmine💻\n\n\nKay Gosho💻\n\n\nKenny Huynh💻\n\n\n\n\nKevin Rambaud💻\n\n\nKian Cross💻\n\n\nKristijan Husak💻\n\n\nNullVoxPopuli💻\n\n\nLasse Peters💻\n\n\nNoel Errenil💻\n\n\nLinArcX💻\n\n\n\n\nLiu-Cheng Xu💻\n\n\nMarc💻\n\n\nMarius Gawrisch💻\n\n\nMark Hintz💻\n\n\nMathieu Le Tiec💻\n\n\nMatt White💻\n\n\nMatthew Evans💻\n\n\n\n\nMe1onRind💻\n\n\nQyriad💻\n\n\nNarcis B.💻\n\n\nNeur1n💻\n\n\nNicolas Dermine💻\n\n\nNoah💻\n\n\nPENG Rui💻\n\n\n\n\nPaco💻\n\n\nPeng Guanwen💻\n\n\nPetter Wahlman💻\n\n\nPooya Moradi💻\n\n\nQuade Morrison💻\n\n\nRalf Vogler💻\n\n\nRan Chen💻\n\n\n\n\nRicardo García Vega💻\n\n\nRick Jones💻\n\n\nRyan Christian💻\n\n\nSalo💻\n\n\nSam Nolan💻\n\n\nSaurav💻\n\n\nSean Mackesey💻\n\n\n\n\nSheel Patel💻\n\n\nSolomon Ng💻\n\n\nSri Kadimisetty💻\n\n\nStephen Prater💻\n\n\nSune Kibsgaard💻\n\n\nAquaakuma💻\n\n\nTakumi Kawase💻\n\n\n\n\nThe Blob SCP💻\n\n\nTomasz N💻\n\n\nTomoyuki Harada💻\n\n\nTony Fettes💻\n\n\nTony Narlock💻\n\n\nTony Wang💻\n\n\nVictor Quach💻\n\n\n\n\nWhisperity💻\n\n\nWilliam Turner💻\n\n\nXiaochao Dong💻\n\n\nHugh Hou💻\n\n\nJackie Li💻\n\n\nZachary Freed💻\n\n\nakiyosi💻\n\n\n\n\nalexjg💻\n\n\naste4💻\n\n\nclyfish💻\n\n\ndev7ba💻\n\n\ndiartyz💻\n\n\ndoza-daniel💻\n\n\nequal-l2💻\n\n\n\n\nfong💻\n\n\nhexh💻\n\n\nhhiraba💻\n\n\nic-768💻\n\n\njaviertury💻\n\n\nkarasu💻\n\n\nkevineato💻\n\n\n\n\nEduardo Costa💻\n\n\nmicchy326💻\n\n\nmidchildan💻\n\n\nminefuto💻\n\n\nmiyanokomiya💻\n\n\nmiyaviee💻\n\n\nmonkoose💻 🐛\n\n\n\n\nmujx💻\n\n\nmvilim💻\n\n\nnaruaway💻\n\n\npiersy💻\n\n\nryantig💻\n\n\nrydesun💻\n\n\nsc00ter💻\n\n\n\n\nsmhc💻\n\n\nSam Kaplan💻\n\n\ntasuten💻\n\n\ntodesking💻\n\n\ntypicode💻\n\n\n李鸣飞💻\n\n\nIkko Ashimine📖\n\n\n\n\nRammiah🐛\n\n\nAlisue🐛\n\n\nbigshans📖\n\n\nRobert Boyd III🐛\n\n\nYuki Iwanaga💻\n\n\nSpringHack🐛\n\n\nLucas Burns📖\n\n\n\n\nqiqiboy💻\n\n\ntimsu92📖\n\n\nShawn M Moore💻\n\n\nAaron U’Ren🐛\n\n\nSeniorMars📖\n\n\n牧羊犬真Q📖\n\n\ngeraldspreer📖\n\n\n\n\nFabio📖\n\n\nLi Yunting🐛\n\n\nJeff L.💻\n\n\nElliot Winkler💻\n\n\nSvetlozar Iliev💻\n\n\nJames Garbutt💻\n\n\nQingzhou Yue💻\n\n\n\n\nMaarten de Vries💻\n\n\nA4-Tacks💻\n\n\nforceofsystem💻\n\n\nlake💻\n\n\nDavid O’Trakoun📖\n\n\naispeaking💻\n\n\nChristian Clauss💻\n\n\n\n\nMicah Halter💻\n\n\nCristiano De Michele💻\n\n\nYong Jie💻\n\n\nKira Oakley📖\n\n\nMerouane Atig📖\n\n\nGerald💻\n\n\nNicklas Sedlock💻\n\n\n\n\nAdam Tao💻\n\n\nitsf4llofstars📖\n\n\nBrian Wo📖\n\n\nEric Wong💻\n\n\noxalica💻\n\n\nChristian Zangl💻\n\n\nzoumi💻\n\n\n\n\n\n\n\n\n\n\n\n\nThis project follows the all-contributors specification. Contributions of any kind are welcome!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/Readme.html#license",
    "title": "",
    "section": "10 License",
    "text": "10 License\nAnti 996"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/zacanger-angr.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/zacanger-angr.vim.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n1 angr.vim\n\n\n\nscreenshot\n\n\nThe screenshot is using the angr airline theme.\n\n1.0.1 Installation:\nCopy colors/angr.vim to your vim colors dir. For vim, this is ~/.vim/colors/. For Neovim, ~/.config/init/nvim/colors/.\nRecommended use your plugin manager:\n\nNeoBundle: :NeoBundleDirectInstall 'zacanger/angr.vim'.\nPlug: Plug 'zacanger/angr.vim'\nVundle: Plugin 'zacanger/angr.vim'\n\nOther plugin managers: see their docs.\n\n\n1.0.2 Thanks\nwatsoncj fixed some inconsistencies and made the Airline theme.\n\nLICENSE\nDonate\n\n\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/zacanger-angr.vim.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/zacanger-angr.vim.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wimstefan-Lightning.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wimstefan-Lightning.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wimstefan-Lightning.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wimstefan-Lightning.html#screenshots",
    "title": "",
    "section": "1.1 Screenshots",
    "text": "1.1 Screenshots\nAll screenshots are taken in VIM cli on a 256-colour enabled terminal (rxvt-unicode-256color).\nVim diff \nzsh"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#features",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#features",
    "title": "",
    "section": "1 Features",
    "text": "1 Features\n\nNo configuration are required to start using it.\nSupport 256 colors terminal.\nSupports Neovim’s built-in language server client.\nSupports lightline.vim theme.\nSupports vim-clap theme.\nSupports nvim-treesitter.\nSupports LSP Semantic highlights.\nLoading speed is increased by precompiled script. (powered by Rust)\n\nCheck here for a list of supported file types and plugins :muscle:"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#gallery",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#gallery",
    "title": "",
    "section": "2 Gallery",
    "text": "2 Gallery\n\n2.1 Neovim (GUI)\n\n\n\nNeovim\n\n\n\n\n2.2 Vim (with 256 colors)\n\n\n\nVim"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#installation",
    "title": "",
    "section": "3 Installation",
    "text": "3 Installation\nThis is an example of installation using vim-plug.\nPlug 'wadackel/vim-dogrun'"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#usage",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#usage",
    "title": "",
    "section": "4 Usage",
    "text": "4 Usage\nAdd the following settings to your $MYVIMRC (.vimrc or init.vim).\ncolorscheme dogrun\n\n4.1 Options\n\n4.1.1 lightline theme\nIf you want, specify dogrun to colorscheme.\nlet g:lightline = {\n  \\ 'colorscheme': 'dogrun',\n  \\ }\n\n\n4.1.2 vim-clap theme\nIf you want, specify dogrun to g:clap_theme.\nlet g:clap_theme = 'dogrun'"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#supported-filetypes-plugins",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#supported-filetypes-plugins",
    "title": "",
    "section": "5 Supported Filetypes & Plugins",
    "text": "5 Supported Filetypes & Plugins\nThere are not many Ftypes and Plugins supported by dogrun yet.\nFrom now on, we will gradually support it :dog:\n\n5.1 Filetypes\n\nc\ncpp\ncs\ndiff\ngo (vim-go)\ngraphql (vim-graphql)\nhtml\njavascript\njson\nmake\nmarkdown (vim-markdown)\npython\nruby\nrust (rust.vim)\ntoml (vim-toml)\ntypescript (yats.vim)\nvim\nyaml\nzsh\n\n\n\n5.2 Plugins\n\nALE\nCopilot.vim\nDiffview.nvim\nclever-f.vim\ncoc.nvim\nconflict-marker.vim\ndefx-git\ndefx-icons\ndressing.nvim\neasymotion\nfern.vim\nfidget.nvim\nflash.nvim\nfugitive.vim\nfzf.vim\ngitsigns.nvim\nlightline.vim\nnull-ls.nvim\nnvim-cmp\nnvim-tree/nvim-tree.lua\nnvim-treesitter\ntelescope.nvim\nvim-clap\nvim-gitgutter\nvim-lsp\nvimfiler"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#other-tools",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#other-tools",
    "title": "",
    "section": "6 Other Tools",
    "text": "6 Other Tools\nIn the future, there may be a possibility to offer separate themes, but for now, we will introduce the inline themes for each tool.\n\n6.1 WezTerm\n\n\n\nWezTerm\n\n\n~/.config/wezterm/wezterm.lua\nreturn {\n  colors = {\n    foreground = '#9ea3c0',\n    background = '#222433',\n    cursor_fg = '#222433',\n    cursor_bg = '#9ea3c0',\n    selection_bg = '#363e7f',\n    ansi = {\n      '#111219',\n      '#c2616b',\n      '#7cbe8c',\n      '#8e8a6f',\n      '#4c89ac',\n      '#6c75cb',\n      '#73c1a9',\n      '#9ea3c0',\n    },\n    brights = {\n      '#545c8c',\n      '#b871b8',\n      '#7cbe8c',\n      '#a8a384',\n      '#589ec6',\n      '#929be5',\n      '#59b6b6',\n      '#9ea3c0',\n    },\n  },\n}\n\n\n6.2 fzf\n\n\n\nfzf\n\n\n~/.zshrc or ~/.bashrc\nexport FZF_DEFAULT_OPTS='--color=fg:#8085a6,bg:#222433,hl:#bdc3e6 --color=fg+:#8085a6,bg+:#363e7f,hl+:#bdc3e6 --color=info:#929be5,prompt:#545c8c,pointer:#ff79c6 --color=marker:#b871b8,spinner:#73c1a9,header:#545c8c,border:#545c8c,gutter:-1'"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#inspired",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#inspired",
    "title": "",
    "section": "7 Inspired",
    "text": "7 Inspired\nMany thanks for the following projects:\n\nvim-color-spring-night"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/wadackel-vim-dogrun.html#license",
    "title": "",
    "section": "8 License",
    "text": "8 License\nMIT License © wadackel"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-wombat256.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-wombat256.vim.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\nThis is a mirror of http://www.vim.org/scripts/script.php?script_id=2465\nThis is a version of Wombat (vimscript #1778) by Lars Nielsen that also works on xterms with 256 colors.\nA customized version is also available, with additional highlighting groups for diff mode and search.\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-wombat256.vim.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-wombat256.vim.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-rdark-terminal2.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-rdark-terminal2.vim.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\nThis is a mirror of http://www.vim.org/scripts/script.php?script_id=4970\nrdark-terminal2 modifies color for CursorLine, Type, Special, ColorColumn and IncSearch to enhance visibility for Dark Pastels. It is based on rdark-terminal of Lukas Grässlin (http://www.vim.org/scripts/script.php?script_id=3202) which ported the rdark colorscheme for 256 colors (http://www.vim.org/scripts/script.php?script_id=1732).\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-rdark-terminal2.vim.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-rdark-terminal2.vim.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/tyrannicaltoucan-vim-deep-space.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/tyrannicaltoucan-vim-deep-space.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/tyrannicaltoucan-vim-deep-space.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/tyrannicaltoucan-vim-deep-space.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nNOTE: This color scheme requires a terminal that supports true colors!\nInstall this color scheme using your preferred Vim plugin manager, then add the following to your (n)vim configuration file:\nset background=dark\nset termguicolors\ncolorscheme deep-space\n\n1.1.1 Options\nIf your terminal supports italics, add:\nlet g:deepspace_italics=1\n\n\n1.1.2 Vim Airline\nTo use the included vim-airline theme:\nlet g:airline_theme='deep_space'\n\n\n1.1.3 Vim Lightline\nTo use the included lightline.vim theme:\nlet g:lightline = {\n      \\ 'colorscheme': 'deepspace',\n      \\ }"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nOption 1: Install via a plugin manager, like vim-plug\n\nAdd Plug 'sts10/vim-pink-moon' as a plugin in your Vim config file (either vimrc or init.vim if using Neovim)\nRun :PlugInstall\nPut colorscheme pink-moon in your Vim config file. vim-pink-moon should run set background=dark for you, but you can put it in your config file as well.\n\nA similar procedure should work with other plugin managers.\nOption 2: Manual installation (assuming you’re using Vim, as opposed to Neovim)\n\nDownload the colorscheme: curl -O https://raw.githubusercontent.com/sts10/vim-pink-moon/master/colors/pink-moon.vim\nMove the colorscheme to ~/.vim/colors: mkdir -p ~/.vim/colors & mv pink-moon.vim ~/.vim/colors/\nPut colorscheme pink-moon and set background=dark in your vimrc."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#fonts-in-screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#fonts-in-screenshots",
    "title": "",
    "section": "1.2 Fonts in screenshots",
    "text": "1.2 Fonts in screenshots\nThe fonts in the screenshots above and below are Deja Vu Sans Mono and JetBrains Mono."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#inspiration",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#inspiration",
    "title": "",
    "section": "1.3 Inspiration",
    "text": "1.3 Inspiration\nI liked the vibe of this setup (which I found thanks to this Reddit post), though I ended up picking most if not all of the colors independently. Not a lot of science involved!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#troubleshooting-getting-true-hex-colors",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#troubleshooting-getting-true-hex-colors",
    "title": "",
    "section": "1.4 Troubleshooting (Getting true HEX colors)",
    "text": "1.4 Troubleshooting (Getting true HEX colors)\nVim-Pink-Moon has HEX color codes in it, so it works well with GUI versions of Vim (including MacVim), as well as terminals that have true color support (like iTerm2 for macOS).\nIf you’re using Neovim and macOS and having trouble with getting the colors in the screenshot above to appear for you, I’ve got a blog post explaining how to get HEX colors in iTerm2 using Neovim. I also later wrote a separate blog post about troubleshooting HEX colors will regular terminal Vim + iTerm.\n\n1.4.1 Further troubleshooting\nTry re-ordering these setting in your Vim config file (vimrc) to the following\nset termguicolors\ncolorscheme pink-moon\nset background=dark\nFor help from another source, check the gruvbox wiki."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#slack-theme",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#slack-theme",
    "title": "",
    "section": "1.5 Slack Theme",
    "text": "1.5 Slack Theme\nIf you want to make your Slack theme match Pink Moon, go to Preferences &gt; Sidebar &gt; Theme, scroll down to “Custom Theme”, and paste in #333C47,#434852,#6F98B3,#F0FDFF,#434852,#F0FDFF,#D08785,#D08785."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#more-screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sts10-vim-pink-moon.html#more-screenshots",
    "title": "",
    "section": "1.6 More screenshots",
    "text": "1.6 More screenshots\n\n\n\nA screenshot of some Ruby code, as color-highlighted by the Pink Moon colorscheme, using the font JetBrains Mono\n\n\n\n\n\nA screenshot of some Ruby code, as color-highlighted by the Pink Moon colorscheme, using the font DejaVu Sans Mono"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/scheakur-vim-scheakur.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/scheakur-vim-scheakur.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/scheakur-vim-scheakur.html#light",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/scheakur-vim-scheakur.html#light",
    "title": "",
    "section": "1.1 Light",
    "text": "1.1 Light\nset background=light\ncolorscheme scheakur\nhttp://vimcolors.com/252/scheakur/light"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/scheakur-vim-scheakur.html#dark",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/scheakur-vim-scheakur.html#dark",
    "title": "",
    "section": "1.2 Dark",
    "text": "1.2 Dark\nset background=dark\ncolorscheme scheakur\nhttp://vimcolors.com/252/scheakur/dark"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html#requirements",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html#requirements",
    "title": "",
    "section": "1.1 Requirements",
    "text": "1.1 Requirements\n\n1.1.1 GUI\nYou don’t need to do anything for these colorschemes to work in GVim or MacVim.\n\n\n1.1.2 TUI\nFlattened’s only requirement is the same as Solarized: that you change your terminal emulator’s so-called “ASCII” colors to the ones used by Solarized.\nThe reason is simple. Most terminal nowadays are capable of displaying 256 colors but none of the colors used in the Solarized palette can be found in the semi-standard Xterm palette. Therefore, we are forced to assign the Solarized non-standard values to colors 0 through 15 of our terminal emulator if we want to see the actual Solarized colors instead of poor approximations.\nThe exact method depends on your terminal emulator. I’d suggest simply using the values from this table and call it a day:\nTERMCOL   HEX     RGB\n-------   ------- -----------\nblack     #073642   7  54  66\nred       #dc322f 220  50  47\ngreen     #859900 133 153   0\nyellow    #b58900 181 137   0\nblue      #268bd2  38 139 210\nmagenta   #d33682 211  54 130\ncyan      #2aa198  42 161 152\nwhite     #eee8d5 238 232 213\n\nbrblack   #002b36   0  43  54\nbrred     #cb4b16 203  75  22\nbrgreen   #586e75  88 110 117\nbryellow  #657b83 101 123 131\nbrblue    #839496 131 148 150\nbrmagenta #6c71c4 108 113 196\nbrcyan    #93a1a1 147 161 161\nbrwhite   #fdf6e3 253 246 227"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html#installation",
    "title": "",
    "section": "1.2 Installation",
    "text": "1.2 Installation\nPut flattened_dark.vim and/or flattened_light.vim in ~/.vim/colors/ (on unix-like systems) or %userprofile%\\vimfiles\\colors\\ (on Windows)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html#configuration",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html#configuration",
    "title": "",
    "section": "1.3 Configuration",
    "text": "1.3 Configuration\nWhat do you want to configure? It’s a freaking colorscheme!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html#usage",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html#usage",
    "title": "",
    "section": "1.4 Usage",
    "text": "1.4 Usage\nIf you want the “dark” version:\n:color flattened_dark\nIf you want the “light” version:\n:color flattened_light\nIf you like what you see and decide to make flattened your default colorscheme, add the relevant line to your vimrc:\ncolorscheme flattened_light\nor:\ncolorscheme flattened_dark"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html#screenshots-or-it-didnt-happen",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-flattened.html#screenshots-or-it-didnt-happen",
    "title": "",
    "section": "1.5 Screenshots or it didn’t happen",
    "text": "1.5 Screenshots or it didn’t happen\n\n1.5.1 MacVim\n\n\n\nflattened_dark in Macvim\n\n\n\n\n\nflattened_light in Macvim\n\n\n\n\n1.5.2 iTerm\n\n\n\nflattened_dark in iTerm\n\n\n\n\n\nflattened_light in iTerm"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html",
    "title": "",
    "section": "",
    "text": "Code\n# Vim-Two-Firewatch Colorscheme\nVim-Two-Firewatch is a GUI and true color optimised colorscheme that gracefully adapts if your environment supports only 256 colors. It comes with a light and a dark variation.\nIt has been tested on a Mac NeoVim 0.1.4 and 0.1.5, Vim 7.4.1952 with iTerm2 (nightly build) This colorscheme has also a theme for Airline."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#why-two-firewatch",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#why-two-firewatch",
    "title": "",
    "section": "0.1 Why Two-Firewatch?",
    "text": "0.1 Why Two-Firewatch?\nSimurai has created duotone themes for Atom.\nDuoTone themes use only 2 hues (7 shades in total), toning down less important parts and hightlighting only the important ones.\nThese themes come in different flavours (mostly dark) and some contributors have created light shades.\nI wasn’t satisfied with the any adpatations for Vim, for different reasons:\n\nI loved the original duotone light theme\nI hated the original duotone dark theme, background was too… purple\n\nI decided to give it a go:\n\nBe as close as possible to the duotone light theme\nAdapt firewatch for Atom so it fits with the duotone principle"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#appearance",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#appearance",
    "title": "",
    "section": "0.2 Appearance",
    "text": "0.2 Appearance\nHere is how this looks like:\nLight version: \nDark version:"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#installation",
    "title": "",
    "section": "0.3 Installation",
    "text": "0.3 Installation\nUse your favorite vim plugin packager."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#usage",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#usage",
    "title": "",
    "section": "0.4 Usage",
    "text": "0.4 Usage\nset background=dark \" or light if you prefer the light version\nlet g:two_firewatch_italics=1\ncolo two-firewatch\n\nlet g:airline_theme='twofirewatch' \" if you have Airline installed and want the associated theme\nIf your environment supports italic, you can set g:two_firewatch_italics=1 in your vimrc"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#iterm2-theme",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#iterm2-theme",
    "title": "",
    "section": "0.5 iTerm2 Theme",
    "text": "0.5 iTerm2 Theme\nCan be found here, two flavours as well: iTerm2 Two Firwatch theme"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#toggling-background",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-two-firewatch.html#toggling-background",
    "title": "",
    "section": "0.6 Toggling background",
    "text": "0.6 Toggling background\nWhen you switch background, Vim reapplies the same colorscheme. The builtin Vim way is :set bg=dark or :set bg=light. If you want to speed the process, because like me you use a light colorscheme during the day and a dark one at night, there is a solution:\nToggle BG\nThis script has been extracted from the Solarized colorscheme and will allow you to switch background with on key stroke."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#screenshots",
    "title": "",
    "section": "1.1 Screenshots",
    "text": "1.1 Screenshots\nFira Code font on light and dark backgrounds, with Ruby code from VimColors:"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#installation",
    "title": "",
    "section": "1.2 Installation",
    "text": "1.2 Installation\nCopy the color scheme file to your ~/.vim/colors directory, or use a plugin manager like Plug or Vundle and add \"owickstrom/vim-colors-paramount\" as a plugin."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#usage",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#usage",
    "title": "",
    "section": "1.3 Usage",
    "text": "1.3 Usage\n:colorscheme paramount\nSupports both background=light and background=dark."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#credits",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#credits",
    "title": "",
    "section": "1.4 Credits",
    "text": "1.4 Credits\nBased on the pencil and off colorschemes."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#contributions",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#contributions",
    "title": "",
    "section": "1.5 Contributions",
    "text": "1.5 Contributions\nIf you find any problems with this color scheme please post an issue here on GitHub. If you don’t like some specific color, please fork it instead and customize to your liking. Thanks!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/owickstrom-vim-colors-paramount.html#license",
    "title": "",
    "section": "1.6 License",
    "text": "1.6 License\nOriginal license from pencil: MIT"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html#installation",
    "title": "",
    "section": "1 installation",
    "text": "1 installation\nIf you don’t have a preferred plugin management method, consider vim-plug, which can be installed (on *nix systems) with:\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\n  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\nHaving installed vim-plug, stellarized can be installed by adding the following to the top of your vimrc…\ncall plug#begin('~/.vim/plugged')\nPlug 'nightsense/stellarized'\ncall plug#end()\n…then restarting vim, followed by running :PlugUpdate (at the vim command line)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html#activation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html#activation",
    "title": "",
    "section": "2 activation",
    "text": "2 activation\nFor a sunny day, add the following to vimrc:\nset background=light\ncolorscheme stellarized\nFor a starry night:\nset background=dark\ncolorscheme stellarized\nTo set the background automatically based on the time at which vim is launched:\nif strftime('%H') &gt;= 7 && strftime('%H') &lt; 19\n  set background=light\nelse\n  set background=dark\nendif\ncolorscheme stellarized\n…which activates the light version of stellarized during the day (defined here as 7AM-7PM), dark version at night.\n\nBe sure to set colorscheme after background, otherwise some theme colors may not be applied."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html#status-line-themes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html#status-line-themes",
    "title": "",
    "section": "3 status line themes",
    "text": "3 status line themes\nstellarized comes with themes for airline and lightline, which can be activated with the following vimrc code:\n\n\n\n\nairline\n\n\nlightline\n\n\n\n\nlet g:airline_theme=‘stellarized_light’\n\n\nlet g:lightline = { ‘colorscheme’: ‘stellarized_light’ }\n\n\n\n\nlet g:airline_theme=‘stellarized_dark’\n\n\nlet g:lightline = { ‘colorscheme’: ‘stellarized_dark’ }\n\n\n\n\nStatus line themes can be added to the time-based snippet above:\nif strftime('%H') &gt;= 7 && strftime('%H') &lt; 19\n  set background=light\n  let g:lightline = { 'colorscheme': 'stellarized_light' }\nelse\n  set background=dark\n  let g:lightline = { 'colorscheme': 'stellarized_dark' }\nendif\ncolorscheme stellarized"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html#terminal-vim",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html#terminal-vim",
    "title": "",
    "section": "4 terminal vim",
    "text": "4 terminal vim\n\n4.1 colors\nTerminals/multiplexers with true-color support can display the exact colors of the stellarized theme.\nIn most cases, the only vimrc setting you need is:\nset termguicolors\nIn some cases you’ll also need (see :h xterm-true-color for explanation):\nlet &t_8f = \"\\&lt;Esc&gt;[38;2;%lu;%lu;%lum\"\nlet &t_8b = \"\\&lt;Esc&gt;[48;2;%lu;%lu;%lum\"\nIf termguicolors is not set, terminal vim will fall back to a rough approximation of stellarized.\nNote that if you’re running vim in iTerm2, you must use vim 8.1 in order for stellarized to work properly.\n\n\n4.2 cursor shape\nTo set mode-specific cursor shapes in terminal vim, see the Vim Tips Wiki.\nFor instance, to set cursor shapes in vte-compatible terminals, you could add to vimrc:\nlet &t_SI = \"\\&lt;Esc&gt;[6 q\"\nlet &t_SR = \"\\&lt;Esc&gt;[4 q\"\nlet &t_EI = \"\\&lt;Esc&gt;[2 q\"\n…which sets the cursor to a vertical line for insert mode, underline for replace mode, and block for normal mode."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html#shell",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-stellarized.html#shell",
    "title": "",
    "section": "5 shell",
    "text": "5 shell\n\n5.1 colors\nMany terminal emulators can be themed by sourcing the color-setting shell scripts included with stellarized. The path to these scripts will depend on your plugin management method.\nFor instance, if you use vim-plug and want to apply the dark stellarized theme to your bash or zsh shell, add the following to ~/.bashrc or ~/.zshrc:\n[ -n \"$PS1\" ] && sh ~/.vim/plugged/stellarized/shell/stellarized_dark.sh\nOr for the fish shell, add to ~/.config/fish/config.fish:\nif status --is-interactive\n  sh ~/.vim/plugged/stellarized/shell/stellarized_dark.sh\nend\nIf you use vundle, replace plugged in the above paths with bundle.\nReplace dark with light for the light theme.\n\n\n5.2 fish syntax\nAgain, the script path will depend on your plugin management method.\nFor the dark theme in a vim-plug setup, add to ~/.config/fish/config.fish:\nsource ~/.vim/plugged/stellarized/shell/stellarized_dark.fish\n\n                    \n\nThe 4.5:1 W3C contrast ratio standard for readability is met by all text/background combinations, with the exception of some transient highlighting (e.g. cursorline/column), which nonetheless well exceeds the minimal ISO 3:1 standard.\n\n\nimage credit: night sky photo by ESO/S. Brunier (CC BY 4.0)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-carbonized.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-carbonized.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\nThis repository has been superseded by vimspectr.\n.\n.\n.\n\ncarbonized\n\n\nA vim theme inspired by the Carbon keycap set by T0mb3ry.\n\n\nscreenshots\n\n\n\n\ncarbonized-dark\n\n\ncarbonized-light\n\n\n\n\n\n\n\n\n\n\n\n\n\npictured font: Input Mono Narrow (1.2x line spacing)\n\n\n\nsetup\n\n\ninstallation\n\n\nWhile vim themes can be installed manually (place theme file in ~/.vim/colors/), a plugin helper is recommended.\n\n\nIf you don’t have a preferred helper, consider trying vim-plug, which can be installed with:\n\n\n\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\n  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n\n\n\n\nTo install carbonized using vim-plug, add the following to the top of your vimrc:\n\n\n\ncall plug#begin('~/.vim/plugged')\nPlug 'nightsense/carbonized'\ncall plug#end()\n\n\n\n\nThen restart vim and run PlugUpdate (from the vim command line).\n\n\nactivation\n\n\nTo activate the carbonized theme, add one of the following lines to your vimrc:\n\n\n\ncolorscheme carbonized-light\n\n\ncolorscheme carbonized-dark\n\n\n\nTo activate the lightline theme, add one of the following lines to your lightline config:\n\n\n\n ‘colorscheme’: ‘carbonized_light’,\n\n\n ‘colorscheme’: ‘carbonized_dark’,\n\n\n\n\nTo assign themes to specific intervals of the day, try the night-and-day plugin.\n\n\n\noptions\n\n\nYou can tweak the following options by adding lines to your `vimrc’.\n\n\nDisable highlighted current line number:\n\n\n\nlet g:carbonized_dark_CursorLineNr = 'off'\nlet g:carbonized_light_CursorLineNr = 'off'\n\n\n\n\nDisable the highlighted line number background:\n\n\n\nlet g:carbonized_dark_LineNr = 'off'\nlet g:carbonized_light_LineNr = 'off'\n\n\n\n\nterminal vim\n\n\nSee the nightshell repository, which allows carbonized to be used in a variety of terminal applications.\n\n\npalette\n\n\ncarbonized consists of 8 theme-distinct base colours, which are used for most interface elements, and 8 standard accent colours (common to the “nightsense theme family”) used for syntax highlighting.\n\n\n\n\nhues were selected at the scale of 1/48 (7.5°) colour wheel intervals\n\n\nsaturations and values were selected at the scale of 1/24 (4.17%)\n\n\nthe ISO 3:1 contrast standard is met by nearly all text/background combinations, exceptions being made for some transient-highlighted backgrounds (e.g. cursorcolumn, cursorline)\n\n\n\n\n\n\n\nbase\n\n\nlight accents\n\n\ndark accents\n\n\n\n\n\n\n 2b2b2b \n\n\n f55050 \n\n\n bf5858\n\n\n\n\n 3b3b37 \n\n\n e06a26 \n\n\n b56f45\n\n\n\n\n 75756e \n\n\n d4ac35 \n\n\n ab8e38\n\n\n\n\n 8a8a81 \n\n\n 219e21 \n\n\n 508a50\n\n\n\n\n 9e9e95 \n\n\n 1b9e9e \n\n\n 458a8a\n\n\n\n\n b5b5aa \n\n\n 468dd4 \n\n\n 557b9e\n\n\n\n\n f0f0e1 \n\n\n a26fbf \n\n\n 8b6a9e\n\n\n\n\n fffff0 \n\n\n d46a84 \n\n\n ab6a7a\n\n\n\n\n\n Red, the colour of alarm, is used for warning elements, including error messages, misspellings, and diff deletions.\n\n\n Orange, the colour of fire, can be associated with the preliminary “warmup” phase of some activity; literally, this could be the heating-up of a hearth for forging, or a stove for cooking. Orange is therefore used for preliminary elements, such as preprocessor commands (which prepare data to be handled by another program), incremental searching (that is, a search term in the process of being typed), titles, and miscapitalized words.\n\n\n Yellow, the classic highlighting colour, is applied to elements that are not warnings, yet should draw attention with high visibility. These highlighted elements include search results, task tags (TODO, FIXME…), and diff changes.\n\n\n Green, the colour that says “go ahead, proceed with the task at hand”, is used for action elements, such as statements (if/then, while/do, case…), mode indicators (insert, visual…), vim user prompts, and diff additions.\n\n\n Teal is named after the “common teal”, a kind of duck, thus connecting this colour with the concept of “species”, which is a means of classifying life into very specific types. Teal is therefore used for specifying object types, such as data type (boolean, integer, string…) or storage class (static, volatile…), as well as marking mislocalized words (that is, words that are not misspelled but of the wrong type, namely a foreign locale type).\n\n\n Blue, a colour of calm stability, is used for constants, which come in the form of boolean values, integers, floating-point numbers, characters, and strings.\n\n\n Purple, often associated with (historically) rare purple dyes produced for special works of art, is used for special text, including special characters (standalone or within syntax units), vim tags, and debugging statements. Rarely-used words are also marked, allowing the writer to consider whether such a specially uncommon word is appropriate.\n\n\n Pink, the colour of spring blossoms, is used for object names, including the names of variables and functions. To code is to bring countless objects blossoming into life as one types their names.\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-carbonized.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-carbonized.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html",
    "title": "",
    "section": "",
    "text": "Code\ngruvbox is heavily inspired by badwolf, jellybeans and solarized.\nDesigned as a bright theme with pastel ‘retro groove’ colors and light/dark mode switching in the way of solarized. The main focus when developing gruvbox is to keep colors easily distinguishable, contrast enough and still pleasant for the eyes."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#attention",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#attention",
    "title": "",
    "section": "1 Attention",
    "text": "1 Attention\n\nRead this first\nTypeface from gallery is Fantasque Sans Mono\nTypeface from screenshots below is Fira Mono"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#screenshots",
    "title": "",
    "section": "2 Screenshots",
    "text": "2 Screenshots\nRefer Gallery for more syntax-specific screenshots.\n\n2.1 Dark mode\n\n\n\nScreenshot Dark\n\n\n\n\n2.2 Light mode\n\n\n\nScreenshot Light\n\n\n\n\n2.3 Airline theme\n\n\n\nScreenshot Airline"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#palette",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#palette",
    "title": "",
    "section": "3 Palette",
    "text": "3 Palette\n\n3.1 Dark mode\n\n\n\nPalette Dark\n\n\n\n\n3.2 Light mode\n\n\n\nPalette Light"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#contrast-options",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#contrast-options",
    "title": "",
    "section": "4 Contrast options",
    "text": "4 Contrast options\nRefer wiki section for contrast configuration and other options.\n\n\n\nContrast Options"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#documentation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#documentation",
    "title": "",
    "section": "5 Documentation",
    "text": "5 Documentation\nPlease check wiki for installation details, terminal-specific setup, troubleshooting, configuration options and others."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#features",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#features",
    "title": "",
    "section": "6 Features",
    "text": "6 Features\n\nLots of style-customization options (contrast, color invertion, italics usage etc.)\nExtended filetype highlighting: Html, Xml, Vim, Clojure, C, Python, JavaScript, TypeScript, PureScript, CoffeeScript, Ruby, Objective-C, Go, Lua, MoonScript, Java, Markdown, Haskell, Elixir\nSupported plugins: EasyMotion, vim-sneak, Indent Guides, indentLine, Rainbow Parentheses, Airline, Lightline, GitGutter, Signify, ShowMarks, Signature, Syntastic, Ale, CtrlP, Startify, NERDTree, Dirvish"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#contributions",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#contributions",
    "title": "",
    "section": "7 Contributions",
    "text": "7 Contributions\nSee gruvbox-contrib repo for contributions, ports and extras."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#todo",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#todo",
    "title": "",
    "section": "8 ToDo",
    "text": "8 ToDo\n\nFiletype syntax highlighting (R, TeX, Swift, Erlang)\nPlugin support (Tagbar, VimPlug)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#self-promotion",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#self-promotion",
    "title": "",
    "section": "9 Self-Promotion",
    "text": "9 Self-Promotion\nIf you like gruvbox follow the repository on GitHub and vote for it on vim.org."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/morhetz-gruvbox.html#license",
    "title": "",
    "section": "10 License",
    "text": "10 License\nMIT/X11"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mhartington-oceanic-next.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mhartington-oceanic-next.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mhartington-oceanic-next.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mhartington-oceanic-next.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nAll major plugin managers for vim/nvim are supported\n&lt;PACKAGE_MANAGER&gt; 'mhartington/oceanic-next'\nFor vim, add the following to your .vimrc.\n(On Google Cloud Shell try to set t_Co=256 instead of set termguicolors even though your vim version is 8)\n\" Theme\n syntax enable\n\" for vim 7\n set t_Co=256\n\n\" for vim 8\n if (has(\"termguicolors\"))\n  set termguicolors\n endif\n\ncolorscheme OceanicNext\nFor neovim, add the following to your init.vim.\n\" For Neovim 0.1.3 and 0.1.4\nlet $NVIM_TUI_ENABLE_TRUE_COLOR=1\n\n\" Or if you have Neovim &gt;= 0.1.5\nif (has(\"termguicolors\"))\n set termguicolors\nendif\n\n\" Theme\nsyntax enable\ncolorscheme OceanicNext\nThere is an included theme for vim-airline, to use it, just change the airline theme to:\n  let g:airline_theme='oceanicnext'\nThere is a light mode, but it still needs some work. Currently, light mode has issues with cursor, need to tweak the colors a bit for that. Also, the included airline theme could use some work in light mode. Right now it is the exact same as the dark version, I’d like to tweak this a bit. If anyone would like to contribute, I’d be happy to accept a Pull Request."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mhartington-oceanic-next.html#configuration",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mhartington-oceanic-next.html#configuration",
    "title": "",
    "section": "1.2 Configuration",
    "text": "1.2 Configuration\nIf your terminal and setup supports it, you can enable italics and bold fonts with the following setting\n  syntax on\n  let g:oceanic_next_terminal_bold = 1\n  let g:oceanic_next_terminal_italic = 1\n  colorscheme OceanicNext\nIf your terminal has transparancy, you can enable it in neovim by adding the following lines to your init.vim after calling colorscheme OceanicNext:\nhi Normal guibg=NONE ctermbg=NONE\nhi LineNr guibg=NONE ctermbg=NONE\nhi SignColumn guibg=NONE ctermbg=NONE\nhi EndOfBuffer guibg=NONE ctermbg=NONE\nEach line above disables the background for a given highlight group (e.g., LineNr). You can choose which to disable. This will show your terminal’s background (whether or not it’s transparent). For best results, use an Oceanic Next color scheme in your terminal."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mhartington-oceanic-next.html#screenshot",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mhartington-oceanic-next.html#screenshot",
    "title": "",
    "section": "1.3 Screenshot",
    "text": "1.3 Screenshot\nBase colors used in the theme.\n\nneovim\n\nShown here with vim-devicons"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nFollow your favourite plugin manager’s instruction, e.g., vim-plug:\nPlug 'liuchengxu/space-vim-dark'\nNotes:\n\nIf you want to enable italics in terminal:\n\ncheck if the current terminal is able to display italics correctly: echo -e \"\\e[3mfoo\\e[23m\"]]\", if the output is foo , the terminal (-emulator) supports italics.\nIf the terminal supports italics, put hi Comment cterm=italic after colorshcme command in your vimrc.\ncolorscheme space-vim-dark\nhi Comment cterm=italic\n\nIf you want to make the background transparent, override the related items in your vimrc:\ncolorscheme space-vim-dark\nhi Normal     ctermbg=NONE guibg=NONE\nhi LineNr     ctermbg=NONE guibg=NONE\nhi SignColumn ctermbg=NONE guibg=NONE\n\n\n\nIf you prefer the grey comment:\ncolorscheme space-vim-dark\nhi Comment guifg=#5C6370 ctermfg=59"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#gui-or-terminal-with-true-colors-enabled",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#gui-or-terminal-with-true-colors-enabled",
    "title": "",
    "section": "1.2 GUI or Terminal with true colors enabled",
    "text": "1.2 GUI or Terminal with true colors enabled\ncolor space-vim-dark\nset termguicolors\nhi LineNr ctermbg=NONE guibg=NONE\n\n\n\nscreenshot"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#cterm-256-colors",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#cterm-256-colors",
    "title": "",
    "section": "1.3 Cterm (256 colors)",
    "text": "1.3 Cterm (256 colors)\n\n\n\nscreenshot\n\n\n\n1.3.1 Change background color\n\n\n\nscreenshot\n\n\n\"   Range:   233 (darkest) ~ 238 (lightest)\n\"   Default: 235\nlet g:space_vim_dark_background = 234\ncolor space-vim-dark"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#airline",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#airline",
    "title": "",
    "section": "1.4 Airline",
    "text": "1.4 Airline\n\" Vim Script\nlet g:airline_theme='violet'"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#lightline",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#lightline",
    "title": "",
    "section": "1.5 Lightline",
    "text": "1.5 Lightline\n\" Vim Script\nlet g:lightline = {'colorscheme': 'violet'}"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#credits",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/liuchengxu-space-vim-dark.html#credits",
    "title": "",
    "section": "1.6 Credits",
    "text": "1.6 Credits\n\nThanks to the great effort of @axvr . Now we have the Xresources port of space-vim-dark theme.\n\n\nTo use this colour scheme for X based applications (e.g. Xterm, URxvt, etc.): 1. Copy all lines from this file which are not comments (comments are lines which begin with a !) into your ~/.Xresources file. 2. Reload your configuration file with: xrdb ~/.Xresources."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#contents",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#contents",
    "title": "",
    "section": "1.1 Contents",
    "text": "1.1 Contents\n\nInstallation\nLanguages and Filetypes Support\nPlugins Support\n\nBuilt-in\nAirline\nLightline\nGitsigns.nvim\n\nCustomize\n\nFont styles\nBackground\nOverrides colors\n\nWhy i have to install other plugins\nLicense"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#installation",
    "title": "",
    "section": "1.2 Installation",
    "text": "1.2 Installation\nYou can install purify easily if you are using vim-plug:\nPlug 'kyoz/purify', { 'rtp': 'vim' }\nNote: Other vim plugin manager have similar installation, just remember about rtp option\nThen add this to your vim config file:\nsyntax on \" This is required\ncolorscheme purify\nNote: All custom options should be placed before you call colorscheme purify. If not, it’ll not have any effect."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#languages-and-filetypes-support",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#languages-and-filetypes-support",
    "title": "",
    "section": "1.3 Languages and Filetypes Support",
    "text": "1.3 Languages and Filetypes Support\nPurify supports consistent color syntax for almost all common languages and file types (based on vim’s runtime syntax):\n\nHtml, Html5…\nCss, Scss, Sass, Less\nJson, Xml, Markdown\nJavascript, Typescript (Require typescript-vim’s syntax)\nPython, Go\nC, C_++\nAll languages that vim support til now"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#frameworks-support",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#frameworks-support",
    "title": "",
    "section": "1.4 Frameworks support",
    "text": "1.4 Frameworks support\n\nReact (Require vim-jsx-pretty)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#plugins-support",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#plugins-support",
    "title": "",
    "section": "1.5 Plugins Support",
    "text": "1.5 Plugins Support\n\n1.5.1 Built-in:\nBy default, without any configuration, purify auto-supports consistent colors for:\n\nNERDTree\nfzf.vim\nEasyMotion\nOther plugins that use highlight syntax that define in w18 and highlight-group\n\n\n\n1.5.2 Airline\nIf you are using vim-airline:\nlet g:airline_theme='purify'\n\n\n1.5.3 Lightline\nIf you are using lightline.vim:\nlet g:lightline = {\n      \\ 'colorscheme': 'purify',\n      \\ }\n\n\n1.5.4 Gitsigns.nvim\nYou don’t have to do anything, just install Gitsigns.nvim correctly"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#customize",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#customize",
    "title": "",
    "section": "1.6 Customize",
    "text": "1.6 Customize\n\n1.6.1 Font styles\nBy default, Purify will support for italic, bold, underline… You can disable them if you want:\nlet g:purify_bold = 0        \" default: 1\nlet g:purify_italic = 0      \" default: 1\nlet g:purify_underline = 0   \" default: 1\nlet g:purify_undercurl = 0   \" default: 1\nlet g:purify_inverse = 0     \" default: 1\nNote: Those style formats only working if your terminal, your settings, your fonts support em.\n\n\n1.6.2 Background\nBy default, Vim using your terminal background color as the background colors.\nIf you are using GUI version of vim/neovim, it’ll have Purify Background (#252834), but if you are using terminal vim or neovim, you have to choose and set the background yourself:\ncolorscheme purify \"--------------------------------- Set onedark theme\nhi Normal guibg=#252834 ctermbg=234 \"---- Place this after you set the colorscheme\nP/s: If you are nvim-qt, you may need set this to your ginit.vim\nset background=dark\n\n\n1.6.3 Override colors\nYou can override purify’s colors if there are some colors you don’t like:\nlet g:purify_override_colors = {\n    \\ 'pink':  { 'gui': '#FF87FF', 'cterm': '213' },\n    \\ 'green': { 'gui': '#5FD700', 'cterm': '76' }\n\\ }"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#why-i-have-to-install-other-plugins",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#why-i-have-to-install-other-plugins",
    "title": "",
    "section": "1.7 Why I have to install other plugins",
    "text": "1.7 Why I have to install other plugins\n\nPurify is only aim for colorscheme, I’ve tried my best to make purify colorscheme look the same for all languages supported by vim, neovim.\nBut for new languages, frameworks… you have to install other plugins to have correct syntax, I’ll try my best to support plugins that have a good syntax for new languages, frameworks like React, Vue…"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#lisence",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kyoz-purify.html#lisence",
    "title": "",
    "section": "1.8 Lisence",
    "text": "1.8 Lisence\nMIT © Kyoz"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/keith-parsec.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/keith-parsec.vim.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/keith-parsec.vim.html#example",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/keith-parsec.vim.html#example",
    "title": "",
    "section": "1.1 Example",
    "text": "1.1 Example\n\n\n\nscreenshot\n\n\nIf you don’t have a preferred installation method check out vim-plug"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/keith-parsec.vim.html#usage",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/keith-parsec.vim.html#usage",
    "title": "",
    "section": "1.2 Usage",
    "text": "1.2 Usage\nTo enable parsec add these to your ~/.vimrc:\ncolorscheme parsec"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html",
    "title": "",
    "section": "",
    "text": "Code\nA dark Vim/Neovim color scheme for the GUI and 16/256/true-color terminals, based on FlatColor, with colors inspired by the excellent One Dark syntax theme for the Atom text editor."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#color-reference",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#color-reference",
    "title": "",
    "section": "1 Color Reference",
    "text": "1 Color Reference\n\n\n\nColor Reference"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#breaking-changes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#breaking-changes",
    "title": "",
    "section": "2 Breaking Changes",
    "text": "2 Breaking Changes\nPull request #271, merged July 11, 2021, contained several breaking changes, especially for 16-color users.\nIf you are an existing onedark.vim user that is suddenly having issues after this PR was merged, see the PR description for details."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#supported-plugins",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#supported-plugins",
    "title": "",
    "section": "3 Supported Plugins",
    "text": "3 Supported Plugins\nonedark.vim includes support for the following Vim and Neovim plugins:\n\nairblade/vim-gitgutter\ndense-analysis/ale\neasymotion/vim-easymotion\nitchyny/lightline.vim\nlewis6991/gitsigns.nvim\nmhinz/vim-signify\nneoclide/coc.nvim\nneomake/neomake\nNeovim LSP\nplasticboy/vim-markdown\nprabirshrestha/vim-lsp\ntpope/vim-fugitive\nvim-airline/vim-airline"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#installation",
    "title": "",
    "section": "4 Installation",
    "text": "4 Installation\n\nInstall the theme using your Vim plug-in manager of choice (or manually, by placing colors/onedark.vim in your ~/.vim/colors/ directory and autoload/onedark.vim in your ~/.vim/autoload/ directory.)\nThe theme also supports being installed as a Vim 8 package. Simply clone this repository into ~/.vim/pack/*/opt/ (so that the local path to this README would end up being ~/.vim/pack/*/opt/onedark.vim/README.md) and add packadd! onedark.vim to your ~/.vimrc. (The * in the path can be any value; see :help packages for more information.)\nIf you use Vim in a terminal, do the following to test whether your terminal emulator supports 24-bit/“true” color, then add relevant ~/.vimrc configuration if so:\nNote: GUI (non-terminal) Vim will always display 24-bit color regardless of the configuration done in this step.\nRun the following snippet in your shell:\nprintf \"\\x1b[38;2;255;100;0mTRUECOLOR\\x1b[0m\\n\"\nIf your terminal emulator does NOT display the word TRUECOLOR in red, it does not support 24-bit color. If you don’t want to switch to a different terminal emulator that supports 24-bit color, proceed to step 3. (After installation, the g:onedark_termcolors option may interest you.)\nIf your terminal emulator displays the word TRUECOLOR in red, it supports 24-bit color, and you should add the following lines to your ~/.vimrc to enable 24-bit color terminal support inside Vim.\n(If you use tmux, be sure to view the tmux-related notes in the first few lines.)\n\"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.\n\"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support\n\"(see &lt; http://sunaku.github.io/tmux-24bit-color.html#usage &gt; for more information.)\nif (empty($TMUX))\n  if (has(\"nvim\"))\n    \"For Neovim 0.1.3 and 0.1.4 &lt; https://github.com/neovim/neovim/pull/2198 &gt;\n    let $NVIM_TUI_ENABLE_TRUE_COLOR=1\n  endif\n  \"For Neovim &gt; 0.1.5 and Vim &gt; patch 7.4.1799 &lt; https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 &gt;\n  \"Based on Vim patch 7.4.1770 (`guicolors` option) &lt; https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd &gt;\n  \" &lt; https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 &gt;\n  if (has(\"termguicolors\"))\n    set termguicolors\n  endif\nendif\nAdd the following to your ~/.vimrc (below any lines you may have added in steps 1 and 2):\nsyntax on\ncolorscheme onedark\nInstalling the sheerun/vim-polyglot plug-in is recommended for improved syntax highlighting for various languages, but is not required."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#options",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#options",
    "title": "",
    "section": "5 Options",
    "text": "5 Options\nNote: All options should be set before the colorscheme onedark line in your ~/.vimrc.\n\ng:onedark_hide_endofbuffer: Set to 1 if you want to hide end-of-buffer filler lines (~) for a cleaner look; 0 otherwise (the default).\ng:onedark_termcolors (see Troubleshooting (below) for more information about this option): Set to 256 for 256-color terminals (the default), or set to 16 to use your terminal emulator’s native 16 colors.\ng:onedark_terminal_italics: Set to 1 if your terminal emulator supports italics; 0 otherwise (the default)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#lightline.vim-colorscheme",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#lightline.vim-colorscheme",
    "title": "",
    "section": "6 lightline.vim Colorscheme",
    "text": "6 lightline.vim Colorscheme\n\n\n\nlightline-onedark.vim Preview\n\n\nThis repository includes a companion lightline.vim colorscheme for use with onedark.vim.\nThe lightline.vim colorscheme:\n\nDepends on autoload/onedark.vim for its colors, and must therefore be used in conjunction with it.\nWorks with both color modes available in onedark.vim (16 or 256 colors), as specified in the configuration for onedark.vim.\n\n\n6.1 Installation\n(These instructions assume that lightline.vim and onedark.vim are already installed and configured to your liking.)\nPlace onedark.vim/autoload/lightline/colorscheme/onedark.vim in your ~/.vim/autoload/lightline/colorscheme/ directory either manually or by using your Vim plug-in manager of choice, then add the following lines to your ~/.vimrc (or merge them into your existing lightline.vim configuration):\nlet g:lightline = {\n  \\ 'colorscheme': 'onedark',\n  \\ }"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#vim-airline-theme",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#vim-airline-theme",
    "title": "",
    "section": "7 vim-airline Theme",
    "text": "7 vim-airline Theme\n\n\n\nairline-onedark.vim Preview\n\n\nThis repository includes a companion vim-airline theme for use with onedark.vim.\nThe vim-airline theme:\n\nDepends on autoload/onedark.vim for its colors, and must therefore be used in conjunction with it.\nWorks with both color modes available in onedark.vim (16 or 256 colors), as specified in the configuration for onedark.vim.\nIs based on vim-airline’s “tomorrow” theme.\n\n\n7.1 Installation\n(These instructions assume that vim-airline and onedark.vim are already installed and configured to your liking.)\nPlace onedark.vim/autoload/airline/themes/onedark.vim in your ~/.vim/autoload/airline/themes/ directory either manually or by using your Vim plug-in manager of choice, then add the following line to your ~/.vimrc:\nlet g:airline_theme='onedark'"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#troubleshooting",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#troubleshooting",
    "title": "",
    "section": "8 Troubleshooting",
    "text": "8 Troubleshooting\n\n8.1 Why do the colors in terminal Vim look totally crazy?\n\n\n\nBroken Colors\n\n\nIf Vim looks similar to the screenshot above, you have enabled Vim’s 24-bit color terminal support, but your terminal doesn’t support 24 bit color. Remove the relevant ~/.vimrc configuration for enabling 24-bit color support to get things looking better.\n\n\n8.2 Why do the colors in terminal Vim look slightly off/not like the preview image at the top of this README?\nIf your terminal doesn’t support 24-bit color as described in the Installation section of this README, or 24-bit color support is not always available everywhere you use your Vim configuration, colors will not look like they do in the preview image.\nHowever, you can use the g:onedark_termcolors option to control onedark.vim’s fallback colors in situations where 24-bit color terminal support is not available.\ng:onedark_termcolors can be set to one of two values, 256 for 256-color mode (the default), or 16 for 16-color mode (which uses your terminal emulator’s native 16 colors.)\nWhen Vim/Neovim are configured to use 24-bit color, the g:onedark_termcolors option is ignored. However, g:onedark_termcolors can still coexist with 24-bit color configuration. For instance, when tmux 2.1 or earlier and/or older Vim/Neovim versions that don’t support 24-bit color are used, the g:onedark_termcolors option will take effect.\n\n256-color mode is enabled by default with no additional configuration, but colors are less accurate since they are approximated using a 256-color palette. The background color will appear darker than in the preview image, and most other colors will appear brighter than in the preview image. If you don’t want to change your terminal’s color palette as described in the 16-color mode section below, and your terminal doesn’t support 24-bit color, 256-color mode is your only option.\nAlthough 256-color mode is enabled by default (when not using 24-bit color as described above), you can explicitly enable it by adding the following line to your ~/.vimrc:\nlet g:onedark_termcolors=256\n16-color mode is the preferred option, since its colors are more accurate than those of 256-color mode. However, you’ll need to set your terminal emulator’s color palette to this color scheme’s custom 16-color palette, since 16-color mode will cause the color scheme to use your terminal emulator’s native 16 colors. If you don’t use the custom 16-color palette in your terminal emulator when 16-color mode is enabled, onedark.vim’s colors will not display correctly in Vim.\nThe canonical version of the 16-color palette is an Xresources file located in this repository at term/One Dark.Xresources. Color schemes for various terminal emulators are also provided in term/. (The iTerm2 color scheme works with iTerm2 versions 2.9.x and later.) You should be able to easily convert the Xresources color scheme for use with your terminal emulator of choice either by hand, or automatically by using termcolors.\nAssuming your terminal emulator is configured to use the custom 16-color palette as described above, add the following line to your ~/.vimrc to enable 16-color mode:\nlet g:onedark_termcolors=16\n\n\n\n8.3 Why do all comments look like they’re highlighted?\n\n\n\nBroken Italics\n\n\nIf all comments look like the one in the screenshot above, you have enabled italics in onedark.vim by setting g:onedark_terminal_italics=1 in your ~/.vimrc, but your terminal isn’t displaying italics correctly. You can either remove the option or try to fix your terminal. If you’re using iTerm2 on macOS, you might need to use a special TERMINFO to get italics working.\n\n\n8.4 Why do colors look washed out when using iTerm2?\nMake sure that in Preferences, Profiles -&gt; [Active Profile] -&gt; Colors -&gt; Minimum Contrast is turned all the way down. See #145 for more information."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#miscellaneous",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/joshdick-onedark.vim.html#miscellaneous",
    "title": "",
    "section": "9 Miscellaneous",
    "text": "9 Miscellaneous\n\n9.1 Customizing onedark.vim’s look without forking the repository\nonedark.vim exposes onedark#extend_highlight and onedark#set_highlight functions that you can call from within your ~/.vimrc in order to customize the look of onedark.vim.\n\n9.1.1 onedark#extend_highlight\nonedark#extend_highlight allows you to customize individual aspects of onedark.vim’s existing highlight groups, overriding only the keys you provide. (To completely redefine/override an existing highlight group, see onedark#set_highlight below.)\nonedark#extend_highlight’s first argument should be the name of a highlight group, and its second argument should be partial style data.\nPlace the following lines before the colorscheme onedark line in your ~/.vimrc, then change the example overrides to suit your needs:\nif (has(\"autocmd\"))\n  augroup colorextend\n    autocmd!\n    \" Make `Function`s bold in GUI mode\n    autocmd ColorScheme * call onedark#extend_highlight(\"Function\", { \"gui\": \"bold\" })\n    \" Override the `Statement` foreground color in 256-color mode\n    autocmd ColorScheme * call onedark#extend_highlight(\"Statement\", { \"fg\": { \"cterm\": 128 } })\n    \" Override the `Identifier` background color in GUI mode\n    autocmd ColorScheme * call onedark#extend_highlight(\"Identifier\", { \"bg\": { \"gui\": \"#333333\" } })\n  augroup END\nendif\n\n\n9.1.2 onedark#set_highlight\nonedark#set_highlight allows you to completely redefine/override highlight groups of your choosing.\nonedark#set_highlight’s first argument should be the name of a highlight group, and its second argument should be complete style data.\nFor example, to remove the background color only when running in terminals (outside GUI mode and for use in transparent terminals,) place the following lines before the colorscheme onedark line in your ~/.vimrc:\n\" onedark.vim override: Don't set a background color when running in a terminal;\n\" just use the terminal's background color\n\" `gui` is the hex color code used in GUI mode/nvim true-color mode\n\" `cterm` is the color code used in 256-color mode\n\" `cterm16` is the color code used in 16-color mode\nif (has(\"autocmd\") && !has(\"gui_running\"))\n  augroup colorset\n    autocmd!\n    let s:white = { \"gui\": \"#ABB2BF\", \"cterm\": \"145\", \"cterm16\" : \"7\" }\n    autocmd ColorScheme * call onedark#set_highlight(\"Normal\", { \"fg\": s:white }) \" `bg` will not be styled since there is no `bg` setting\n  augroup END\nendif\n\n\n9.1.3 Global color overrides\nYou can override colors across all highlights by adding color definitions to the g:onedark_color_overrides dictionary in your ~/.vimrc like so:\nlet g:onedark_color_overrides = {\n\\ \"background\": {\"gui\": \"#2F343F\", \"cterm\": \"235\", \"cterm16\": \"0\" },\n\\ \"purple\": { \"gui\": \"#C678DF\", \"cterm\": \"170\", \"cterm16\": \"5\" }\n\\}\nThis also needs to be done before colorscheme onedark.\nMore examples of highlight group names and style data can be found in onedark.vim’s source code (colors/onedark.vim inside this repository).\n\n\n\n9.2 tmux theme\nIf you’d like a tmux theme that complements onedark.vim, @odedlaz has you covered.\n\n\n9.3 Contributing\nIf you’d like to contribute to onedark.vim, check out the contribution guidelines.\n\n\n9.4 Relatives of onedark.vim\nSeveral other themes and projects have reused code and/or colors from this project, or were otherwise inspired by it.\nIf onedark.vim isn’t meeting your needs, try one of its relatives!\n\ndrewtempelmeyer/palenight.vim\nKeitaNakamura/neodark.vim\nbase16-onedark.vim\n\nAssociated base16 scheme: tilal6991/base16-onedark-scheme\n\nrakr/vim-one\nFor Neovim &gt;= 0.5 with treesitter support: navarasu/onedark.nvim or monsonjeremy/onedark.nvim\nNeovim-only Lua port: ii14/onedark.nvim\n\n\n\n9.5 Preview images\nPreview images were taken using:\n\niTerm2 terminal emulator on macOS\n13 pt. PragmataPro Mono font\nvim-polyglot plug-in"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jdsimcoe-abstract.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jdsimcoe-abstract.vim.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jdsimcoe-abstract.vim.html#team",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jdsimcoe-abstract.vim.html#team",
    "title": "",
    "section": "1.1 Team",
    "text": "1.1 Team\nThis theme is maintained by Jonathan Simcoe."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jdsimcoe-abstract.vim.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jdsimcoe-abstract.vim.html#license",
    "title": "",
    "section": "1.2 License",
    "text": "1.2 License\nMIT License"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jaredgorski-SpaceCamp.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jaredgorski-SpaceCamp.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n\n\nSpaceCamp logo\n\n\n\n\nSpaceCamp is an attractive, comfortable, and legible colorscheme for Vim.\n\n\n \n\n\nFlight Instructions\n\n\n\n0.1 Basic Install (recommended if you’re unfamiliar with plugin managers)\n\nDownload this repository\nUnzip the downloaded file\nCopy the files /colors/spacecamp.vim and /colors/spacecamp_lite.vim into your Vim colors folder (found at ~/.vim/colors/)\nAdd the following to your .vimrc:\n\ncolorscheme spacecamp\n…or, for a slightly lighter background:\ncolorscheme spacecamp_lite\n\n\n0.2 Vim Plug\n\nAdd the following to your plugs in your .vimrc:\n\nPlug 'jaredgorski/spacecamp'\n\nRun :PlugInstall\nFollow step 4 in the basic install (above) to load the desired colorscheme via your .vimrc\n\n\n\nOutside of Vim\n\n\n\n\n0.3 Ports to other editors\n\nKakoune by @haukkagu\nVS Code by @dinogomez\n\n\n\n0.4 Terminal emulator themes\nNOTE: These files may need to be renamed or pasted as snippets into the appropriate config file for your terminal emulator. See documentation for your particular terminal emulator.\n\nAlacritty\nChrome Secure Shell\nGnome Terminal\nGuake\nKitty: spacecamp-kitty by @sebkolind\nKonsole\nLinux Console\nMinTTY\nPutty\nTerminal.app\nTerminator\nTermite\nXFCE4 Terminal\nXresources\nXshell\niTerm2\niTerm2: spacecamp-iterm by @reobin\nst\nWindows Terminal by @techtuner\n\n\n\n0.5 Colors\ncolors:\n  background: '#121212'\n  foreground: '#D0D0D0'\n\n  text:       '#0D0D0D'\n  cursor:     '#D0D0D0'\n\n  0:          '#282828'   # black\n  1:          '#D71A1A'   # red\n  2:          '#57BA37'   # green\n  3:          '#F0D50C'   # yellow\n  4:          '#91AADF'   # blue\n  5:          '#CF73E6'   # magenta\n  6:          '#B7CBF4'   # cyan\n  7:          '#DEDEDE'   # white\n\n  8:          '#666666'   # bright black\n  9:          '#FF0000'   # bright red\n  10:         '#D8FA3B'   # bright green\n  11:         '#E7C547'   # bright yellow\n  12:         '#B7CBF4'   # bright blue\n  13:         '#B77EE0'   # bright magenta\n  14:         '#A9C1DE'   # bright cyan\n  15:         '#EEEEEE'   # bright white\n\n\n\nSpaceCamp preview\n\n\n\n\n\n0.6 Contributing\nPlease send me an email at jaredgorski6@gmail.com or open an issue. If you’re feeling extra motivated, feel free to send pull requests and I’ll review them. Keep in mind that I’ll be fairly strict about changes, but I love contributors and definitely want to get your name in there :smiley:\n\n\n0.7 Acknowledgements\n\nThe Blackboard theme for textmate, which inspired the SpaceCamp look and feel\n@cocopon’s iceberg.vim, which is inspiring in general\n@zenorocha, for blessing us all with Dracula\n@reobin, for showing up on Reddit and kindly giving us spacecamp-iterm\n@sebkolind, for the random email and kindly giving us spacecamp-kitty\nterminal.sexy, for helping me generate all the terminal themes\n@haukkagu, for emailing me and writing a great port for Kakoune\n@techtuner, for showing up in my email inbox and submitting the Windows Terminal theme\n\n\nPlease feel free to drop a note to jaredgorski6@gmail.com if you have kudos or complaints. Now go push some code!\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jaredgorski-SpaceCamp.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jaredgorski-SpaceCamp.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\n\nvim-plug\nPlug 'glepnir/oceanic-material'\ndein\ncall dein#add('glepnir/oceanic-material')\nThen add this on your vimrc\n\nset background=dark\ncolorscheme oceanic_material"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#color",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#color",
    "title": "",
    "section": "1.2 Color",
    "text": "1.2 Color\n\n\n\n\n\n\n\n\n\n\n\n\n#282c34\n#1b2b34\n#EC5f67\n#d16d92\n#e78a4e\n#d8a657\n#a9b665\n\n\n\n\n\n\n\n\n\n\n\n\n\n#62b3b2\n#6699cc\n#c594c5\n#5faf5f\n#c0c5ce\n#7c6f64\n#d4be98"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#options",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#options",
    "title": "",
    "section": "1.3 Options",
    "text": "1.3 Options\n\n\n\n\n\n\n\n\noption\nvalue\ndefault\n\n\n\n\ng:oceanic_material_transparent_background\n1: enable transparent background\n0:disable transparent background\n\n\ng:oceanic_material_background\n‘medium’ use #282c34 color as background\nocean: #1b2b34 medium: #282C34 deep:#212112 darker:#1d1f21\n\n\ng:oceanic_material_allow_bold\n1: use bold for certain text\n0: not at all\n\n\ng:oceanic_material_allow_italic\n1: use italic for certain text\n0: not at all\n\n\ng:oceanic_material_allow_underline\n1: use underline for certain text\n0: not at all\n\n\ng:oceanic_material_allow_undercurl\n1: use undercurl for certain text\n0: not at all\n\n\ng:oceanic_material_allow_reverse\n1: use reverse for certain text\n0: not at all"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#support-filetype",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#support-filetype",
    "title": "",
    "section": "1.4 Support Filetype",
    "text": "1.4 Support Filetype\n\nMarkdown\nvim-restructuredtext\nHtml\nLatex\nXml\ncss\nSass\nscss\nLess\nJavascript\nTypescript\nJavascriptReact TypescriptReact\nDart\nCoffeeScript\nC/C++\nchromatica\nvim-lsp-cxx-highlight\nObjectiveC\nPython\nsemshi\nlua\njava\nkotlin\nScala\nGo\nRust\nSwift\nPHP\nRuby\nHaskell\nPerl\nOcaml\nErlang\nElixir\nClojure\nMatlab\nVimscript\nMakefile\nJson/Toml/Yaml/Ini\nDiff/Git commit"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#support-plugin",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#support-plugin",
    "title": "",
    "section": "1.5 Support Plugin",
    "text": "1.5 Support Plugin\n\nneoclide/coc.nvim\ndense-analysis/ale\nneomake/neomake\nShougo/denite.nvim\nliuchengxu/vista.vim\nscrooloose/nerdtree\nandymass/vim-matchup\neasymotion/vim-easymotion\njustinmk/vim-sneak\nluochen1990/rainbow\nitchyny/vim-cursorword\nmhinz/vim-startify\nliuchengxu/vim-which-key\nmachakann/vim-sandwich\nkristijanhusak/vim-dadbod-ui\nShougo/defx.nvim\nglepnir/dashboard-nvim"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#thanks-to",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/hardcoreplayers-oceanic-material.html#thanks-to",
    "title": "",
    "section": "2.1 Thanks to",
    "text": "2.1 Thanks to\n\nequinusocio/material-theme\nNLKNguyen/papercolor-theme\nmhartington/oceanic-next\nsainnhe/gruvbox-material"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gilgigilgil-anderson.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gilgigilgil-anderson.vim.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gilgigilgil-anderson.vim.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gilgigilgil-anderson.vim.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nUse the plugin manager of your choice, here is an example for Vim-Plug:\nPlug 'gilgigilgil/anderson.vim'\n:PlugInstall\nTo preview:\n:colorscheme anderson"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gilgigilgil-anderson.vim.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gilgigilgil-anderson.vim.html#screenshots",
    "title": "",
    "section": "1.2 Screenshots",
    "text": "1.2 Screenshots\nTerminal:\n\nPython:\n\nThe font used here is Envy Code R."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gilgigilgil-anderson.vim.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gilgigilgil-anderson.vim.html#license",
    "title": "",
    "section": "1.3 License",
    "text": "1.3 License\nMIT"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html",
    "title": "",
    "section": "",
    "text": "Code\nOrbital colorscheme for Vim:"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#screenshots",
    "title": "",
    "section": "1 Screenshots",
    "text": "1 Screenshots\nTaken on minTTY with Office Code Pro font:"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#palette",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#palette",
    "title": "",
    "section": "2 Palette",
    "text": "2 Palette\n\n\n\norbital_palette\n\n\n\n\n\nHex\nTerm\n\n\n\n\n#000000\n0\n\n\n#262626\n235\n\n\n#5f5f5f\n59\n\n\n#949494\n246\n\n\n#bcbcbc\n250\n\n\n#e4e4e4\n254\n\n\n#ffd7af\n223\n\n\n#d7af87\n180\n\n\n#af875f\n137\n\n\n#5f87d7\n68\n\n\n#5f87af\n67\n\n\n#87afd7\n110\n\n\n#5fafff\n75\n\n\n#0087d7\n32\n\n\n#005faf\n25\n\n\n#0000d7\n20"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#installation",
    "title": "",
    "section": "3 Installation",
    "text": "3 Installation\n\nInstall the bundle:\n\n\nPathogen - git clone https://github.com/fcpg/vim-orbital ~/.vim/bundle/vim-orbital\nNeoBundle - NeoBundle 'fcpg/vim-orbital'\nVundle - Plugin 'fcpg/vim-orbital'\nPlug - Plug 'fcpg/vim-orbital'\nmanual - copy all of the files into your ~/.vim directory\n\n\nAppend the following line to your .vimrc file:\n\ncolorscheme orbital"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#faq",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#faq",
    "title": "",
    "section": "4 FAQ",
    "text": "4 FAQ\n\nHow do I customize colors?\n\nEither edit the ‘colors/orbital.vim’ file (it’s plain vim ‘highlight’ commands), if you don’t mind merging when pulling/updating;\nOr override with autocommands in you .vimrc:\n\naugroup myBetterColors\nau!\nautocmd ColorScheme *  hi! Number ctermfg=103\naugroup END\nSome weird chars show up in my status line!\nCheck vim help for ‘fillchars’: :h 'fcs. The lightline theme use the ‘stl’ char in ‘fillchars’ if it is defined; unset it in your .vimrc to turn on the “solid” status line."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#other-themes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#other-themes",
    "title": "",
    "section": "5 Other Themes",
    "text": "5 Other Themes\n\nFahrenheit\nFar Out"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fcpg-vim-orbital.html#license",
    "title": "",
    "section": "6 License",
    "text": "6 License\nAttribution-ShareAlike 4.0 Int."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nTo install this color scheme, you can use one of the following ways:\n\nUse Vundle by adding to your .vimrc Vundle plugin section:\n  Plugin 'dikiaap/minimalist'\nThen run :PluginInstall.\n\nOR\n\nUse vim-plug by adding to your .vimrc vim-plug section:\n  Plug 'dikiaap/minimalist'\nThen run :PlugInstall.\n\nOR\n\nUse Pathogen:\nRun the following in a terminal:\n  cd ~/.vim/bundle\n  git clone https://github.com/dikiaap/minimalist"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html#usage",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html#usage",
    "title": "",
    "section": "1.2 Usage",
    "text": "1.2 Usage\nAfter finishing installation, put this code to your .vimrc:\nset t_Co=256\nsyntax on\ncolorscheme minimalist\nThis color scheme also built-in with airline theme. If you wanna use:\nlet g:airline_theme='minimalist'\nlet g:airline_powerline_fonts = 1\nlet g:airline#extensions#tabline#enabled = 1"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html#support",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html#support",
    "title": "",
    "section": "1.3 Support",
    "text": "1.3 Support\nAs you know, color scheme in vim by default supports many programming languages. At this time minimalist is looks beautiful & focused on:\n\nC++\nCSS/CSS3\nHTML/HTML5\nJavaScript\nMarkdown\nPHP\nPython\nRuby\nSass\nShell\nXML\n\nIf you need more syntax highlighting, you can use vim-polyglot."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html#links",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html#links",
    "title": "",
    "section": "1.4 Links",
    "text": "1.4 Links\nGitHub · Vim.org · Vim Awesome"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/dikiaap-minimalist.html#license",
    "title": "",
    "section": "1.5 License",
    "text": "1.5 License\nMIT © Diki Ananta"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cseelus-vim-colors-lucid.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cseelus-vim-colors-lucid.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cseelus-vim-colors-lucid.html#highlightings-for-these-plugins",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cseelus-vim-colors-lucid.html#highlightings-for-these-plugins",
    "title": "",
    "section": "1.1 Highlightings for these plugins",
    "text": "1.1 Highlightings for these plugins\n\nAle\nCtrlP\nGitGutter\nNERDTree\npangloss/vim-javascript\nPlainTasks (.todo)\nStartify\nVIM-JavaScript (pangloss)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cseelus-vim-colors-lucid.html#syntax-highlighting-adjustments-for",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cseelus-vim-colors-lucid.html#syntax-highlighting-adjustments-for",
    "title": "",
    "section": "1.2 Syntax highlighting adjustments for",
    "text": "1.2 Syntax highlighting adjustments for\n\nApache Config\nCoffeeScript\nCSS\nGit\nHaml\nHTML\nJavaScript w. or w/o pangloss/vim-javascript\nJson\nLaTeX\nMarkdown\nPHP\nRuby\nSass\nSlim\nVimL\nYAML\nXML"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cseelus-vim-colors-lucid.html#ancient-terminals",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cseelus-vim-colors-lucid.html#ancient-terminals",
    "title": "",
    "section": "1.3 Ancient Terminals",
    "text": "1.3 Ancient Terminals\nYou can use some plugin like CSApprox to make this work smoothly in older 256 colors or even 88 colors terminals."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/christophermca-meta5.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/christophermca-meta5.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/christophermca-meta5.html#install",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/christophermca-meta5.html#install",
    "title": "",
    "section": "1.1 Install",
    "text": "1.1 Install\nPathogen\ngit clone https://github.com/christophermca/meta5.git\nVundle\nPlugin 'christophermca/meta5'"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/challenger-deep-theme-vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/challenger-deep-theme-vim.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n\n\nChallenger Deep\n\n\n\n0.1 Challenger Deep Theme for VIM\nTo enable this color scheme, set it in your vimrc:\ncolorscheme challenger_deep\n\n\n0.2 Terminal True Color Support\nAdd this to your .vimrc to enable true colors:\nif has('nvim') || has('termguicolors')\n  set termguicolors\nendif\n\n\n0.3 Installation\n\n0.3.1 vim-plug\nPlug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }\n\n\n0.3.2 vundle\nPlugin 'challenger-deep-theme/vim', {'name': 'challenger-deep-theme'}\n\n\n\n0.4 Screenshot\n\n\n\nScreenshot\n\n\n\n\n0.5 Options\n\ng:challenger_deep_termcolors This options sets the terminal colors to 16 or 256 Colors. Default value is 256. If it is set to 16 ,this colorscheme will attempt to use the standard 16 colors of your terminal emulator and background color will be the default background color of your terminal emulator. For the best colors in terminal, its recommended to set set your terminalcolors to Challenger Deep Terminal Colors and use 16 colors.\n\n\n\n0.6 Challenger Deep Terminal Colors\n! ~/.Xresource\n*.foreground:   #cbe3e7\n*.background:   #1e1c31\n*.cursorColor:  #fbfcfc\n\n! black\n*.color0:       #565575\n*.color8:       #100e23\n\n! red\n*.color1:       #ff8080\n*.color9:       #ff5458\n\n! green\n*.color2:       #95ffa4\n*.color10:      #62d196\n\n! yellow\n*.color3:       #ffe9aa\n*.color11:      #ffb378\n\n! blue\n*.color4:       #91ddff\n*.color12:      #65b2ff\n\n! magenta\n*.color5:       #c991e1\n*.color13:      #906cff\n\n! cyan\n*.color6:       #aaffe4\n*.color14:      #63f2f1\n\n! white\n*.color7:       #cbe3e7\n*.color15:      #a6b3cc\n\n\n0.7 Lightline Theme\n\n\n\nLightline\n\n\nChallenger Deep supports lightline.vim. To enable the colorscheme, add one of the following lines to your .vimrc:\nlet g:lightline = { 'colorscheme': 'challenger_deep'}\n\n\n0.8 Lualine Theme\nChallenger Deep also supports lualine.vim. To enable the colorscheme, add the following lines to your init.lua:\nrequire'lualine'.setup {\n  options = { theme = 'challenger_deep' }\n}\n\n\n0.9 Troubleshooting\nIf you are running vim inside tmux with the alacritty terminal, make sure to set default-terminal to xterm-256color in your tmux config (see this issue for more details:\n# ... \nset-option -g default-terminal \"xterm-256color\"\n# ...\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/challenger-deep-theme-vim.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/challenger-deep-theme-vim.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/arcticicestudio-nord-vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/arcticicestudio-nord-vim.html",
    "title": "",
    "section": "",
    "text": "Code\nAn arctic, north-bluish clean and elegant Vim color theme.\nDesigned for a fluent and clear workflow based on the Nord color palette.\nBuild for Vim’s terminal- and GUI mode with true colors with support for many third-party syntax and UI plugins including bundled themes for lightline.vim and vim-airline."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/arcticicestudio-nord-vim.html#getting-started",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/arcticicestudio-nord-vim.html#getting-started",
    "title": "",
    "section": "1 Getting Started",
    "text": "1 Getting Started\nVisit the official website to learn all about the syntax highlighting features, details and elements of UI and editor elements, the various theme configurations and the support for many plugins.\nLearn about the installation and activation, how to configure and customize the theme from the official documentations.\n\n1.1 Quick Start\nThanks to existing plugin/runtimepath managers for Vim, Nord Vim can be installed for all platforms and the various variants/forks of Vim in a uniform way within a few lines of codes. The recommended manager is vim-plug, but any other manager like pathogen or Vundle can also be used.\nTo automatically download and activate Nord Vim, follow the install instructions for vim-plug and\n\nadd Plug 'nordtheme/vim' to your vimrc within vim-plug’s plugin loading function\nrun the :PlugInstall command in Vim\nactivate the theme by adding colorscheme nord to the vimrc or change it on-the-fly by running :colorscheme nord\n\n\n  \n\nSee the Nord Vim’s documentation for more installation options and how to set it up manually."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/arcticicestudio-nord-vim.html#features",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/arcticicestudio-nord-vim.html#features",
    "title": "",
    "section": "2 Features",
    "text": "2 Features\n\nA unified UI and editor syntax element design provides a clutter-free and fluidly merging appearance.   \n\n\nSmall details with unobtrusive styles for popular and common code editor features like search result marker and brace matching — designed to get out of your way with a visually attractive appearance.   \n\n\nSupport for a wide range of programming languages — from bundled plugins up to many popular syntax and UI third-party plugins."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/arcticicestudio-nord-vim.html#contributing",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/arcticicestudio-nord-vim.html#contributing",
    "title": "",
    "section": "3 Contributing",
    "text": "3 Contributing\nNord is an open source project and we love to receive contributions from the community!\nThere are many ways to contribute, from writing- and improving documentation and tutorials, reporting bugs, submitting enhancement suggestions that can be added to Nord by submitting pull requests.\nPlease take a moment to read Nord’s full contributing guide to learn about the development process, the project’s used styleguides, branch organization and versioning model.\nThe guide also includes information about minimal, complete, and verifiable examples and other ways to contribute to the project like improving existing issues and giving feedback on issues and pull requests.\n\n    \n\n\nCopyright © 2016-present Sven Greb"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#screenshots",
    "title": "",
    "section": "1.1 Screenshots",
    "text": "1.1 Screenshots"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#installation",
    "title": "",
    "section": "1.2 Installation",
    "text": "1.2 Installation\nManual: 1. download & place deus.vim in your vimfiles/colors folder (usually ~/.vim/colors/) 2. add this line to your .vimrc\ncolors deus\nOR\nUse a package manager like Pathogen, Vundle, or Vim-plug just to name a few:\n\n1.2.1 Pathogen:\nRun this in your terminal\n\ncd ~/.vim/\n\nmkdir bundle\n\ncd bundle\n\ngit clone https://github.com/ajmwagar/vim-deus.git\n\n\n1.2.2 Vim-Plug:\nAdd the following lines to your ~/.vimrc:\ncall plug#begin('~/.vim/bundle/')\nPlug 'ajmwagar/vim-deus'\ncall  plug#end()\nDon’t forget to run:\n:PlugInstall"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#language-syntax-support",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#language-syntax-support",
    "title": "",
    "section": "1.3 Language Syntax Support:",
    "text": "1.3 Language Syntax Support:\n\nLua\nGo\nJavaScript\nCSS/HTML\nPHP\nC#\nJSON\nMarkdown\nHaskell\nScala\nElixir\nJava\nMoonScript\nObjective C\nC Languages\nCoffeeScript\nRuby\nRust\nPython\nClojure\nXML\nAny many more… (try vim-polyglot for syntax packs)\n\nBold = really nice looking (They all look good but these are my personal favorites.)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#plugin-support",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#plugin-support",
    "title": "",
    "section": "1.4 Plugin support",
    "text": "1.4 Plugin support\n\nAirline :AirlineTheme deus\ncoc.nvim (popup-windows & error colors)\nCtrlp\nFZF\nNerdTREE\nSyntastic (and most linters)\nDeoplete\nYCM (YouCompleteMe)\nTabbar\nVim-easy-motion\nSneak\nRainbow-Parentheses"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#palette",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#palette",
    "title": "",
    "section": "1.5 Palette",
    "text": "1.5 Palette\n\n\n\n\n\n\n\n\nColor\nHex\nUse\n\n\n\n\n\n#242a32\nblack\n\n\n\n#d54e53\nred\n\n\n\n#98c379\ngreen\n\n\n\n#e5c07b\nyellow\n\n\n\n#83a598\nblue\n\n\n\n#c678dd\npurple\n\n\n\n#70c0ba\nteal\n\n\n\n#eaeaea\nwhite\n\n\n\n#666666\nbright black\n\n\n\n#ec3e45\nbright red\n\n\n\n#90c966\nbright green\n\n\n\n#edbf69\nbright yellow\n\n\n\n#73ba9f\nbright blue\n\n\n\n#c858e9\nbright purple\n\n\n\n#2bcec2\nbright teal\n\n\n\n#ffffff\nbright white\n\n\n\n#2c323b\nbackground\n\n\n\n#eaeaea\nforeground"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#troubleshooting",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#troubleshooting",
    "title": "",
    "section": "1.6 Troubleshooting",
    "text": "1.6 Troubleshooting\nWhen using terminal-vim and vim-deus the colors can get messed up.\nTo fix this add the following snippet to your ~/.vimrc:\nset t_Co=256\nset termguicolors\n\nlet &t_8f = \"\\&lt;Esc&gt;[38;2;%lu;%lu;%lum\"\nlet &t_8b = \"\\&lt;Esc&gt;[48;2;%lu;%lu;%lum\"\n\nset background=dark    \" Setting dark mode\ncolorscheme deus\nlet g:deus_termcolors=256\n\n1.6.1 Tmux\nInstructions on how to enable TrueColor for Tmux can be found here.\n\n\n1.6.2 Italics\nIf you use vim in a terminal that supports italics, set the environment variable TERM_ITALICS to TRUE (i.e. export TERM_ITALICS=true) to enable with vim-deus.\n\n\n1.6.3 Terminal Support\nDeus has been ported to the following terminal emulators.\n\n\n\nTerminal Emulator\nConfiguration\n\n\n\n\nAlacritty\nalacritty.yml"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#thank-you",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ajmwagar-vim-deus.html#thank-you",
    "title": "",
    "section": "1.7 Thank You",
    "text": "1.7 Thank You\nI took a lot of inspiration from two great colorschemes, Onedark and Gruvbox. I want to thank their creators for making such great color schemes. So thank you!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html",
    "title": "",
    "section": "",
    "text": "Code\nLight & Dark color schemes for terminal and GUI Vim awesome editor\nInspired by Google’s Material Design. Improve code readability! Great for presentation!\nIt is optimized to load fast and support 4-bit, 8-bit and 24-bit color terminals or GUIs. For full color spectrum, any 8-bit (256-color) capable display is sufficient.\nPlus: PaperColor is also a syntax highlighting framework for creating color themes, in which the PaperColor theme you see here is the default. If you want to create your own theme, consider creating on top of PaperColor to leverage 100% its functionality and still have your own specialization.\nWhy was this theme created? Read the background story ***"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html#colors",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html#colors",
    "title": "",
    "section": "1.1 🎨 Colors",
    "text": "1.1 🎨 Colors\nSupport True / GUI color (24-bit) and identical 256 color (8-bit) that the default theme is based on.\nAlso gracefully support down to 16 color (4-bit) terminal, which will use terminal native colors. You need to change the terminal colors to PaperColor palette.\nIn 8 color and 4 color terminals, they might lack the necessary variation of colors to express PaperColor look, but seriously let me know if you still use these kinds of terminals.\nDefault Theme Palette\n\n\n\n\n\n\n\n\n\n\n\n\n\nLight Theme\n8-bit\n24-bit\nDark Theme\n8-bit\n24-bit\n\n\n\n\n0\n\n255\n#eeeeee\n\n234\n#1c1c1c\n\n\n1\n\n124\n#af0000\n\n125\n#af005f\n\n\n2\n\n28\n#008700\n\n70\n#5faf00\n\n\n3\n\n64\n#5f8700\n\n179\n#d7af5f\n\n\n4\n\n31\n#0087af\n\n74\n#5fafd7\n\n\n5\n\n102\n#878787\n\n244\n#808080\n\n\n6\n\n24\n#005f87\n\n173\n#d7875f\n\n\n7\n\n238\n#444444\n\n252\n#d0d0d0\n\n\n8\n\n250\n#bcbcbc\n\n240\n#585858\n\n\n9\n\n160\n#d70000\n\n71\n#5faf5f\n\n\n10\n\n162\n#d70087\n\n148\n#afd700\n\n\n11\n\n91\n#8700af\n\n140\n#af87d7\n\n\n12\n\n166\n#d75f00\n\n214\n#ffaf00\n\n\n13\n\n166\n#d75f00\n\n205\n#ff5faf\n\n\n14\n\n25\n#005faf\n\n37\n#00afaf\n\n\n15\n\n24\n#005f87\n\n66\n#5f8787\n\n\n\nThere are many more colors for many additional syntax groups, but they are designed to fall back to these base 16 colors strategically so that it can utilize the terminal native color palette (if configured like above), and also theme designers only need to provide 16 colors for a functional theme."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html#languages",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html#languages",
    "title": "",
    "section": "1.2 🚀 Languages",
    "text": "1.2 🚀 Languages\nCurrently designed for these languages: - Haskell, Erlang, Elixir, Clojure, Elm, Purescript, F# - C, C++, Golang, Rust, Java, JavaScript, Python, Ruby, Pascal, PHP, Perl, LUA - DTrace, SystemTap, SQL/MySQL, Octave/MATLAB, R, Lex/Flex & Yacc/Bison, ASN.1, Assembly (MIPS, GAS, NASM), Bash/Shell script, Sed, Awk, Vim script, Powershell script - Dockerfile, Makefile, CMake, NGINX, Cucumber, YAML, JSON, HTML, XML, Markdown, reStructuredText, PlantUML, Dosini, Mail, Git commit message - Ada, COBOL, Fortran, ALGOL, (what’s your other favorite dinosaur?)\nOther file types can still display well as long as your Vim is set up to recognize the language syntax even though that may not be the optimal experience. So, if the language you are working on isn’t listed here, feel free to make a design request. ## 📚 Targeted plugins for additional syntax highlighting\nvimdiff, netrw, NERDTree, tagbar, tabline, vim-airline, vim-indent-guides, vim-startify, Agit, vim-signify, nvim-dap-ui (PR), nvim-cmp (PR), vim-gitgutter\nThe below are programming language syntax highlighting plugins that enhances upon Vim built-in syntax highlighting.\n\nC: c-syntax.vim\nJavaScript: vim-javascript\nJsx: vim-jsx-pretty\nJSON: vim-json\nGo: vim-go\nDTrace: dtrace-syntax-file\nSystemTap: vim-systemtap\nHaskell: haskell-vim\nPlantUML: plantuml-syntax\nMarkdown: vim-markdown\nAssembly MIPS: mips\nAssembly GAS: vim-gas\nOctave/MATLAB: vim-octave\nPython: python-syntax\nDockerfile: dockerfile.vim\nNGINX: nginx-vim-syntax\nElixir: vim-elixir\nElm: elm-vim\nPurescript: purescript-vim\nF#: vim-fsharp\nPowerShell: vim-ps1\nCMake: vim-cmake-syntax\nALGOL: vim-algol68"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html#configure-.vimrc",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html#configure-.vimrc",
    "title": "",
    "section": "2.1 ⭐ Configure .vimrc",
    "text": "2.1 ⭐ Configure .vimrc\nPut this in your ~/.vimrc\nset t_Co=256   \" This is may or may not needed.\n\nset background=light\ncolorscheme PaperColor\nOr using the dark version:\nset background=dark\ncolorscheme PaperColor\nTo switch to dark or light variant during session: :set background=dark or :set background=light\nTo quickly toggle between them, use vim-unimpaired’s keymap cob\nOptional: turn on line numbers and status bar\nset number\nset laststatus=2"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html#your-support-is-very-much-appreciated",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html#your-support-is-very-much-appreciated",
    "title": "",
    "section": "6.1 🙇 Your support is very much appreciated",
    "text": "6.1 🙇 Your support is very much appreciated\nI create open-source projects on GitHub and continue to develop/maintain as they are helping others. You can integrate and use these projects in your applications for free! You are free to modify and redistribute anyway you like, even in commercial products.\nI try to respond to users’ feedback and feature requests as much as possible. Obviously, this takes a lot of time and efforts (speaking of mental context-switching between different projects and daily work). Therefore, if these projects help you in your work, and you want to encourage me to continue create, here are a few ways you can support me:\n\n💬 Following my blog and social profiles listed above to help me connect with your network\n⭐️ Starring this project and sharing with others as more users come, more great ideas arrive!\n☘️ Donating any amount is a great way to help me work on the projects more regularly!\n\n\n  \n  \n  \n  \n\n\n  \nThanks to all contributors who make PaperColor great! ❤️"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html#related-projects-based-on-papercolor",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/NLKNguyen-papercolor-theme.html#related-projects-based-on-papercolor",
    "title": "",
    "section": "6.2 🔮 Related projects based on PaperColor",
    "text": "6.2 🔮 Related projects based on PaperColor\nMaterial iTerm theme by Christoph Hermann\nMaterial Terminator (terminal emulator) theme by Marco Herrero\nTerminal Theme by Fixles\nPaperColor Light for iTerm2 by ASeom Han\nPaperColor for Terminal.app by tomotargz\nPaperColor Light for konsole by z2oh\nPaperColor Light for konsole (some palette collisions resolved) by MaxG87\nPaperColor Theme for Vis Editor by Jan Christoph Ebersbach\nAirline PaperColor Theme for Emacs Powerline by Anthony DiGirolamo\nAirline PaperColor Theme for Vim Lightline\nNinrod’s vim + tmux + zsh dotfiles by Filipe Silva\nPaperColor for Vscode by rozbo\nPaperColor for Vscode Redux by mrworkman\nPaperColor theme for Hyper by Rafael Rinaldi\nPaperColor Theme for kitty by Cyril Raffatelli\nPaperColor Light theme for several tools by stoerdebegga\nPaperColor Light theme for Alacritty\nFeel free to send a PR to add related projects here!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#about",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#about",
    "title": "",
    "section": "1 About",
    "text": "1 About\nArchery is a dark colorscheme for Vim, inspired by Arch Linux color palette. This is where beautiful shades of blue meet mysterious shades of gray!\n\n\n\nScreenshot"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#installation",
    "title": "",
    "section": "2 Installation",
    "text": "2 Installation\nIt is recommended to install Archery with a Vim plugin manager:\n\nPathogen\nVundle\nPlug\nNeoBundle\nDein\n\nThen enable the colorscheme in your vimrc with the following command: colorscheme archery\nIf you only use GVim, you’re done! If you use terminal Vim, read on…\n\nArchery supports 256 colors terminals, so you do not need plugins like CSApprox or GUIColorscheme to use it.\nOpen your vimrc with Vim in your terminal and try :set termguicolors. If colors are rendered properly, you can add this command in your vimrc to use GUI colors directly (these are defined using the hexadecimal notation).\nIf “termguicolors” does not work, add set t_Co=256 in your vimrc before setting the colorscheme and configure your terminal emulator to use the Archery color palette given below."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#color-palette",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#color-palette",
    "title": "",
    "section": "3 Color palette",
    "text": "3 Color palette\n\n\n\nPalette\n\n\n\n\n\n\n\n\n\n\ncolors\ncterm\ngui\n\n\n\n\n\n0\n#25272C\n\n\n\n1\n#BA2A2A\n\n\n\n2\n#008542\n\n\n\n3\n#F07D30\n\n\n\n4\n#0088CC\n\n\n\n5\n#8D4888\n\n\n\n6\n#006596\n\n\n\n7\n#53586F\n\n\n\n8\n#354151\n\n\n\n9\n#C95F5F\n\n\n\n10\n#73BA25\n\n\n\n11\n#EAC06E\n\n\n\n12\n#81A3CF\n\n\n\n13\n#B589C2\n\n\n\n14\n#25B8A5\n\n\n\n15\n#F6F9FC\n\n\n\nIn GVim, color8 will be #282D34 instead of #354151. Why? Because some CLI tools use the dark gray color to display textual information. This makes some text unreadable, due to the dark background of Archery. So in terminal emulators, color8 must be lighter…"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#nice-status-tab-lines",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#nice-status-tab-lines",
    "title": "",
    "section": "4 Nice status & tab lines",
    "text": "4 Nice status & tab lines\nIf you want to display a status line and a tab line in Vim, make sure these options are set in your vimrc:\nset showtabline=2\nset laststatus=2\n\n4.1 Airline\n\n\n\nAirline\n\n\nPut the following code in your vimrc to use Archery for Airline:\nlet g:airline_theme = 'archery'\nFor further configuration, please read the documentation of Airline.\n\n\n4.2 Lightline\n\n\n\nLightline\n\n\nPut the following code in your vimrc to use Archery for Lightline:\nlet g:lightline = {\n    \\ 'colorscheme': 'archery',\n    \\ }\nFor further configuration, please read the documentation of Lightline. You may also consider lightline-buffer to display a useful tab line."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#plugins-support",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#plugins-support",
    "title": "",
    "section": "5 Plugins support",
    "text": "5 Plugins support\nArchery plays nicely with the following plugins:\n\nAirline\nLightline\nCtrlP\nNERDTree\nTagbar"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#syntax-optimizations",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#syntax-optimizations",
    "title": "",
    "section": "6 Syntax optimizations",
    "text": "6 Syntax optimizations\n\n6.1 Raw\n\nCSS\nMarkdown\nReadline\nYAML\n\n\n\n6.2 Tags\n\nHTML\nXML\n\n\n\n6.3 Programming\n\nC/C++\nJava\nJavaScript\nPerl\nPHP\nPython\nRuby"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#more",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-Archery.html#more",
    "title": "",
    "section": "7 More ",
    "text": "7 More \nArchery is the default colorscheme of Vimpressionist.\nIf you would like to use Vim everywhere on your computing environment, you should definitely check it out!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#space_invader-set-up",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#space_invader-set-up",
    "title": "",
    "section": "1 :space_invader: Set Up",
    "text": "1 :space_invader: Set Up\n\n1.0.0.0.1 Dark Grey\ncolorscheme alduin"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#milky_way-change-background-colors",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#milky_way-change-background-colors",
    "title": "",
    "section": "2 :milky_way: Change Background Colors",
    "text": "2 :milky_way: Change Background Colors\n\n2.0.0.0.1 Almost Black Background\nlet g:alduin_Shout_Dragon_Aspect = 1\ncolorscheme alduin \n\n\n2.0.0.0.2 Black Background\nlet g:alduin_Shout_Become_Ethereal = 1\ncolorscheme alduin"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#squid-other-settings",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#squid-other-settings",
    "title": "",
    "section": "3 :squid: Other Settings",
    "text": "3 :squid: Other Settings\n\n3.0.0.0.1 Adds Deep Red Color for Special Highlighting Groups\nlet g:alduin_Shout_Fire_Breath = 1\ncolorscheme alduin\n\n\n3.0.0.0.2 Removes Block Matchparens setting and adds an underline\n\"let g:alduin_Shout_Aura_Whisper = 1\n\"colorscheme alduin"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#crescent_moon-dev-build",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#crescent_moon-dev-build",
    "title": "",
    "section": "4 :crescent_moon: Dev Build",
    "text": "4 :crescent_moon: Dev Build\ndevelopment version here"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#octocat-special-thanks",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#octocat-special-thanks",
    "title": "",
    "section": "5 :octocat: Special Thanks",
    "text": "5 :octocat: Special Thanks\nNWang for Design Inspiration Alduin Airline Theme by Danilo Augusto Arch Linux Package by George Angelopoulos KKPMW for Design Inspiration Romain Lafourcade for Design Inspiration jiyyt for UI contribution Aramis Razzaghipour for UI contribution"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#octopus-moar-colorschemes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Alduin.html#octopus-moar-colorschemes",
    "title": "",
    "section": "6 :octopus: Moar Colorschemes",
    "text": "6 :octopus: Moar Colorschemes\nDespacio Sierra Arcadia Breve"
  },
  {
    "objectID": "posts/share_R_code_via_docker/lit_review.html",
    "href": "posts/share_R_code_via_docker/lit_review.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/lit_review.html#introduction-to-the-reproducibility-crisis",
    "href": "posts/share_R_code_via_docker/lit_review.html#introduction-to-the-reproducibility-crisis",
    "title": "",
    "section": "1.1 Introduction to the Reproducibility Crisis",
    "text": "1.1 Introduction to the Reproducibility Crisis\nThe scientific community has increasingly recognized the critical importance of reproducibility in research, leading to what has been termed the “reproducibility crisis” (Baker, 2016). This crisis affects multiple disciplines, but is particularly acute in computational research where software environments, package dependencies, and operating system differences can significantly impact results.\nPeng (2011) introduced a framework for reproducible research in computational science, arguing that standard scientific publication practices were insufficient for computational analyses. He proposed a spectrum of reproducibility, from “publication only” to “full replication,” advocating for code and data sharing as minimal requirements. Building upon this foundation, Stodden et al. (2016) surveyed practices across scientific fields, finding that while most researchers valued reproducibility, implementation of reproducible workflows remained challenging due to technical barriers."
  },
  {
    "objectID": "posts/share_R_code_via_docker/lit_review.html#challenges-in-r-based-reproducibility",
    "href": "posts/share_R_code_via_docker/lit_review.html#challenges-in-r-based-reproducibility",
    "title": "",
    "section": "1.2 Challenges in R-Based Reproducibility",
    "text": "1.2 Challenges in R-Based Reproducibility\nThe R ecosystem presents specific challenges for reproducibility. As identified by Marwick et al. (2018), R analysis code frequently fails to execute correctly across different computing environments due to:\n\nPackage version inconsistencies: R packages evolve rapidly, with functions and arguments changing over time\nSystem dependencies: Many R packages rely on external libraries and system-level requirements\nR version differences: Core functionality can vary between R versions\nOperating system variations: Platform-specific behaviors can affect computational results\n\nThese challenges are compounded in collaborative research where team members may use different computing setups. Kitzes et al. (2017) presented case studies highlighting how seemingly minor environment differences could lead to significant variations in analytical outcomes."
  },
  {
    "objectID": "posts/share_R_code_via_docker/lit_review.html#package-management-solutions-for-r",
    "href": "posts/share_R_code_via_docker/lit_review.html#package-management-solutions-for-r",
    "title": "",
    "section": "1.3 Package Management Solutions for R",
    "text": "1.3 Package Management Solutions for R\n\n1.3.1 The renv Approach\nPackage management has evolved as a solution to dependency challenges within R. CRAN itself offers limited built-in versioning, necessitating additional tools. The renv package, developed by Ushey (2022), has emerged as a robust solution for creating reproducible R environments. renv addresses reproducibility at the package level by:\n\nCreating project-specific library paths\nRecording exact package versions in a lockfile\nFacilitating restoration of specific package environments\nSupporting transparent version control of dependencies\n\nPrior to renv, similar functionality was offered by packrat (Ushey et al., 2018), which pioneered the isolation of project dependencies but had limitations in efficiency and usability that renv subsequently addressed. As observed by Peikert and Brandmaier (2021), renv represents an important advancement in making dependency management more accessible to R users.\nOoms (2013) earlier highlighted the importance of addressing package dependencies, proposing semantic versioning practices for R packages. This work informed the development of dependency management tools like renv, illustrating the progression of the field.\n\n\n1.3.2 Alternative R Package Management Approaches\nWhile renv has gained prominence, other approaches exist. The checkpoint package (Microsoft Corporation, 2022) takes a temporal approach, installing packages as they existed on CRAN at a specific date. This “time machine” approach provides a different model of reproducibility, focusing on temporal consistency rather than project-specific dependency tracking.\nAnother approach is represented by the miniCRAN package (de Vries & Meys, 2019), which allows creating local, customized CRAN-like repositories with specific package versions. This has proven especially useful in air-gapped or enterprise environments where internet access may be limited."
  },
  {
    "objectID": "posts/share_R_code_via_docker/lit_review.html#containerization-as-a-solution-for-system-level-reproducibility",
    "href": "posts/share_R_code_via_docker/lit_review.html#containerization-as-a-solution-for-system-level-reproducibility",
    "title": "",
    "section": "1.4 Containerization as a Solution for System-Level Reproducibility",
    "text": "1.4 Containerization as a Solution for System-Level Reproducibility\n\n1.4.1 Docker and Containerization\nWhile package management addresses R-specific dependencies, containerization addresses system-level reproducibility. Boettiger (2015) introduced Docker as a solution for reproducible research, highlighting its ability to create self-contained computing environments that include not just the R environment but also the underlying operating system, libraries, and configurations.\nNüst et al. (2020) evaluated different containerization approaches for reproducible research, comparing Docker, Singularity, and other technologies. They found Docker to be particularly well-suited for reproducible R workflows due to its widespread adoption, ease of use, and comprehensive isolation properties.\n\n\n1.4.2 The Rocker Project\nThe Rocker Project (Boettiger & Eddelbuettel, 2017) has been instrumental in making Docker accessible to the R community by providing standardized Docker images for R with different configurations. These pre-built images serve as reliable base environments for reproducible research, addressing a key barrier to adoption.\nEddelbuettel and Boettiger (2018) further documented how the Rocker Project supports different use cases, from basic R installations to complex data science stacks including RStudio, Shiny, and common data science packages. This work has made containerization more accessible to R users without extensive systems administration knowledge."
  },
  {
    "objectID": "posts/share_R_code_via_docker/lit_review.html#integrating-package-management-and-containerization",
    "href": "posts/share_R_code_via_docker/lit_review.html#integrating-package-management-and-containerization",
    "title": "",
    "section": "1.5 Integrating Package Management and Containerization",
    "text": "1.5 Integrating Package Management and Containerization\nThe integration of package management (renv) with containerization (Docker) represents a comprehensive approach to reproducibility. Peikert et al. (2021) proposed such an integrated workflow, demonstrating how combining these tools provides both package-level and system-level reproducibility.\nLeveraging this combined approach, Rodríguez-Sánchez et al. (2016) developed workflows for ecological research that maintain reproducibility across collaborators and over time. Similarly, Wiebels and Moreau (2021) demonstrated the effectiveness of this integration for neuroimaging research, where computational environments are particularly complex."
  },
  {
    "objectID": "posts/share_R_code_via_docker/lit_review.html#testing-and-validation-in-reproducible-workflows",
    "href": "posts/share_R_code_via_docker/lit_review.html#testing-and-validation-in-reproducible-workflows",
    "title": "",
    "section": "1.6 Testing and Validation in Reproducible Workflows",
    "text": "1.6 Testing and Validation in Reproducible Workflows\nRecent literature emphasizes the importance of integrating testing into reproducible workflows. Wickham (2011) introduced the testthat package, providing a framework for unit testing in R that has become a standard. Building on this, Parker (2017) argued that testing is an essential component of reproducibility, as it provides validation that code performs as expected across environments.\nBryan (2018) connected testing practices to broader workflow considerations, demonstrating how testing fits into version control and project organization to create robust, reproducible research. The integration of continuous integration services with containerized environments has further formalized testing in reproducible workflows (Ushey & Allaire, 2020)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/lit_review.html#practical-implementations-in-different-research-domains",
    "href": "posts/share_R_code_via_docker/lit_review.html#practical-implementations-in-different-research-domains",
    "title": "",
    "section": "1.7 Practical Implementations in Different Research Domains",
    "text": "1.7 Practical Implementations in Different Research Domains\nThe application of these reproducibility tools varies across domains:\nIn genomics, Kulkarni et al. (2018) demonstrated how Docker and package management tools enable complex bioinformatics pipelines to be shared and reused. Similarly, Grüning et al. (2018) showed how Bioconductor packages could be effectively versioned and containerized.\nIn social sciences, Healy (2018) advocated for reproducible workflows using R, emphasizing how containerization prevents the “works on my machine” problem when sharing analyses with colleagues.\nFor statistical education, Cetinkaya-Rundel and Rundel (2018) demonstrated how Docker containers provide consistent environments for teaching statistics with R, ensuring that all students have identical computational setups."
  },
  {
    "objectID": "posts/share_R_code_via_docker/lit_review.html#adoption-challenges-and-future-directions",
    "href": "posts/share_R_code_via_docker/lit_review.html#adoption-challenges-and-future-directions",
    "title": "",
    "section": "1.8 Adoption Challenges and Future Directions",
    "text": "1.8 Adoption Challenges and Future Directions\nDespite the technical solutions available, adoption remains challenging. Stodden et al. (2018) identified several barriers to adoption of reproducible practices, including time constraints, training limitations, and institutional factors. McNutt (2014) emphasized the need for journals and institutions to incentivize reproducibility practices through policy changes.\nLooking forward, Brinckman et al. (2019) highlighted the need for better integration between reproducibility tools and research workflows, making reproducibility “built-in” rather than an additional step. The development of graphical interfaces and simplified workflows, such as those proposed by Perkel (2020), may help address adoption barriers.\nBeaulieu-Jones and Greene (2017) suggested that the future of reproducible research will increasingly rely on automated systems that can validate reproducibility without manual intervention, an approach that has gained traction with the growth of continuous integration practices in research computing."
  },
  {
    "objectID": "posts/share_R_code_via_docker/lit_review.html#conclusion",
    "href": "posts/share_R_code_via_docker/lit_review.html#conclusion",
    "title": "",
    "section": "1.9 Conclusion",
    "text": "1.9 Conclusion\nThe literature reveals a clear progression in addressing reproducibility challenges in R, from early recognition of the problem to increasingly sophisticated technical solutions. The combination of package management (renv) and containerization (Docker) represents the current state-of-the-art for achieving comprehensive reproducibility.\nFuture research and development efforts should focus on reducing barriers to adoption, integrating reproducibility practices into mainstream research workflows, and developing automated validation systems. The ultimate goal remains making reproducibility the default state for computational research rather than an exceptional achievement."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html#space_invader-set-up",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html#space_invader-set-up",
    "title": "",
    "section": "1 :space_invader: Set Up",
    "text": "1 :space_invader: Set Up\ncolorscheme sierra"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html#milky_way-change-background-colors",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html#milky_way-change-background-colors",
    "title": "",
    "section": "2 :milky_way: Change Background Colors",
    "text": "2 :milky_way: Change Background Colors\n\n2.0.0.0.1 Dark Grey Background\nlet g:sierra_Sunset = 1\ncolorscheme sierra \n\n\n2.0.0.0.2 Even Darker Grey Background\nlet g:sierra_Twilight = 1\ncolorscheme sierra \n\n\n2.0.0.0.3 Almost Black Background\nlet g:sierra_Midnight = 1\ncolorscheme sierra \n\n\n2.0.0.0.4 Black Background\nlet g:sierra_Pitch = 1\ncolorscheme sierra"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html#octocat-special-thanks",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html#octocat-special-thanks",
    "title": "",
    "section": "3 :octocat: Special Thanks",
    "text": "3 :octocat: Special Thanks\nKaolin - Theme for Emacs by Ogden Webb"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html#crescent_moon-dev-build",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html#crescent_moon-dev-build",
    "title": "",
    "section": "4 :crescent_moon: Dev Build",
    "text": "4 :crescent_moon: Dev Build\nDevelopment Build here"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html#octopus-moar-colorschemes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/AlessandroYorba-Sierra.html#octopus-moar-colorschemes",
    "title": "",
    "section": "5 :octopus: Moar Colorschemes",
    "text": "5 :octopus: Moar Colorschemes\nAlduin Despacio Arcadia Breve"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#about",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#about",
    "title": "",
    "section": "1 About",
    "text": "1 About\nArchery is a dark colorscheme for Vim, inspired by Arch Linux color palette. This is where beautiful shades of blue meet mysterious shades of gray!\n\n\n\nScreenshot"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#installation",
    "title": "",
    "section": "2 Installation",
    "text": "2 Installation\nIt is recommended to install Archery with a Vim plugin manager:\n\nPathogen\nVundle\nPlug\nNeoBundle\nDein\n\nThen enable the colorscheme in your vimrc with the following command: colorscheme archery\nIf you only use GVim, you’re done! If you use terminal Vim, read on…\n\nArchery supports 256 colors terminals, so you do not need plugins like CSApprox or GUIColorscheme to use it.\nOpen your vimrc with Vim in your terminal and try :set termguicolors. If colors are rendered properly, you can add this command in your vimrc to use GUI colors directly (these are defined using the hexadecimal notation).\nIf “termguicolors” does not work, add set t_Co=256 in your vimrc before setting the colorscheme and configure your terminal emulator to use the Archery color palette given below."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#color-palette",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#color-palette",
    "title": "",
    "section": "3 Color palette",
    "text": "3 Color palette\n\n\n\nPalette\n\n\n\n\n\ncolors\ncterm\ngui\n\n\n\n\n\n0\n#25272C\n\n\n\n1\n#BA2A2A\n\n\n\n2\n#008542\n\n\n\n3\n#F07D30\n\n\n\n4\n#0088CC\n\n\n\n5\n#8D4888\n\n\n\n6\n#006596\n\n\n\n7\n#53586F\n\n\n\n8\n#354151\n\n\n\n9\n#C95F5F\n\n\n\n10\n#73BA25\n\n\n\n11\n#EAC06E\n\n\n\n12\n#81A3CF\n\n\n\n13\n#B589C2\n\n\n\n14\n#25B8A5\n\n\n\n15\n#F6F9FC\n\n\n\nIn GVim, color8 will be #282D34 instead of #354151. Why? Because some CLI tools use the dark gray color to display textual information. This makes some text unreadable, due to the dark background of Archery. So in terminal emulators, color8 must be lighter…"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#nice-status-tab-lines",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#nice-status-tab-lines",
    "title": "",
    "section": "4 Nice status & tab lines",
    "text": "4 Nice status & tab lines\nIf you want to display a status line and a tab line in Vim, make sure these options are set in your vimrc:\nset showtabline=2\nset laststatus=2\n\n4.1 Airline\n\n\n\nAirline\n\n\nPut the following code in your vimrc to use Archery for Airline:\nlet g:airline_theme = 'archery'\nFor further configuration, please read the documentation of Airline.\n\n\n4.2 Lightline\n\n\n\nLightline\n\n\nPut the following code in your vimrc to use Archery for Lightline:\nlet g:lightline = {\n    \\ 'colorscheme': 'archery',\n    \\ }\nFor further configuration, please read the documentation of Lightline. You may also consider lightline-buffer to display a useful tab line."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#plugins-support",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#plugins-support",
    "title": "",
    "section": "5 Plugins support",
    "text": "5 Plugins support\nArchery plays nicely with the following plugins:\n\nAirline\nLightline\nCtrlP\nNERDTree\nTagbar"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#syntax-optimizations",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#syntax-optimizations",
    "title": "",
    "section": "6 Syntax optimizations",
    "text": "6 Syntax optimizations\n\n6.1 Raw\n\nCSS\nMarkdown\nReadline\nYAML\n\n\n\n6.2 Tags\n\nHTML\nXML\n\n\n\n6.3 Programming\n\nC/C++\nJava\nJavaScript\nPerl\nPHP\nPython\nRuby"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#more",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/Badacadabra-vim-archery.html#more",
    "title": "",
    "section": "7 More ",
    "text": "7 More \nArchery is the default colorscheme of Vimpressionist.\nIf you would like to use Vim everywhere on your computing environment, you should definitely check it out!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/TheNiteCoder-mountaineer.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/TheNiteCoder-mountaineer.vim.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\nMountaineer.vim\n\n&lt;p align=“center”\n\n\n\nimg\n\n\n\n\n&lt;p align=“center”\n\n\n\nimg\n\n\n\n\n&lt;p align=“center”\n\n\n\nimg\n\n\n\n\n&lt;p align=“center”\n\n\n\nimg\n\n\n\n\n\n0.1 Installation:\nSimply move the variant you would like to use into your Vim/Neovim colorscheme folder, A lightline.vim colorscheme is also included.\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/TheNiteCoder-mountaineer.vim.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/TheNiteCoder-mountaineer.vim.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/andreasvc-vim-256noir.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/andreasvc-vim-256noir.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/andreasvc-vim-256noir.html#features",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/andreasvc-vim-256noir.html#features",
    "title": "",
    "section": "1.1 Features",
    "text": "1.1 Features\n\nMinimal colors, to avoid distracting:\n\nShades of gray for most elements\nBright keywords to highlight structure.\nDark comments & strings to emphasize surrounding code.\nRed for exceptional elements (constants & errors)\n\nWorks in vim and gvim. Rudimentary support for 16-color terminals."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/andreasvc-vim-256noir.html#usage",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/andreasvc-vim-256noir.html#usage",
    "title": "",
    "section": "1.2 Usage",
    "text": "1.2 Usage\n\nEnable 256 colors in vim &lt;http://vim.wikia.com/wiki/256_colors_in_vim&gt;_. Note that when using ssh, both client and server need to be properly configured.\nPut 256_noir.vim in ~/.vim/colors/\nAdd the following to ~/.vimrc:\n\n.. code-block:: vim\ncolorscheme 256_noir\n\n\" Change highlighting of cursor line when entering/leaving Insert Mode\nset cursorline\nhighlight CursorLine cterm=NONE ctermfg=NONE ctermbg=233 guifg=NONE guibg=#121212\nautocmd InsertEnter * highlight CursorLine cterm=NONE ctermfg=NONE ctermbg=234 guifg=NONE guibg=#1c1c1c\nautocmd InsertLeave * highlight CursorLine cterm=NONE ctermfg=NONE ctermbg=233 guifg=NONE guibg=#121212\n.. image:: screenshot.png :alt: screenshot of vim with noir colorscheme\nThe font in the above screenshots is the default xterm bitmap font fixed &lt;https://en.wikipedia.org/wiki/Fixed_(typeface)&gt;_ at 6x13."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/andreasvc-vim-256noir.html#bonus",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/andreasvc-vim-256noir.html#bonus",
    "title": "",
    "section": "1.3 Bonus",
    "text": "1.3 Bonus\n\nmc &lt;https://midnight-commander.org/&gt;_, add the following to e.g. ~/.bashrc:\n.. code-block:: bash\nexport MC_SKIN=dark\nmutt &lt;http://www.mutt.org/&gt;_, add the following to ~/.muttrc::\ncolor normal      white default\ncolor status      black white\ncolor indicator   white red\ncolor hdrdefault  yellow default\ncolor signature   yellow default\ncolor attachment  brightyellow default\ncolor markers     brightred default\ncolor quoted      green default\ncolor tilde       blue default\ncolor tree        red default\n\nOther recommended terminal apps with dark colors by default:\n\nhttps://ranger.github.io/\nhttp://hisham.hm/htop/\nhttps://github.com/andreasvc/cplay/"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ayu-theme-ayu-vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ayu-theme-ayu-vim.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n🌟🌟🌟 Looking for a maintainer. 🌟🌟🌟 This project needs your care and knowledge of VIM. Open an issue if you want to take that role.\n\n\n\nayu-vim\n\n\n\n1 Warning\nayu is still in development and a lot of things need to be covered. Theme works only if VIM supports termguicolors option. This is true for Neovim and VIM from 7.4.1799.\n\n\n2 Installation\nPlug 'ayu-theme/ayu-vim' \" or other package manager\n\"...\nset termguicolors     \" enable true colors support\nlet ayucolor=\"light\"  \" for light version of theme\nlet ayucolor=\"mirage\" \" for mirage version of theme\nlet ayucolor=\"dark\"   \" for dark version of theme\ncolorscheme ayu\n\n\n3 Term colors\nFor now In /term you can find color schemes for iTerm. More to come.\n\n\n4 Indent line\nTo get indent line like in the screenshot install https://github.com/Yggdroot/indentLine with my version of Roboto Mono for Powerline from this repo and add this config. In this Roboto Mono version added powerline glyphs and increased line-height of the font itself.\n\" IndentLine {{\nlet g:indentLine_char = ''\nlet g:indentLine_first_char = ''\nlet g:indentLine_showFirstIndentLevel = 1\nlet g:indentLine_setColors = 0\n\" }}\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ayu-theme-ayu-vim.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/ayu-theme-ayu-vim.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/chase-focuspoint-vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/chase-focuspoint-vim.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/chase-focuspoint-vim.html#install",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/chase-focuspoint-vim.html#install",
    "title": "",
    "section": "1.1 Install",
    "text": "1.1 Install\n\n1.1.1 Using Vundle\n\nAdd the following to your .vimrc where other bundles are located:\n Bundle 'chase/focuspoint-vim'\nRun from command line:\n $ vim +BundleInstall\n\n\n\n1.1.2 Using pathogen\n\nCheck out the repository into your bundle path:\n $ cd ~/.vim/bundle\n $ git clone git://github.com/chase/focuspoint-vim.git\n\n\n\n1.1.3 Normal\n\nCopy colors/focuspoint.vim to your ~/.vim/colors folder."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/chase-focuspoint-vim.html#airline-support",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/chase-focuspoint-vim.html#airline-support",
    "title": "",
    "section": "1.2 Airline Support",
    "text": "1.2 Airline Support\nIf you use Airline and want a matching theme, try vim-airline-focuspoint."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cocopon-iceberg.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cocopon-iceberg.vim.html",
    "title": "",
    "section": "",
    "text": "Code\nIceberg is well-designed, bluish color scheme for Vim and Neovim.\nSee the official site or the vimonline page for more information."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cocopon-iceberg.vim.html#ides-and-text-editors",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cocopon-iceberg.vim.html#ides-and-text-editors",
    "title": "",
    "section": "3.1 IDEs and text editors",
    "text": "3.1 IDEs and text editors\n\nVisual Studio Code by cocopon\nAtom by cocopon\nXcode by cocopon\nAppCode by Kuniwak\nEmacs by conao3\nCotEditor by YusukeSano"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cocopon-iceberg.vim.html#terminal-emulators",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cocopon-iceberg.vim.html#terminal-emulators",
    "title": "",
    "section": "3.2 Terminal emulators",
    "text": "3.2 Terminal emulators\n\nTerminal.app by cocopon\nHyper by cocopon\nst by vejetaryenvampir\nkitty (dark) by gkeep\nkitty (light) by gkeep\nalacritty by connorlay\n\nNOTE: terminal.sexy provides configuration files for the 16 ANSI colors for many terminal emulators (e.g. GNOME Terminal, iTerm2, etc.). Use .Xresources file as import and export it for the emulator of your choice."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cocopon-iceberg.vim.html#other",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/cocopon-iceberg.vim.html#other",
    "title": "",
    "section": "3.3 Other",
    "text": "3.3 Other\n\nbumblebee-status by whzup\ntmux by gkeep\nalternative dark theme for lightline and airline, bumblebee-status by gkeep\nSlack sidebar by cocopon"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/danilo-augusto-vim-afterglow.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/danilo-augusto-vim-afterglow.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/danilo-augusto-vim-afterglow.html#features",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/danilo-augusto-vim-afterglow.html#features",
    "title": "",
    "section": "1.1 Features",
    "text": "1.1 Features\n🚀 Modern and nicely integrated with plugins and environments.\n🔋 Batteries included so that you can concentrate on what matters most: your code. - Built-in airline scheme ✈️ - No bad surprises: works for both Vim and Neovim, terminal and GUI. - Highlighted important keywords in reddish and bold inside comments: TODO, FIXME, XXX… - No more “it looks flat/terrible on this language”: includes customized highlighting for many popular languages - Java - Python - C - Lua - Go - Clojure - Scala - PHP - and many others…\n🎨 Easy on the eyes\nClick on the image below to view it in the original size (more screenshots below)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/danilo-augusto-vim-afterglow.html#setup",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/danilo-augusto-vim-afterglow.html#setup",
    "title": "",
    "section": "1.2 Setup",
    "text": "1.2 Setup\nTo enable it, simply add colorscheme afterglow (not vim-afterglow) to your ~/.vimrc after having installed the plugin (manually or by using a package manager).\n\nAirline theme should be updated accordingly, but can be explicitly specified by using let g:airline_theme='afterglow'."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/danilo-augusto-vim-afterglow.html#options",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/danilo-augusto-vim-afterglow.html#options",
    "title": "",
    "section": "1.3 Options",
    "text": "1.3 Options\nTo further customize Afterglow, you can use the following options before setting the color scheme on your vimrc (or init.vim if using NeoVim):\n\nBlackout: let g:afterglow_blackout=1 (default: 0)\n☀️ Use this option if you need more contrast, such as when working in an office where open windows are just behind you, causing glare on your screen.\n\nThis option has no effect if g:afterglow_inherit_background is also set.\n\nItalicize comments: let g:afterglow_italic_comments=1 (default: 0)\n📖 Helps visual grepping and quickly differentiating source code and comments when skimming through files.\n\nIf using a terminal emulator (iTerm, Alacritty, Terminator…), check if it correctly supports italics. Evidently your chosen font type should have an italics variety too. In case of problems please check these two common scenarios before opening an issue concerning italics.\n\nIf you want to disable italics completely (for example if your emulator renders it with background highlight): let g:afterglow_use_italics=0 (default: 1)\nInherit background: let g:afterglow_inherit_background=1 (default: 0)\nUse this option if you want the background color to play nicely with the program (e.g. gVim, iTerm etc.) in which vim is used. It may be useful when instantiating vim inside Tmux."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/danilo-augusto-vim-afterglow.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/danilo-augusto-vim-afterglow.html#screenshots",
    "title": "",
    "section": "1.4 Screenshots",
    "text": "1.4 Screenshots\n\n\nPython\n\n\n\n\n\nRuby\n\n\n\n\n\nHTML\n\n\n\n\n\nLaTeX"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/endel-vim-github-colorscheme.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/endel-vim-github-colorscheme.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/endel-vim-github-colorscheme.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/endel-vim-github-colorscheme.html#screenshots",
    "title": "",
    "section": "1.1 Screenshots",
    "text": "1.1 Screenshots\n\n\n\nScreenshot\n\n\n\n\n\nDiffsplit screenshot\n\n\nInstall it using Pathogen or Vundle."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/endel-vim-github-colorscheme.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/endel-vim-github-colorscheme.html#license",
    "title": "",
    "section": "1.2 License",
    "text": "1.2 License\nDistributed under the same terms as Vim itself. See :help license."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fmoralesc-molokayo.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fmoralesc-molokayo.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fmoralesc-molokayo.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/fmoralesc-molokayo.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nmolokayo requires the molokai theme to be installed.\nUsing vim-plug:\nPlug 'tomasr/molokai'\nPlug 'fmoralesc/molokayo'\nVundle, Neobundle et al should be similar."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gregsexton-Atom.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gregsexton-Atom.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gregsexton-Atom.html#description",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gregsexton-Atom.html#description",
    "title": "",
    "section": "1 Description",
    "text": "1 Description\nAtom is a theme that was designed to be very readable in both light and dark environments. It concentrates on being easy on the eyes whilst distinguishing different syntax elements.\nAll important screenshots can be found at: http://www.gregsexton.org/vim-color-schemes/atom-color/\nItalics are not used in this theme.\nCurrently Atom is GVim only. I tend to use the default colours when (infrequently) in a terminal. If you have a strong desire for added terminal support leave me a comment, drop me an email or even better: send me a pull request!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gregsexton-Atom.html#install-details",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gregsexton-Atom.html#install-details",
    "title": "",
    "section": "2 Install Details",
    "text": "2 Install Details\nJust drop atom.vim in to your ~/.vim/colors directory or ~/vimfiles/colors if on Windows."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gregsexton-Atom.html#screenshot",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/gregsexton-Atom.html#screenshot",
    "title": "",
    "section": "3 Screenshot",
    "text": "3 Screenshot\n\n\n\nAtom Screenshot"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jacoborus-tender.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jacoborus-tender.vim.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jacoborus-tender.vim.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jacoborus-tender.vim.html#screenshots",
    "title": "",
    "section": "1.1 Screenshots",
    "text": "1.1 Screenshots"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jacoborus-tender.vim.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jacoborus-tender.vim.html#installation",
    "title": "",
    "section": "1.2 Installation",
    "text": "1.2 Installation\nInstall manually or use a package manager:\n\" vim-plug\nPlug 'jacoborus/tender.vim'\n\" NeoBundle\nNeoBundle 'jacoborus/tender.vim'\n\" Vundle\nPlugin 'jacoborus/tender.vim'\nOnce your plugin is installed you can set the color scheme in your .vimrc or init.vim\n\" If you have vim &gt;=8.0 or Neovim &gt;= 0.1.5\nif (has(\"termguicolors\"))\n set termguicolors\nendif\n\n\" For Neovim 0.1.3 and 0.1.4\nlet $NVIM_TUI_ENABLE_TRUE_COLOR=1\n\n\" Theme\nsyntax enable\ncolorscheme tender\nUse lightline themes (tender and tenderplus):\n\" set lighline theme inside lightline config\nlet g:lightline = { 'colorscheme': 'tender' }\nUse airline themes (tender and tenderplus):\n\" set airline theme\nlet g:airline_theme = 'tender'\nFix for MacVim (see issue):\nlet macvim_skip_colorscheme=1\nCopy color to vim if no exist ~/.vim/colors/, create folder.\n cp ~/.vim/bundle/tender/colors/tender.vim ~/.vim/colors/tender.vim"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jacoborus-tender.vim.html#terminal-themes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jacoborus-tender.vim.html#terminal-themes",
    "title": "",
    "section": "1.3 Terminal themes",
    "text": "1.3 Terminal themes\n\nTender Alacritty by @huyvohcmc\nTender xresources by @pebeto\nTender Blink Shell by @Rafaelcv7\nTender WezTerm by @kyoheiu\n\n\n\n\n\npacman-tender\n\n\n\n© 2016 Jacobo Tabernero (jacoborus.codes) - Released under MIT License"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jaredgorski-fogbell.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jaredgorski-fogbell.vim.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n \n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jaredgorski-fogbell.vim.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jaredgorski-fogbell.vim.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jonathanfilip-vim-lucius.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jonathanfilip-vim-lucius.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n1 vim-lucius\nThis repository has the Lucius color scheme for Vim. It is already organized under a “colors” directory, so you can clone the repo into your own vimfiles (or under bundle, if you use Pathogen).\nThe color scheme is available for other applications, as well. They can be found here:\nhttps://github.com/jonathanfilip/lucius\nSome sample screenshots of the different configurations:\n\n1.0.1 Dark\n\n\n\nLuciusDark\n\n\n\n\n1.0.2 Dark High Contrast\n\n\n\nLuciusDarkHighContrast\n\n\n\n\n1.0.3 Dark Low Contrast\n\n\n\nLuciusDarkLowContrast\n\n\n\n\n1.0.4 Black\n\n\n\nLuciusBlack\n\n\n\n\n1.0.5 Black High Contrast\n\n\n\nLuciusBlackHighContrast\n\n\n\n\n1.0.6 Black Low Contrast\n\n\n\nLuciusBlackLowContrast\n\n\n\n\n1.0.7 Light\n\n\n\nLuciusLight\n\n\n\n\n1.0.8 Light Low Contrast\n\n\n\nLuciusLightLowContrast\n\n\n\n\n1.0.9 White\n\n\n\nLuciusWhite\n\n\n\n\n1.0.10 White Low Contrast\n\n\n\nLuciusWhiteLowContrast\n\n\n\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jonathanfilip-vim-lucius.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/jonathanfilip-vim-lucius.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#seoul256.vim-travis-ci",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#seoul256.vim-travis-ci",
    "title": "",
    "section": "1 seoul256.vim ",
    "text": "1 seoul256.vim \nseoul256.vim is a low-contrast Vim color scheme based on Seoul Colors. Works on 256-color terminal or on GVim.\n\n1.1 seoul256\n\n\n\nseoul256\n\n\n\n\n1.2 seoul256 (light version)\n\n\n\nseoul256-light"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#installation",
    "title": "",
    "section": "2 Installation",
    "text": "2 Installation\nUse your favorite plugin manager.\n\nvim-plug\n\nAdd Plug 'junegunn/seoul256.vim' to .vimrc\nRun :PlugInstall"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#color-schemes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#color-schemes",
    "title": "",
    "section": "3 Color schemes",
    "text": "3 Color schemes\n\" Unified color scheme (default: dark)\ncolo seoul256\n\n\" Light color scheme\ncolo seoul256-light\n\n\" Switch\nset background=dark\nset background=light"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#change-background-color",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#change-background-color",
    "title": "",
    "section": "4 Change background color",
    "text": "4 Change background color\n\n\n\nseoul256-bg\n\n\n\" seoul256 (dark):\n\"   Range:   233 (darkest) ~ 239 (lightest)\n\"   Default: 237\nlet g:seoul256_background = 236\ncolo seoul256\n\n\" seoul256 (light):\n\"   Range:   252 (darkest) ~ 256 (lightest)\n\"   Default: 253\nlet g:seoul256_background = 256\ncolo seoul256\nIf g:seoul256_background is set, seoul256 will choose the right version based on the value and set background=dark/light will not switch versions.\nIf you’d like to switch versions with custom background colors, set g:seoul256_background to be a dark value, and additionally define g:seoul256_light_background for seoul256-light.\nlet g:seoul256_background = 233\nlet g:seoul256_light_background = 256\n\ncolo seoul256\ncolo seoul256-light"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#alternate-256-xterm---srgb-mapping",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#alternate-256-xterm---srgb-mapping",
    "title": "",
    "section": "5 Alternate 256-xterm -> sRGB mapping",
    "text": "5 Alternate 256-xterm -&gt; sRGB mapping\nThe GUI RGB colors are derived from 256-color-terminal color codes in the source code, with the help of a lookup table.\nBy default, the table contains RGB values of terminal colors as displayed by iTerm2 on macOS. If you’re using another terminal emulator (urxvt, xfce4-terminal,… pretty much any terminal on Linux), the colors aren’t displayed in the same way. That’s why you may see a difference in color of GUI and terminal [n]vim in Linux.\nIf let g:seoul256_srgb is set to 1, the color mapping is altered to suit the way urxvt (and various other terminals) renders them. That way, the colors of the terminal and GUI versions are uniformly colored on Linux.\nlet g:seoul256_srgb = 1"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#current-background-color",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#current-background-color",
    "title": "",
    "section": "6 Current background color",
    "text": "6 Current background color\nWhen loaded, seoul256.vim will set up two global variables so that you can use them to customize other plugins:\n\ng:seoul256_current_fg - Current foreground color in ANSI code\ng:seoul256_current_bg - Current background color in ANSI code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#iterm2-color-scheme",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#iterm2-color-scheme",
    "title": "",
    "section": "7 iTerm2 color scheme",
    "text": "7 iTerm2 color scheme\n\nOfficial iTerm2 color scheme\nseoul256-iTerm2 by Mikkel Malmberg."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#emacs-color-theme",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#emacs-color-theme",
    "title": "",
    "section": "8 Emacs color theme",
    "text": "8 Emacs color theme\n\nseoul256-emacs"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#kitty-color-theme",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#kitty-color-theme",
    "title": "",
    "section": "9 kitty color theme",
    "text": "9 kitty color theme\n\nseoul256-kitty"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#author",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#author",
    "title": "",
    "section": "10 Author",
    "text": "10 Author\nJunegunn Choi"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/junegunn-seoul256.vim.html#license",
    "title": "",
    "section": "11 License",
    "text": "11 License\nMIT"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kristijanhusak-vim-hybrid-material.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kristijanhusak-vim-hybrid-material.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n1 vim-hybrid-material\nMaterial color scheme for Vim based on w0ng/vim-hybrid color scheme.\nIt includes 2 color schemes: * Hybrid material * Hybrid reverse\nBoth schemes are almost similar to w0ng/vim-hybrid, just some colors are switched (Purple with red), to look more like tomorrow-night.\n\n1.0.1 Installation\n\nPathogen\ngit clone https://github.com/kristijanhusak/vim-hybrid-material ~/.vim/bundle/vim-hybrid-material\nRemember to run :Helptags to generate help tags\nNeoBundle\nNeoBundle 'kristijanhusak/vim-hybrid-material'\nVundle\nPlugin 'kristijanhusak/vim-hybrid-material'\nPlug\nPlug 'kristijanhusak/vim-hybrid-material'\nmanual\ncopy all of the files from colors directory into your ~/.vim/colors directory\n\n\n\n1.0.2 Options\nIf you would like some of the code to be bolded, like functions and language controls, add this option to vimrc:\nlet g:enable_bold_font = 1\nIf you want comments to be in italic, also add this:\nlet g:enable_italic_font = 1\nTo use transparent background, add this option:\nlet g:hybrid_transparent_background = 1\nNote: Options must be set before colorscheme hybrid_material statement.\n\n1.0.2.1 Hybrid Material\nBased on equinusocio/material-theme.\n\n\n\nhybrid-material\n\n\nTrue colors are a requirement for this color scheme to work properly. To enable this, place the following in your ~/.vimrc or ~/.config/nvim/init.vim file:\nif (has(\"nvim\"))\n  \"For Neovim 0.1.3 and 0.1.4 &lt; https://github.com/neovim/neovim/pull/2198 &gt;\n  let $NVIM_TUI_ENABLE_TRUE_COLOR=1\nendif\n\n\"For Neovim &gt; 0.1.5 and Vim &gt; patch 7.4.1799 &lt; https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 &gt;\n\"Based on Vim patch 7.4.1770 (`guicolors` option) &lt; https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd &gt;\n\" &lt; https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 &gt;\nif (has(\"termguicolors\"))\n  set termguicolors\nendif\n\n1.0.2.1.1 GVim/MacVim\nOnly add this to .vimrc after installation:\nset background=dark\ncolorscheme hybrid_material\n\n\n1.0.2.1.2 Vim\nFor Vim version check folder base16-material.\n\n\n\n1.0.2.2 Hybrid Reverse\nOriginal w0ng/vim-hybrid, with only colors switched.\n\n\n\nhybrid-reverse\n\n\n\n1.0.2.2.1 Gvim/MacVim/Vim\nset background=dark\ncolorscheme hybrid_reverse\n\n\n\n\n1.0.3 Light version\nLight version is also included, just set background to light instead of dark:\nset background=light\ncolorscheme hybrid_material\n\n\n1.0.4 Airline\nIf you are using vim-airline plugin, there is a hybrid theme that suites well with this color scheme (Used on screenshots).\nlet g:airline_theme = \"hybrid\"\nFont on screenshot: Inconsolata\n\n\n1.0.5 Thanks to\n\nw0ng/vim-hybrid\nequinusocio/material-theme\n@seanwash for adding support for Vim\n\n\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kristijanhusak-vim-hybrid-material.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/kristijanhusak-vim-hybrid-material.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#but-my-terminal-has-only-256-colors",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#but-my-terminal-has-only-256-colors",
    "title": "",
    "section": "1.1 But, my terminal has only 256 colors!",
    "text": "1.1 But, my terminal has only 256 colors!\nFor terminals not supporting true colors, Solarized 8 will fall back to use an approximate palette based on xterm’s 256 colors, which looks more or less like this:\n\n\n\n\n\n\n\nDark 256 color palette\nLight 256 color palette\n\n\n\n\n\n\n\n\n\n(Yeah, it looks like a different color scheme: Solarized palette is far away from xterm colors!)\nIf you do not like this approximation, to get exact colors with such terminals you have two possibilities:\n\nModify some of your terminal colors in the range 16–255 to match Solarized palette. For this purpose, you may run (not source!) scripts/solarized8.sh; no setting is needed in Vim. For instance, if you are using Bash, put this in .bashrc:\nsh /path/to/scripts/solarized.sh\nNote: this method is supported only by some terminals. For instance, in Apple’s Terminal.app, running solarized.sh has no effect.\nSet your terminal’s 16 ANSI colors (the colors in the range 0–15) to the Solarized palette (how to do that depends on the terminal) and set    t_Co=16 in Vim to instruct Vim to use your terminal’s colors. Be aware that, if you force the use of your terminal colors in Vim with any of these settings, but your terminal is not configured to use the Solarized palette, your colors will be completely off!\n\nNote: whatever method you choose, keep in mind that if your terminal does not support millions of colors, you must not set termguicolors (i.e., make sure that set termguicolors? outputs notermguicolors)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#what-if-i-happen-to-work-on-vt100-or-similar",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#what-if-i-happen-to-work-on-vt100-or-similar",
    "title": "",
    "section": "1.2 What if I happen to work on vt100 or similar?",
    "text": "1.2 What if I happen to work on vt100 or similar?\nIn the past, Solarized 8 used to complain when your terminal did not support enough colors. But the current version will gracefully degrade to a (beautiful!) black&white color scheme:\n\n\n\n\n\n\n\nSolarized 8 B&W variant\nSolarized 8 B&W variant"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#installation",
    "title": "",
    "section": "1.3 Installation",
    "text": "1.3 Installation\nIf your Vim supports packages (echo has('packages') prints 1), I strongly recommend that you use them. Just clone this repo inside pack/*/opt, e.g.:\ngit clone https://github.com/lifepillar/vim-solarized8.git \\\n    ~/.vim/pack/themes/opt/solarized8\nOtherwise, use you favourite installation method.\nThere are actually four optimized* color schemes you may load:\n\nsolarized8_high: high-contrast variant (screenshot below, first column);\nsolarized8: the default Solarized theme (screenshot below, second column);\nsolarized8_low: low-contrast variant (screenshot below, third column);\nsolarized8_flat: “flat” variant (screenshot below, fourth column).\n\n\nThe “flat” variant does not exist in the original Solarized. It differs from solarized8 mainly in how the status line, split bars and tab bar look like:\n\nTo use a Solarized 8 color scheme, set the background (dark or light) then load the variant you want, e.g.:\nset background=dark\ncolorscheme solarized8\nIf you opt to use some Vim plugin manager instead, the following should be added to your vimrc, rather than the above, for the color scheme to be loaded correctly:\nset background=dark\nautocmd vimenter * ++nested colorscheme solarized8\nTo switch the background from dark to light or vice versa, just set background accordingly.\nIf you use Vim packages, there is no need to packadd solarized8. Keep your runtimepath clean!\n* Below is the result of a benchmark I have made using Vim 8.1.1450 and iTerm 2 v3.2.6 on a MacBook Pro Early 2015 with macOS 10.14.5. To make the comparison meaningful, g:solarized_extra_hi_groups was set to 1: Solarized 8 should load a bit faster if you do not enable additional syntax items. Note that Solarized 8 is optimized for what are believed to be the most common use cases, i.e., GUI, true-color terminals and 256-color terminals."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#options",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#options",
    "title": "",
    "section": "1.4 Options",
    "text": "1.4 Options\nThe following options are inherited from Solarized, although their effects may be slightly different from those in the original Solarized:\n\ng:solarized_visibility: one of \"normal\" (default), \"low\", \"high\": controls CursorLineNr, LineNr, NonText, SpecialKey, Title, and all the Spell* highlight groups; in light mode, it may also slightly change the color for Cursor and MatchParen;\ng:solarized_diffmode: one of \"normal\" (default), \"low\", \"high\": controls the style of DiffAdd, DiffChange, DiffDelete, and DiffText.\ng:solarized_termtrans: make the background transparent if set to 1 (default: 0). This has effect only if Vim is run from the terminal.\n\nThe following options were not available in the original Solarized:\n\ng:solarized_statusline: one of \"normal\" (default), \"low\" or \"flat\". This affects the “structural” elements of your editor: StatusLine, StatusLineNC, TabLine, TablineFill, TabLineSel, and VertSplit.\ng:solarized_italics: set to 0 to suppress italics (default is 1). Note that in the terminal whether italics is actually used depends also on the font and the terminal environment: setting this option to 1 is not guaranteed to work.\ng:solarized_old_cursor_style: set to 1 if you want to use the original Solarized’s cursor style (default: 0). By default, the cursor is orange or red in light themes (depending on g:solarized_visibility), and blue in dark themes. Please note that your terminal may override the cursor’s color, so this option is not guaranteed to change the cursor’s color.\ng:solarized_extra_hi_groups: set to 1 to enable Solarized filetype-specific syntax highlighting groups (default is 0). Please be aware that if your Vim is very old you may encounter an issue with syntax items defined in color schemes.\n\nAll these options may be used with any Solarized 8 variant."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#troubleshooting",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#troubleshooting",
    "title": "",
    "section": "1.5 Troubleshooting",
    "text": "1.5 Troubleshooting\nHey, I do not get the right colors when running Vim inside tmux or in my favourite true-color enabled terminal!\nTry putting this in your .vimrc:\nlet &t_8f = \"\\&lt;Esc&gt;[38;2;%lu;%lu;%lum\"\nlet &t_8b = \"\\&lt;Esc&gt;[48;2;%lu;%lu;%lum\"\nSee :h xterm-true-color for the details.\nIt may also be necessary to add the following to your tmux.conf:\n# Add truecolor support\nset-option -ga terminal-overrides \",xterm-256color:Tc\"\n# Default terminal is 256 colors\nset -g default-terminal \"tmux-256color\"\nSee also these threads:\n\nColors are off when running Vim via SSH inside tmux\nComments look weird in tmux"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#hacking",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/lifepillar-vim-solarized8.html#hacking",
    "title": "",
    "section": "1.6 Hacking",
    "text": "1.6 Hacking\nDo you want to hack the theme? Install Colortemplate, edit the templates/*.colortemplate files, then rebuild the color schemes.\nIf you extend or improve Solarized 8, please consider submitting a pull request!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#an-improved-codeschool-like-vim-theme-for-256-color-terminals",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#an-improved-codeschool-like-vim-theme-for-256-color-terminals",
    "title": "",
    "section": "1.1 An improved codeschool like vim theme for 256-color terminals",
    "text": "1.1 An improved codeschool like vim theme for 256-color terminals\ntermschool is a vim theme optimized for 256-color terminals. The theme “medium/dark” and makes heavy use of greys, greens and blues in pastel tones.\nThis is a screenshot of vim running termschool:\n\n\n\nvi-termschool\n\n\nThe original codeschool for 256-color terminals was created by @Astonj (http://astonj.com) based on the editor used at http://codeschool.com. While I enjoyed the theme, I felt it could use a number of improvements and started implementing them for private use. At some point, my version started to differ from the original and I decided to release it for public use, with the name “termschool” (think “Codeschool for terminals.”)\nKeep in mind that this theme is a constant work in progress. I use editors all day and once in a while I’ll stumble on some color combination that I don’t quite like. When that happens, I’ll update the theme and push a change. Fork this repository if you prefer a theme that will never change, or keep pulling newer versions if you like my fixes and improvements."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#using-vundle",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#using-vundle",
    "title": "",
    "section": "2.1 Using Vundle",
    "text": "2.1 Using Vundle\nIf you’re using Vundle, just add the following to your ~/.vimrc file:\nPlugin 'marcopaganini/termschool-vim-theme'\ncolorscheme termschool\nWhile still inside vim, type: &lt;ESC&gt;:PluginInstall. This should install termschool automatically. Restart vim and the new theme should be the default. Once in a while, type &lt;ESC&gt;:PluginUpdate to fetch the newest version of the plugin from github."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#manual-installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#manual-installation",
    "title": "",
    "section": "2.2 Manual installation",
    "text": "2.2 Manual installation\nManual installation is very simple: Download the termschool.vim file and copy it into your ~/.vim/colors directory. Edit your ~/.vimrc file and add:\ncolorscheme termschool\nRestart vim and everything should work.\nA better (but slightly more complicated) option is to git clone this repository somewhere in your disk and create a symlink from the termschool.vim file inside your working repository to ~/.vim/colors."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#caveats",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#caveats",
    "title": "",
    "section": "2.3 Caveats",
    "text": "2.3 Caveats\nPlease note that this theme requires a 256-color capable terminal. Most popular terminals are 256-color capable these days, but if things look odd, your terminal might not have this capability.\nIf you know your terminal is 256-color capable and things still look ugly/weird, try adding the following to your ~/.vimrc file right before the colorscheme termschool line:\nset t_Co=256\nThis will force vim to use 256 colors.\nNote that the theme has been tuned for 256-color terminals (I just can’t match the productivity of screen + vim on gvim) but should also work fine for GUI environments.\nFeel free to send comments with ideas, suggestions and push requests."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#fzf-compatible-colors",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#fzf-compatible-colors",
    "title": "",
    "section": "2.4 FZF Compatible colors",
    "text": "2.4 FZF Compatible colors\nIf you use FZF, you can get termschool compatible colors by adding the following to your ~/.bashrc:\nexport FZF_DEFAULT_OPTS=\"${FZF_DEFAULT_OPTS}\"'\n  --color=\"fg:231,bg:234,bg+:23,hl:113,gutter:234\"\n  --color=\"query:255,prompt:178,pointer:178,marker:44\"\n'\nIf your terminal supports truecolor, you can make the FZF colors match the GUI colors more closely:\nexport FZF_DEFAULT_OPTS=\"${FZF_DEFAULT_OPTS}\"'\n  --color=\"fg:#f0f0f0,bg:#252c31,bg+:#005f5f,hl:#87d75f,gutter:#252c31\"\n  --color=\"query:#ffffff,prompt:#f0f0f0,pointer:#dfaf00,marker:#00d7d7\"\n'"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#related-links",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/marcopaganini-termschool-vim-theme.html#related-links",
    "title": "",
    "section": "2.5 Related Links",
    "text": "2.5 Related Links\nYou may also want to check the Mojave vim theme, a dark color theme based (mostly) on pastel colors that is well suited to long editing sessions."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html",
    "title": "",
    "section": "",
    "text": "Code\nMaterialbox is heavily inspired by Gruvbox and Material."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#attention",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#attention",
    "title": "",
    "section": "1 Attention",
    "text": "1 Attention\n\nOnly Graphical Vim! If you need a decent theme with terminal and graphical Vim support please check Gruvbox.\nThis theme fallback to gruvbox colour scheme while using the terminal"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#screenshots",
    "title": "",
    "section": "2 Screenshots",
    "text": "2 Screenshots\nImgur link. The font used can be found here: Iosevka.\n\n2.1 Dark mode\n\n\n\nScreenshot Dark\n\n\n\n\n2.2 Light mode\n\n\n\nScreenshot Light"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#contrast-options",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#contrast-options",
    "title": "",
    "section": "3 Contrast options",
    "text": "3 Contrast options\nRefer Gruvbox wiki section for contrast configuration and other options."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#features",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#features",
    "title": "",
    "section": "4 Features",
    "text": "4 Features\nThanks to Gruvbox theme, so check it first.\n\nLots of style-customization options (contrast, color invertion, italics usage etc.)\nExtended filetype highlighting: Html, Xml, Vim (and ES6 with yajs.vim), Clojure, C, Python, JavaScript, CoffeeScript, Ruby, Objective-C, Go, Lua, MoonScript, Java, Markdown, Haskell\nSupported plugins: EasyMotion, vim-sneak, Indent Guides, indentLine, Rainbow Parentheses, Airline, GitGutter, Signify, ShowMarks, Signature, Syntastic, CtrlP, Startify"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#todo",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#todo",
    "title": "",
    "section": "5 ToDo",
    "text": "5 ToDo\n\nA lot things…"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#self-promotion",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#self-promotion",
    "title": "",
    "section": "6 Self-Promotion",
    "text": "6 Self-Promotion\nIf you like materialbox follow first Gruvbox on GitHub and vote for it on vim.org. Then, follow on GitHub Materialbox."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/mkarmona-materialbox.html#license",
    "title": "",
    "section": "7 License",
    "text": "7 License\nMIT/X11"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nanotech-jellybeans.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nanotech-jellybeans.vim.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nanotech-jellybeans.vim.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nanotech-jellybeans.vim.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nInstall the color scheme by adding it to your ~/.vim/colors directory\nmkdir -p ~/.vim/colors\ncd ~/.vim/colors\ncurl -O https://raw.githubusercontent.com/nanotech/jellybeans.vim/master/colors/jellybeans.vim\nJellybeans can also be installed through plugin managers such as dein.vim, Pathogen, VAM, vim-plug, Vundle, etc.\nTo enable the jellybeans color scheme, use\n:colorscheme jellybeans\nIf you are satisfied, you can add colorscheme jellybeans to your ~/.vimrc file (_vimrc in Windows)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nanotech-jellybeans.vim.html#options",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nanotech-jellybeans.vim.html#options",
    "title": "",
    "section": "1.2 Options",
    "text": "1.2 Options\n\n1.2.1 Custom Highlights\nIf you prefer slightly different colors from what Jellybeans defines, you can set g:jellybeans_overrides in your .vimrc to a dictionary of custom highlighting parameters:\nlet g:jellybeans_overrides = {\n\\    'Todo': { 'guifg': '303030', 'guibg': 'f0f000',\n\\              'ctermfg': 'Black', 'ctermbg': 'Yellow',\n\\              'attr': 'bold' },\n\\    'Comment': { 'guifg': 'cccccc' },\n\\}\nThis removes the need to edit Jellybeans directly, simplifying upgrades. In addition, RGB colors specified this way are run through the same color approximation algorithm that the core theme uses, so your colors work just as well in 256-color terminals.\nIf you can pick better colors than the approximator, specify them in the 256ctermfg and 256ctermbg parameters to override its choices.\n\n1.2.1.1 Custom Background Colors\nTo set a custom background color, override the special background highlight group:\nlet g:jellybeans_overrides = {\n\\    'background': { 'guibg': '000000' },\n\\}\nJellybeans uses the background color in multiple highlight groups. Using the special background group overrides them all at once.\nThis replaces g:jellybeans_background_color and g:jellybeans_background_color_256 from Jellybeans versions before 1.6.\n\n\n1.2.1.2 Terminal Background\nIf you would prefer to use your terminal’s default background (e.g. for transparent backgrounds, image backgrounds, or a different color) instead of the background color that Jellybeans applies, use this background override code:\nlet g:jellybeans_overrides = {\n\\    'background': { 'ctermbg': 'none', '256ctermbg': 'none' },\n\\}\nif has('termguicolors') && &termguicolors\n    let g:jellybeans_overrides['background']['guibg'] = 'none'\nendif\n\n\n1.2.1.3 MatchParen Colors\nJellybeans sets alternate MatchParen colors (magenta on black) in some terminals to be more readable out of the box:\n\nApple’s Terminal.app has default themes with cursor colors that are too close in brightness to Jellybeans’ preferred MatchParen background color of #556779 to be clearly distinguishable.\nDefault 16-color terminal palettes don’t typically have a color available that can approximate the preferred MatchParen background color.\n\nIf you use Terminal.app with a brighter cursor color, you can use the standard MatchParen colors with this override:\nlet g:jellybeans_overrides = {\n\\    'MatchParen': { 'guifg': 'ffffff', 'guibg': '556779' },\n\\}\nTo use the standard MatchParen colors in a 16-color terminal, configure Low-Color Black as described in the section below.\nIf you prefer the alternate MatchParen colors, you can use them everywhere with\nlet g:jellybeans_overrides = {\n\\    'MatchParen': { 'guifg': 'dd0093', 'guibg': '000000',\n\\                    'ctermfg': 'Magenta', 'ctermbg': '' },\n\\}\nAdded in version 1.7.\n\n\n\n1.2.2 Italics\nJellybeans disables italics in terminal Vim by default, as some terminals do other things with the text’s colors instead of actually italicizing the text. If your terminal does fully support italics, add\nlet g:jellybeans_use_term_italics = 1\nto your .vimrc to enable italics in terminal Vim.\nIf you don’t want italics even in GUI Vim, add\nlet g:jellybeans_use_gui_italics = 0\n\n\n1.2.3 Low-Color Black (16 and 8 color terminals)\nSince the background on a dark terminal is usually black already, Jellybeans can appropriate the black ANSI color as a dark grey and use no color when it really wants black.\nAfter changing your terminal’s color palette (#444444 is suggested), add this to your .vimrc:\nlet g:jellybeans_use_lowcolor_black = 1\nThis option was changed to be disabled by default in version 1.7."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nanotech-jellybeans.vim.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nanotech-jellybeans.vim.html#screenshots",
    "title": "",
    "section": "1.3 Screenshots",
    "text": "1.3 Screenshots\n\nThe font in the screenshot is 10pt Monaco:\nset guifont=Monaco:h10 noanti"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#installation",
    "title": "",
    "section": "1 installation",
    "text": "1 installation\nIf you don’t have a preferred plugin management method, consider vim-plug, which can be installed (on *nix systems) with:\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\n  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\nHaving installed vim-plug, snow can be installed by adding the following to the top of your vimrc…\ncall plug#begin('~/.vim/plugged')\nPlug 'nightsense/snow'\ncall plug#end()\n…then restarting vim, followed by running :PlugUpdate (at the vim command line)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#activation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#activation",
    "title": "",
    "section": "2 activation",
    "text": "2 activation\nFor a snow day, add the following to vimrc:\nset background=light\ncolorscheme snow\nFor a snowy evening:\nset background=dark\ncolorscheme snow\nTo set the background automatically based on the time at which vim is launched:\nif strftime('%H') &gt;= 7 && strftime('%H') &lt; 19\n  set background=light\nelse\n  set background=dark\nendif\ncolorscheme snow\n…which activates the light version of snow during the day (defined here as 7AM-7PM), dark version at night.\n\nBe sure to set colorscheme after background, otherwise some theme colors may not be applied."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#status-line-themes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#status-line-themes",
    "title": "",
    "section": "3 status line themes",
    "text": "3 status line themes\nsnow comes with themes for airline and lightline, which can be activated with the following vimrc code:\n\n\n\n\n\n\nairline\n\n\nlightline\n\n\n\n\nlight\n\n\nlet g:airline_theme=‘snow_light’\n\n\nlet g:lightline = { ‘colorscheme’: ‘snow_light’ }\n\n\n\n\ndark\n\n\nlet g:airline_theme=‘snow_dark’\n\n\nlet g:lightline = { ‘colorscheme’: ‘snow_dark’ }\n\n\n\n\nStatus line themes can be added to the time-based snippet above:\nif strftime('%H') &gt;= 7 && strftime('%H') &lt; 19\n  set background=light\n  let g:lightline = { 'colorscheme': 'snow_light' }\nelse\n  set background=dark\n  let g:lightline = { 'colorscheme': 'snow_dark' }\nendif\ncolorscheme snow"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#terminal-vim",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#terminal-vim",
    "title": "",
    "section": "4 terminal vim",
    "text": "4 terminal vim\n\n4.1 colors\nTerminals/multiplexers with true-color support can display the exact colors of the snow theme.\nIn most cases, the only vimrc setting you need is:\nset termguicolors\nIn some cases you’ll also need (see :h xterm-true-color for explanation):\nlet &t_8f = \"\\&lt;Esc&gt;[38;2;%lu;%lu;%lum\"\nlet &t_8b = \"\\&lt;Esc&gt;[48;2;%lu;%lu;%lum\"\nIf termguicolors is not set, terminal vim will fall back to a rough approximation of snow, drawing from the terminal emulator’s 256-color palette (if present).\n\nThe fallback version of snow defines colors using numbers in the range 0-255 (as opposed to 6-character hex codes, whose range of 224 values is known as “true color”). Terminal emulators with 256-color support understand this encoding, though they vary in the exact color associated with each number. The closest thing to a standard 256-color *nix palette is that used by xterm, the default X Windows terminal emulator.\n\n\n\n4.2 cursor shape\nTo set mode-specific cursor shapes in terminal vim, see the Vim Tips Wiki.\nFor instance, to set cursor shapes in vte-compatible terminals, you could add to vimrc:\nlet &t_SI = \"\\&lt;Esc&gt;[6 q\"\nlet &t_SR = \"\\&lt;Esc&gt;[4 q\"\nlet &t_EI = \"\\&lt;Esc&gt;[2 q\"\n…which sets the cursor to a vertical line for insert mode, underline for replace mode, and block for normal mode."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#shell",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#shell",
    "title": "",
    "section": "5 shell",
    "text": "5 shell\n\n5.1 colors\nMany terminal emulators can be themed by sourcing the color-setting shell scripts included with snow. The path to these scripts will depend on your plugin management method.\nFor instance, if you use vim-plug and want to apply the dark snow theme to your bash or zsh shell, add the following to ~/.bashrc or ~/.zshrc:\n[ -n \"$PS1\" ] && sh ~/.vim/plugged/snow/shell/snow_dark.sh\nOr for the fish shell, add to ~/.config/fish/config.fish:\nif status --is-interactive\n  sh ~/.vim/plugged/snow/shell/snow_dark.sh\nend\nIf you use vundle, replace plugged in the above paths with bundle.\nReplace dark with light for the light theme.\n\n\n5.2 dircolors\nThe text highlighting used by the ls command (for distinguishing file types) can be themed by sourcing the “dircolors” file included with snow. The path to this file will depend on your plugin management method.\nFor instance, if you use vim-plug and want to apply the snow dircolors to your bash or zsh shell, add the following to ~/.bashrc or ~/.zshrc:\neval `dircolors ~/.vim/plugged/snow/shell/dircolors`\nOr for the fish shell, add to ~/.config/fish/config.fish:\neval (dircolors -c ~/.vim/plugged/snow/shell/dircolors)\nIf you use vundle, replace plugged in the above paths with bundle.\n\n\n5.3 fish syntax\nAgain, the script path will depend on your plugin management method.\nFor the dark theme in a vim-plug setup, add to ~/.config/fish/config.fish:\nsource ~/.vim/plugged/snow/shell/snow_dark.fish"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#ports",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#ports",
    "title": "",
    "section": "6 ports",
    "text": "6 ports\n\niterm2\ntmux\nkitty"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#building-from-source",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nightsense-snow.html#building-from-source",
    "title": "",
    "section": "7 building from source",
    "text": "7 building from source\nFrom the templates directory, run: fish generate.fish.\nDependencies:\n\nfish shell\ncolormath Python module\n\n\n                    \n\nThe 4.5:1 W3C contrast ratio standard for readability is met by all text/background combinations, with the exception of some transient highlighting (e.g. cursorline/column), which nonetheless well exceeds the minimal ISO 3:1 standard.\n\n\nimage credit: snowflake macrophoto by Olga & Alexey (CC BY-NC 2.0)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#screenshots",
    "title": "",
    "section": "1.1 Screenshots",
    "text": "1.1 Screenshots\nFira Code font on dark and light backgrounds:"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#installation",
    "title": "",
    "section": "1.2 Installation",
    "text": "1.2 Installation\nCopy the color scheme file to your ~/.vim/colors directory, or use a plugin manager like Plug or Vundle and add \"nikolvs/vim-sunbather\" as a plugin."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#usage",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#usage",
    "title": "",
    "section": "1.3 Usage",
    "text": "1.3 Usage\n:colorscheme sunbather\nSupports both background=light and background=dark."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#credits",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#credits",
    "title": "",
    "section": "1.4 Credits",
    "text": "1.4 Credits\nForked from paramount. Based on the pencil and off colorschemes."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#contributions",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#contributions",
    "title": "",
    "section": "1.5 Contributions",
    "text": "1.5 Contributions\nIf you find any problems with this color scheme please post an issue here on GitHub. If you don’t like some specific color, please fork it instead and customize to your liking. Thanks!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/nikolvs-vim-sunbather.html#license",
    "title": "",
    "section": "1.6 License",
    "text": "1.6 License\nOriginal license from pencil: MIT"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html",
    "title": "",
    "section": "",
    "text": "Code\nLight and dark vim colorscheme, shamelessly stolen from atom (another excellent text editor). One supports true colors and falls back gracefully and automatically if your environment does not support this feature."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#vim-airline-theme",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#vim-airline-theme",
    "title": "",
    "section": "1 Vim Airline theme",
    "text": "1 Vim Airline theme\nAdd the following line to your ~/.vimrc or ~/.config/nvim/init.vim\nlet g:airline_theme='one'\nAs for the colorscheme, this theme comes with light and dark flavors."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#list-of-enhanced-language-support",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#list-of-enhanced-language-support",
    "title": "",
    "section": "2 List of enhanced language support",
    "text": "2 List of enhanced language support\nPull requests are more than welcome here. I have created few issues to provide a bare bone roadmap for this color scheme.\n\n2.1 Stable\n\nAsciidoc\nCSS and Sass\nCucumber features\nElixir\nGo\nHaskell\nHTML\nJavaScript, JSON\nMarkdown\nPureScript (thanks: Arthur Xavier)\nRuby\nRust (thanks: Erasin)\nVim\nXML\n\n\n\n2.2 In progress\n\nJade\nPHP\nPython\nSwitch to estilo in progress, not stable at all and does not reflect all the capabilities of the current mainstream version"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#installation",
    "title": "",
    "section": "3 Installation",
    "text": "3 Installation\nYou can use your preferred Vim Package Manager to install One."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#usage",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#usage",
    "title": "",
    "section": "4 Usage",
    "text": "4 Usage\nOne comes in two flavors: light and dark.\ncolorscheme one\nset background=dark \" for the dark version\n\" set background=light \" for the light version\nset background has to be called after setting the colorscheme, this explains the issue #21 where Vim tries to determine the best background when ctermbg for the Normal highlight is defined.\n\n4.1 Italic support\nSome terminals do not support italic, cf. #3.\nIf your terminal does support italic, you can set the g:one_allow_italics variable to 1 in your .vimrc or .config/nvim/init.vim:\nset background=light        \" for the light version\nlet g:one_allow_italics = 1 \" I love italic for comments\ncolorscheme one\niTerm2 can support italic, follow the instructions given in this blog post by Alex Pearce. Make sure to read the update if you are using tmux version 2.1 or above.\n\n\n4.2 True color support\nTo benefit from the true color support make sure to add the following lines in your .vimrc or .config/nvim/init.vim\n\"Credit joshdick\n\"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.\n\"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support\n\"(see &lt; http://sunaku.github.io/tmux-24bit-color.html#usage &gt; for more information.)\nif (empty($TMUX))\n  if (has(\"nvim\"))\n    \"For Neovim 0.1.3 and 0.1.4 &lt; https://github.com/neovim/neovim/pull/2198 &gt;\n    let $NVIM_TUI_ENABLE_TRUE_COLOR=1\n  endif\n  \"For Neovim &gt; 0.1.5 and Vim &gt; patch 7.4.1799 &lt; https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 &gt;\n  \"Based on Vim patch 7.4.1770 (`guicolors` option) &lt; https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd &gt;\n  \" &lt; https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 &gt;\n  if (has(\"termguicolors\"))\n    set termguicolors\n  endif\nendif\n\n\nset background=dark \" for the dark version\n\" set background=light \" for the light version\ncolorscheme one\n\n\n4.3 Tmux support\nTo get true color working in tmux, ensure that the $TERM environment variable is set to xterm-256color. Inside the .tmux.conf file we need to override this terminal and also set the default terminal as 256 color.\n# Add truecolor support\nset-option -ga terminal-overrides \",xterm-256color:Tc\"\n# Default terminal is 256 colors\nset -g default-terminal \"screen-256color\"\nNote that this only works for Neovim (tested on 0.1.5). For some reason Vim (7.5.2334) doesn’t play nice. See blog post by Anton Kalyaev for more details on setting up tmux.\nFor Vim inside tmux, you can add the following snippet in your ~/.vimrc\nset t_8b=^[[48;2;%lu;%lu;%lum\nset t_8f=^[[38;2;%lu;%lu;%lum\nNote: the ^[ in this snippet is a real escape character. To insert it, press Ctrl-V and then Esc.\nI’ve tested the following setup on a Mac:\n\niTerm2 nightly build\nNeovim 0.1.4 and 0.1.5-dev\nVim 7.4.1952"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#customising-one-without-fork",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#customising-one-without-fork",
    "title": "",
    "section": "5 Customising One without fork",
    "text": "5 Customising One without fork\nFollowing a request to be able to customise one without the need to fork, one is now exposing a public function to meet this requirement.\nAfter the colorscheme has been initialised, you can call the following function:\none#highlight(group, fg, bg, attribute)\n\ngroup: Highlight you want to customise for example vimLineComment\nfg: foreground color for the highlight, without the ‘#’, for example: ff0000\nbg: background color for the highlight, without the ‘#’, for example: ff0000\nattribute: bold, italic, underline or any comma separated combination\n\nFor example:\ncall one#highlight('vimLineComment', 'cccccc', '', 'none')"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#contributors",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/rakr-vim-one.html#contributors",
    "title": "",
    "section": "6 Contributors",
    "text": "6 Contributors\nA special thank you to the following people\n\nlaggardkernel: Startup time improvement\nErasin: Rust support\nMalcolm Ramsay - malramsay64: Gracefully fail if colorscheme is not properly loaded\nArthur Xavier: PureScript support\nkeremc: Tip Vim true color support inside tmux\njetm: C/C++ highlighting"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#preparing-your-environment",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#preparing-your-environment",
    "title": "",
    "section": "1.1 Preparing your environment",
    "text": "1.1 Preparing your environment\nApprentice is designed first and foremost to look “good” in terminal emulators supporting 256 colors and in GUI Vim (GVim/MacVim). It supports lesser terminal emulators in the sense that it doesn’t break but it will definitely look “better” in more capable environments.\n\n1.1.1 GVim/MacVim\nThere is nothing to do for GVim/MacVim as GUI Vim supports “True Color” by default.\n\n\n1.1.2 “True Color” terminal emulators\nSince January 2016, Vim has been able to talk in “True Color” to terminal emulators supporting that feature. This means that it is now not only possible but also very easy to have the exact same colors in TUI Vim and GUI Vim.\nIn practice, this new development doesn’t change much for Apprentice which uses the exact same colors in the GUI as it does in the TUI anyway. But you can still try “True Color” if your setup satisfies the requirements with the following command:\n:set termguicolors\nSee this gist for more information and support status and, of course, :help 'termguicolors'.\n\n\n1.1.3 256color-ready terminal emulators\nMost terminal emulators in use nowadays can display 256 colors but most of them use a default TERM that tells Vim otherwise. Assuming your terminal emulator actually supports 256 colors, you must instruct it to brag about its terminal-hood by setting the correct TERM environment variable.\nThe “ideal” TERM usually includes the string 256color, like xterm-256color. The actual value is highly dependent on your terminal emulator and/or your terminal multiplexer, though, so you will have to refer to their manual.\n\n\n1.1.4 Working with 8/16 colors\nAs an alternative to changing your default TERM to xterm-256color or similar, you can keep its default value (usually something like xterm or screen) and set your terminal emulator to use the Apprentice colorscheme instead of its default colors.\nThe table below contains a subset of Apprentice’s palette. You can use a color picker or copy/paste these values:\n\n\n\n\n\n\n\n\n\nIntensity\nNormal\nIntensity\nBright\n\n\n\n\n0\n#1C1C1C \n8\n#444444 \n\n\n1\n#AF5F5F \n9\n#FF8700 \n\n\n2\n#5F875F \n10\n#87AF87 \n\n\n3\n#87875F \n11\n#FFFFAF \n\n\n4\n#5F87AF \n12\n#87AFD7 \n\n\n5\n#5F5F87 \n13\n#8787AF \n\n\n6\n#5F8787 \n14\n#5FAFAF \n\n\n7\n#6C6C6C \n15\n#FFFFFF \n\n\nForeground color\n#BCBCBC \nBackground color\n#262626 \n\n\n\nHere is a sample ~/.Xresources for you Linux/BSD users. You can import this into terminal.sexy to convert it to the appropriate color scheme format for your preferred terminal emulator:\n*.foreground: #BCBCBC\n*.background: #262626\n*.color0:     #1C1C1C\n*.color8:     #444444\n*.color1:     #AF5F5F\n*.color9:     #FF8700\n*.color2:     #5F875F\n*.color10:    #87AF87\n*.color3:     #87875F\n*.color11:    #FFFFAF\n*.color4:     #5F87AF\n*.color12:    #87AFD7\n*.color5:     #5F5F87\n*.color13:    #8787AF\n*.color6:     #5F8787\n*.color14:    #5FAFAF\n*.color7:     #6C6C6C\n*.color15:    #FFFFFF\nAnd a sample ~/.minttyrc for you Cygwin users:\nForegroundColour=188,188,188\nBackgroundColour=38,38,38\nBlack=28,28,28\nRed=175,95,95\nGreen=95,135,95\nYellow=135,135,95\nBlue=95,135,175\nMagenta=95,95,135\nCyan=95,135,135\nWhite=108,108,108\nBoldBlack=68,68,68\nBoldRed=255,135,0\nBoldGreen=135,175,135\nBoldYellow=255,255,175\nBoldBlue=135,175,215\nBoldMagenta=135,135,175\nBoldCyan=95,175,175\nBoldWhite=255,255,255\n\n\n1.1.5 All terminal emulators\nI recommend adjusting your terminal’s background color to the one used in Apprentice if you want to avoid having a “frame” around Vim:\n\n\n\nNotation\nValue\n\n\n\n\nxterm\n235\n\n\nhexadecimal\n#262626\n\n\nrgb\nrgb(38,38,38)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#installing-apprentice",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#installing-apprentice",
    "title": "",
    "section": "1.2 Installing Apprentice",
    "text": "1.2 Installing Apprentice\nColorschemes must be placed in a directory named colors that is somewhere in Vim’s runtimepath:\nThe canonical location is:\ncolors/apprentice.vim\nbut it could be:\n\" with Pathogen\nbundle/apprentice/colors/apprentice.vim\nor:\n\" with :help packages\npack/foobar/start/apprentice/colors/apprentice.vim\nor whatever works for you.\nArch users may be happy to hear that Apprentice has landed in AUR. To install it, use an AUR helper:\n$ yaourt -S vim-apprentice\nor download the PKGBUILD and do:\n$ makepkg -i\nNOTE: that package is maintained by a third-party so YMMV."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#enabling-apprentice",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#enabling-apprentice",
    "title": "",
    "section": "1.3 Enabling Apprentice",
    "text": "1.3 Enabling Apprentice\nTo test Apprentice, just type this command from normal mode and hit Enter:\n:colorscheme apprentice\nIf you like what you see and want to make Apprentice your default colorscheme, add this line to your vimrc, preferably near the end, after any syntax enable, syntax on, filetype ... on, call plug#end(), or call vundle#end() line:\ncolorscheme apprentice"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#tweaking-apprentice",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#tweaking-apprentice",
    "title": "",
    "section": "1.4 Tweaking Apprentice",
    "text": "1.4 Tweaking Apprentice\nIf you don’t want to maintain your own fork of Apprentice you can add something like this to your vimrc, before colorscheme apprentice:\nfunction! MyApprenticeOverrides() abort\n    highlight Comment ctermfg=245\n    highlight NonText ctermbg=17\nendfunction\n\naugroup MyColors\n    autocmd!\n    autocmd ColorScheme apprentice call MyApprenticeOverrides()\naugroup END\nSee this Gist for reference."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#hacking-apprentice",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#hacking-apprentice",
    "title": "",
    "section": "1.5 Hacking Apprentice",
    "text": "1.5 Hacking Apprentice\nOriginally written manually, Apprentice switched to a template based on romainl/vim-rnb a few years ago, which made the life of the author and contributors much easier even if the rate of change had been pretty low for quite a while.\nFollowing the author’s involvement with the vim/colorschemes project, Apprentice is now using a noticeably more powerful templating system: lifepillar/colortemplate that is on its way to become the official standard.\nYou can find the template under colortemplate/. See :help colortemplate for further instructions.\nIf you feel like making a pull request, make sure you commit both the modified template and the modified colorscheme."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#lightline-and-airline-themes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#lightline-and-airline-themes",
    "title": "",
    "section": "1.6 Lightline and Airline themes",
    "text": "1.6 Lightline and Airline themes\nI removed them from master but you can still find them in the “fancylines-and-neovim” branch."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#neovim-terminal-theme",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#neovim-terminal-theme",
    "title": "",
    "section": "1.7 Neovim terminal theme",
    "text": "1.7 Neovim terminal theme\nI removed it from master but you can still find it in the “fancylines-and-neovim” branch."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#what-they-say-about-apprentice.",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#what-they-say-about-apprentice.",
    "title": "",
    "section": "1.8 What they say about Apprentice.",
    "text": "1.8 What they say about Apprentice.\n\nVimgor, in #vim: “A colorscheme as subtle, gentle and pleasant as its creator isn’t.”\nGfixler, in r/vim: “I’ve been enjoying Apprentice. It’s the only color scheme so far that I haven’t felt like modifying in any way.”\ndddbbb, in r/vim: “Haha, you’ve been quoted in the readme. romainl is still with us in spirit! Apprentice looks nice, and it’s great that seems simple to get it working in terminal (no t_co hacks).”\nGfixler again, in r/vim: “My favorite color scheme by far is Apprentice, but again, it’s completely subjective. Pick something that makes you feel good while using it. I particularly love Apprentice’s selection blue color. I select things all the time just to experience it. So pretty.”\nlopid, in #vim: “waah waah”\n\n;-)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#derivative-works",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/romainl-Apprentice.html#derivative-works",
    "title": "",
    "section": "1.9 Derivative works",
    "text": "1.9 Derivative works\n\nIf light colorschemes are more your thing, Disciple is an experimental and mostly unmaintained negative version of Apprentice.\nOn the same note, Lightning is a light fork of Apprentice worth considering.\nIntern is an HexChat theme based on Apprentice.\nThis very enthusiastic fellow created a home for terminal emulator themes adapted from Apprentice.\nA port of Apprentice is available for the IDEA platform. Check it out over there.\nElysian is a new very nice colorscheme for 256color terminal emulators inspired by Apprentice.\nApprentice-theme is a port to spacemacs.\nWarlock is a brand new greyscale variant worth trying if Apprentice’s already low contrast is still too much.\nApprentice-tmux is a tmux theme based on Apprentice.\nApprentice-kitty is a port for kitty.\nHere and here are ports of Apprentice for Visual Studio Code.\nApprentice-windows-terminal is a port for Windows Terminal.\nApprentice-term is another effort to make Apprentice available to advanced Windows users.\nAlchemist appears to be trying to turn lead into gold, which I should probably take as a thinly veiled insult.\nSaturnite is a colorscheme for week-end coders adapted from Apprentice.\n\nGo team!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html",
    "title": "",
    "section": "",
    "text": "Code\nSometimes I need a high contrast color scheme, and I think monokai is one of the best solutions, it’s very beautiful and vivid.\nHowever there is one thing I can’t stand – the contrast is too high, which is totally unacceptable for me.\nThis color scheme is based on Monokai Pro, the contrast is adjusted to be a bit lower while keeping the colors vivid enough.\nThe shusia, maia and espresso variants are basically modified versions of Monokai Pro. I’m not going to port all variants of Monokai Pro because I don’t like some of them. In addition, I designed some new variants inspired by other color schemes."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#features",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#features",
    "title": "",
    "section": "1 Features",
    "text": "1 Features\n\nHigh contrast but within acceptable range.\nVivid colors.\nHighly customizable.\nRich support for common file types and plugins.\nTree-sitter support.\nSemantic highlighting support.\nItalic support 🎉"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#documentation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#documentation",
    "title": "",
    "section": "2 Documentation",
    "text": "2 Documentation\nSee :help sonokai.txt"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#related-projects",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#related-projects",
    "title": "",
    "section": "3 Related Projects",
    "text": "3 Related Projects\nSee this wiki page."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#contributing",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#contributing",
    "title": "",
    "section": "4 Contributing",
    "text": "4 Contributing\nSee this post."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#more-color-schemes",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#more-color-schemes",
    "title": "",
    "section": "5 More Color Schemes",
    "text": "5 More Color Schemes\n\nGruvbox Material\nEverforest\nEdge"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#inspirations",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#inspirations",
    "title": "",
    "section": "6 Inspirations",
    "text": "6 Inspirations\n\nMonokai Pro\nAtom One\nMaterial\nNord"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#maintainers",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#maintainers",
    "title": "",
    "section": "7 Maintainers",
    "text": "7 Maintainers\n\n\n\n\n\n\n\n\n\nSainnhe Park\nAntoine Cotten"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sainnhe-sonokai.html#license",
    "title": "",
    "section": "8 License",
    "text": "8 License\nMIT © sainnhe"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sonph-onehalf.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sonph-onehalf.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sonph-onehalf.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sonph-onehalf.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\n\n1.1.1 Using a plugin manager (recommended)\nvim-plug:\nPlug 'sonph/onehalf', { 'rtp': 'vim' }\nThe ‘rtp’ option is necessary as the vim theme resides in a subdirectory of the git repo.\n\n\n1.1.2 Manual Installation\nDownload the files in vim/ and put them in their respective folders (./vim/colors/ and ./vim/autoload/airline/themes/)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sonph-onehalf.html#usage",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/sonph-onehalf.html#usage",
    "title": "",
    "section": "1.2 Usage",
    "text": "1.2 Usage\nPut colorscheme &lt;scheme&gt; and let g:airline_theme='&lt;theme&gt;', if using airline or let g:lightline = { 'colorscheme': '&lt;theme&gt;' }, if using lightline, in your .vimrc to set the color scheme and airline (or lightline) theme. Make sure you have syntax highlighting on, and 256 colors set. Vim version &gt;= 7.4 recommended.\nFor example:\nsyntax on\nset t_Co=256\nset cursorline\ncolorscheme onehalflight\nlet g:airline_theme='onehalfdark'\n\" lightline\n\" let g:lightline = { 'colorscheme': 'onehalfdark' }\n\n1.2.1 True Colors\nBy default vim only allows specifying one of the 256 (8 bit) predefined colors (wikipedia).\nIf you want to match colors in vim and in your terminal exactly, you must enable true colors (24 bit).\nIn vim/neovim, use set termguicolors option:\nif exists('+termguicolors')\n  let &t_8f = \"\\&lt;Esc&gt;[38;2;%lu;%lu;%lum\"\n  let &t_8b = \"\\&lt;Esc&gt;[48;2;%lu;%lu;%lum\"\n  set termguicolors\nendif\nIf you use tmux, you must use version 2.2 or newer. Put this in your config:\nset -g default-terminal \"tmux-256color\"\nset -ga terminal-overrides \",*256col*:Tc\"\n(source)\nTo test if your neovim/tmux/terminal combination supports true colors or not, use this test script:\n\n\n\ntruecolors"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/tomasr-molokai.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/tomasr-molokai.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/tomasr-molokai.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/tomasr-molokai.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nCopy the file on your .vim/colors folder.\nIf you prefer the scheme to match the original monokai background color, put this in your .vimrc file:\nlet g:molokai_original = 1\nThere is also an alternative scheme under development for color terminals which attempts to bring the 256 color version as close as possible to the the default (dark) GUI version. To access, add this to your .vimrc:\nlet g:rehash256 = 1"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-pyte.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-pyte.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\nThis is a mirror of http://www.vim.org/scripts/script.php?script_id=1492\nThis is a light theme I use for coding. Background is very light grey, special things are green or blue, this is for gui only and uses italic for some things (which I find very nice as its makes gvim look less console-like).\nScreenshot: http://leetless.de/vim.html\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-pyte.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-pyte.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-twilight256.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-twilight256.vim.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\nThis is a mirror of http://www.vim.org/scripts/script.php?script_id=3436\nThis color scheme imitates TextMate theme Twilight.\nA screenshot can be viewed here: http://nealmilstein.com/ext/twilight256.png\nThe theme is designed to be used on a black background. I only tested it using a 256-color terminal; I do not think it will work on much else (gvim, 8-color terminal, etc.).\nThe functions in this theme that convert hex color codes to the nearest xterm-256 color number are from the theme desert2 (desert256), developed by Henry So, Jr. \nThe colors of this theme are based on the TextMate Twilight theme  www.macromates.com\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-twilight256.vim.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/vim-scripts-twilight256.vim.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html#updates",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html#updates",
    "title": "",
    "section": "1.1 Updates",
    "text": "1.1 Updates\n\n05/01/2016: Replaced let g:hybrid_use_Xresources = 1 in favour of let     g:hybrid_custom_term_colors = 1\n05/01/2016: Added let g:hybrid_reduced_contrast = 1"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html#requirements",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html#requirements",
    "title": "",
    "section": "1.2 Requirements",
    "text": "1.2 Requirements\n\ngVim 7.3+ on Linux, Mac and Windows.\nVim 7.3+ on Linux and Mac, using a terminal that supports 256 colours."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html#installation",
    "title": "",
    "section": "1.3 Installation",
    "text": "1.3 Installation\n\nCopy colors/hybrid.vim to:\n~/.vim/colors/hybrid.vim\nor alternatively, use a plugin manger such as vim-plug, NeoBundle, Vundle, or Pathogen.\nAdd to ~/.vimrc:\nset background=dark\ncolorscheme hybrid"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html#define-custom-terminal-colours-recommended",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html#define-custom-terminal-colours-recommended",
    "title": "",
    "section": "1.4 Define custom terminal colours (recommended)",
    "text": "1.4 Define custom terminal colours (recommended)\nDue to the limited 256 palette, colours in Vim and gVim will still be slightly different.\nIn order to have Vim use the same colours as gVim (the way this colour scheme is intended) define the basic 16 colours in your terminal.\n\n1.4.0.1 Linux users: rxvt-unicode, xterm\n\nAdd the default palette to ~/.Xresources:\nhttps://gist.github.com/3278077\n\n\n\npalette\n\n\nor alternatively, add the reduced contrast palette to ~/.Xresources:\nhttps://gist.github.com/w0ng/16e33902508b4a0350ae\n\n\n\npalette\n\n\nAdd to ~/.vimrc:\nlet g:hybrid_custom_term_colors = 1\nlet g:hybrid_reduced_contrast = 1 \" Remove this line if using the default palette.\ncolorscheme hybrid\n\n\n\n1.4.0.2 OSX users: iTerm\n\nImport the default colour preset into iTerm:\nhttps://raw.githubusercontent.com/w0ng/dotfiles/master/iterm2/hybrid.itermcolors\n\n\n\niterm_palette\n\n\nor alternatively, import the reduced contrast color preset into iTerm:\nhttps://raw.githubusercontent.com/w0ng/dotfiles/master/iterm2/hybrid-reduced-contrast.itermcolors\n\n\n\niterm_palette_reduced\n\n\nAdd to ~/.vimrc:\nlet g:hybrid_custom_term_colors = 1\nlet g:hybrid_reduced_contrast = 1 \" Remove this line if using the default palette.\ncolorscheme hybrid"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/w0ng-vim-hybrid.html#screenshots",
    "title": "",
    "section": "1.5 Screenshots",
    "text": "1.5 Screenshots\n\n1.5.1 Default palette on Linux\n    \n\n\n1.5.2 Reduced contrast palette on OSX"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/whatyouhide-vim-gotham.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/whatyouhide-vim-gotham.html",
    "title": "",
    "section": "",
    "text": "Code\nGotham is a very dark vim colorscheme. It works on GUI vim (MacVim or gVim) and on terminal vim. For terminal vim, there’s support for a lot of terminal emulators in the gotham-contrib repository."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/whatyouhide-vim-gotham.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/whatyouhide-vim-gotham.html#installation",
    "title": "",
    "section": "1 Installation",
    "text": "1 Installation\nI moved to vim-plug a while ago and never looked back. Anyway, you can install Gotham with whatever package manager you use. For example:\n\" vim-plug\nPlug 'whatyouhide/vim-gotham'\n\" NeoBundle\nNeoBundle 'whatyouhide/vim-gotham'\n\" Vundle\nPlugin 'whatyouhide/vim-gotham'\n\" dein.vim\ncall dein#add('whatyouhide/vim-gotham')\nIf you don’t use a plugin manager just copy the content of vim/colors/ to ~/.vim/colors.\nWhen you have the plugin installed, you can set it in your vimrc:\ncolorscheme gotham\n\n1.0.1 Terminal vim and 256 colors version\nIf you want to use Gotham in terminal vim, you should consider setting Gotham as the colorscheme of your terminal emulator too. See the relevant section.\nIf you’re fine with not-so-faithful colors, a 256 colors version of Gotham is available. To use it, just replace gotham with gotham256 in your vimrc:\ncolorscheme gotham256\nUsing gotham256 (given that your terminal supports 256 colors) ensures that the colors in vim are fixed and don’t depend on the colorscheme of the terminal emulator.\nPlease, use the 256 colors version only if you know what you’re doing since it looks “rougher” than the regular version.\n\n\n1.0.2 Airline\nGotham supports vim-airline out of the box. When you use the Gotham colorscheme, Airline should be able to pick it up and use it. If you want to set it manually, you can use the AirlineTheme command for both the regular version and the 256 colors version:\n:AirlineTheme gotham\n:AirlineTheme gotham256\nGotham by default emphasises the usage of insert mode by using a distinctive bright yellow color in the airline mode segment. To change the color used for insert mode to a darker less emphasised color add the following to your vimrc:\nlet g:gotham_airline_emphasised_insert = 0\n\n\n1.0.3 Lightline\nGotham supports lightline.vim too. To enable the colorscheme, add one of the following lines to your .vimrc:\nlet g:lightline = { 'colorscheme': 'gotham' }\nlet g:lightline = { 'colorscheme': 'gotham256' }\n\n\n1.1 Other\nGotham is available for other platforms too. If you want terminal vim to look as good as GUI vim, you have to install the Gotham colorscheme for your terminal emulator too.\nAn up-to-date list of supported platforms as well as installation instructions for each of those platforms are available at the gotham-contrib repository.\nThere’s an Emacs version too, but I don’t maintain it.\n\n\n1.2 Color Palette\n\n\n\nColor Base\nHex\nOther Colors\nHex\n\n\n\n\nBase 0\n#0c1014\nRed\n#c23127\n\n\nBase 1\n#11151c\nOrange\n#d26937\n\n\nBase 2\n#091f2e\nYellow\n#edb443\n\n\nBase 3\n#0a3749\nMagenta\n#888ca6\n\n\nBase 4\n#245361\nViolet\n#4e5166\n\n\nBase 5\n#599cab\nBlue\n#195466\n\n\nBase 6\n#99d1ce\nCyan\n#33859E\n\n\nBase 7\n#d3ebe9\nGreen\n#2aa889"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/whatyouhide-vim-gotham.html#contributing",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/whatyouhide-vim-gotham.html#contributing",
    "title": "",
    "section": "2 Contributing",
    "text": "2 Contributing\nAll forms of contribution are welcome: bug reports, bug fixes, pull requests and simple suggestions. Thanks!\n\n2.1 List of contributors\nYou can find the list of contributors here."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/whatyouhide-vim-gotham.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/whatyouhide-vim-gotham.html#license",
    "title": "",
    "section": "3 License",
    "text": "3 License\nMIT © 2014 Andrea Leopardi, see the license."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/yorickpeterse-happy_hacking.vim.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/yorickpeterse-happy_hacking.vim.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/yorickpeterse-happy_hacking.vim.html#screenshots",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/yorickpeterse-happy_hacking.vim.html#screenshots",
    "title": "",
    "section": "1.1 Screenshots",
    "text": "1.1 Screenshots\n\n\n\n\n\n\n\n\nRust\nRuby\nPython"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/yorickpeterse-happy_hacking.vim.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/yorickpeterse-happy_hacking.vim.html#installation",
    "title": "",
    "section": "1.2 Installation",
    "text": "1.2 Installation\nUsing vim-plug, add this to ~/.config/nvim/init.vim:\nPlug 'git@gitlab.com:yorickpeterse/happy_hacking.vim.git'\nThen run PlugInstall, followed by color happy_hacking."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/yorickpeterse-happy_hacking.vim.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/awesome-vim-colorschemes/docs/yorickpeterse-happy_hacking.vim.html#license",
    "title": "",
    "section": "1.3 License",
    "text": "1.3 License\nHappy Hacking and all extra source code in this repository is licensed under the MIT license unless specified otherwise. A copy of this license can be found in the file “LICENSE” in the root directory of this repository."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/LICENSE.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/LICENSE.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\nCopyright 2018-2018 by Qiming Zhao chemzqm@gmail.comaaa\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/LICENSE.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/LICENSE.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section",
    "title": "",
    "section": "1.1 2025-03-07",
    "text": "1.1 2025-03-07\n\nSupport extensions.recommendations configuration.\nSupport for UltiSnip options t m s."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-1",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-1",
    "title": "",
    "section": "1.2 2025-03-05",
    "text": "1.2 2025-03-05\n\nExport method workspace.fixWin32unixFilepath for filepath convert.\nAdd commands document.enableInlayHint and document.disableInlayHint.\nRefresh popup menu when completing incomplete sources."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-2",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-2",
    "title": "",
    "section": "1.3 2025-03-04",
    "text": "1.3 2025-03-04\n\nAdd VSCode command workbench.action.openSettingsJson.\nAdd workspace.isTrusted property."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-3",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-3",
    "title": "",
    "section": "1.4 2025-03-03",
    "text": "1.4 2025-03-03\n\nAdd command workspace.openLocalConfig.\nSupport vim built with win32unix enabled, including cygwin, git bash, WSL etc."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-4",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-4",
    "title": "",
    "section": "1.5 2025-02-24",
    "text": "1.5 2025-02-24\n\nConfigurations for file system watch, see :h coc-config-fileSystemWatch."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-5",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-5",
    "title": "",
    "section": "1.6 2025-02-23",
    "text": "1.6 2025-02-23\n\nAll global properties works with extensions #5222.\nReturn true or false for boolean option on vim (same as neovim).\nSupport completion sources using vim9sciprt module."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-6",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-6",
    "title": "",
    "section": "1.7 2025-02-22",
    "text": "1.7 2025-02-22\n\nQuickPick works with vim without terminal support."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-7",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-7",
    "title": "",
    "section": "1.8 2025-02-21",
    "text": "1.8 2025-02-21\n\nTo avoid unexpected signature help window close, signature help will be triggered after placeholder jump by default, when autocmd CocJumpPlaceholder call CocActionAsync('showSignatureHelp') not exists.\nSupport global.formatFilepath function for customize filepath displayed in symbols & location list."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-8",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-8",
    "title": "",
    "section": "1.9 2025-02-20",
    "text": "1.9 2025-02-20\nUse extensions section for extension related configurations. Deprecated configuration sections: coc.preferences.extensionUpdateCheck, coc.preferences.extensionUpdateUIInTab and coc.preferences.silentAutoupdate."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-9",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-9",
    "title": "",
    "section": "1.10 2025-01-03",
    "text": "1.10 2025-01-03\n\nAdd diagnostic.displayByVimDiagnostic configuration, set diagnostics to vim.diagnostic on nvim, and prevent coc.nvim’s handler to display in virtualText/sign/floating etc."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-10",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-10",
    "title": "",
    "section": "1.11 2024-12-10",
    "text": "1.11 2024-12-10\n\nFloating window can be set to fixed position, try diagnostic.floatConfig\nensureDocument and hasProvider support to accept specified bufnr"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-11",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-11",
    "title": "",
    "section": "1.12 2024-11-29",
    "text": "1.12 2024-11-29\n\nIncrease g:coc_highlight_maximum_count default to 500 for better performance.\nAdd uriConverter.code2Protocol for extensions"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-12",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-12",
    "title": "",
    "section": "1.13 2024-10-25",
    "text": "1.13 2024-10-25\n\nMention davidosomething/coc-diagnostics-shim.nvim as alternative to ALE for diagnostics display."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-13",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-13",
    "title": "",
    "section": "1.14 2024-08-28",
    "text": "1.14 2024-08-28\n\nAdd configuration codeLens.display"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-14",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-14",
    "title": "",
    "section": "1.15 2024-08-20",
    "text": "1.15 2024-08-20\n\nAdd CocAction('removeWorkspaceFolder').\nExpanded the quick pick API in typings"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-15",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-15",
    "title": "",
    "section": "1.16 2024-08-12",
    "text": "1.16 2024-08-12\n\nAdded coc.preferences.formatterExtension configuration"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-16",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-16",
    "title": "",
    "section": "1.17 2024-07-04",
    "text": "1.17 2024-07-04\n\nAdded NVIM_APPNAME support"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-17",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-17",
    "title": "",
    "section": "1.18 2024-06-27",
    "text": "1.18 2024-06-27\n\nAdded inlayHint.position configuration, with inline and eol options"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-18",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-18",
    "title": "",
    "section": "1.19 2024-06-20",
    "text": "1.19 2024-06-20\n\nAdded coc.preferences.extensionUpdateUIInTab to open CocUpdate UI in tab"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-19",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-19",
    "title": "",
    "section": "1.20 2024-05-29",
    "text": "1.20 2024-05-29\n\nBreak change: increase minimum vim/nvim version requirement\n\nvim 9.0.0438\nnvim 0.8.0"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-20",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-20",
    "title": "",
    "section": "1.21 2024-05-14",
    "text": "1.21 2024-05-14\n\nAdded suggest.reTriggerAfterIndent to control re-trigger or not after indent changes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-21",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-21",
    "title": "",
    "section": "1.22 2024-05-07",
    "text": "1.22 2024-05-07\n\nAllow CocInstall to install extension from Github in development mode"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-22",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-22",
    "title": "",
    "section": "1.23 2024-04-12",
    "text": "1.23 2024-04-12\n\nChange scope of codeLens configuration to language-overridable"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-23",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-23",
    "title": "",
    "section": "1.24 2024-03-26",
    "text": "1.24 2024-03-26\n\nAdded new --workspace-folder argument for diagnostics lists\nAdded new --buffer argument for diagnostics lists"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-24",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-24",
    "title": "",
    "section": "1.25 2024-02-28",
    "text": "1.25 2024-02-28\n\nIncrease g:coc_highlight_maximum_count default to 200\nBreak change: semanticTokens highlight groups changed:\n\nCocSem + type to CocSemType + type\nCocSem + modifier + type to CocSemTypeMod + type + modifier"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-25",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-25",
    "title": "",
    "section": "1.26 2024-03-06",
    "text": "1.26 2024-03-06\n\nadd outline.autoHide configuration to automatically hide the outline window when an item is clicked"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-26",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-26",
    "title": "",
    "section": "1.27 2024-02-27",
    "text": "1.27 2024-02-27\n\nAdd g:coc_disable_mappings_check to disable key-mappings checking\nAdd suggest.chineseSegments configuration to control whether to divide Chinese sentences into segments or not"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-27",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-27",
    "title": "",
    "section": "1.28 2023-09-02",
    "text": "1.28 2023-09-02\n\nSupport g:coc_list_preview_filetype."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-28",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-28",
    "title": "",
    "section": "1.29 2023-08-31",
    "text": "1.29 2023-08-31\n\nMinimal node version changed from 14.14.0 to 16.18.0.\nInlay hint support requires neovim &gt;= 0.10.0.\nRemoved configurations:\n\ninlayHint.subSeparator\ninlayHint.typeSeparator\ninlayHint.parameterSeparator"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-29",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-29",
    "title": "",
    "section": "1.30 2023-01-30",
    "text": "1.30 2023-01-30\n\nAlways show cancellable progress as notification without check notification.statusLineProgress."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-30",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-30",
    "title": "",
    "section": "1.31 2023-01-29",
    "text": "1.31 2023-01-29\n\nExclude source actions when request code actions with range.\nAny character can be used for channel name."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-31",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-31",
    "title": "",
    "section": "1.32 2023-01-26",
    "text": "1.32 2023-01-26\n\nAdd escape support to coc#status()."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-32",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-32",
    "title": "",
    "section": "1.33 2023-01-24",
    "text": "1.33 2023-01-24\n\nAdd encoding and CancellationToken support for runCommand function."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-33",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-33",
    "title": "",
    "section": "1.34 2023-01-23",
    "text": "1.34 2023-01-23\n\nMake vscode.open command work with file uri.\nCancel option for workspace.registerExprKeymap().\nSupport suggest.filterOnBackspace configuration."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-34",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-34",
    "title": "",
    "section": "1.35 2023-01-22",
    "text": "1.35 2023-01-22\n\nmaxRestartCount configuration for configured language server."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-35",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-35",
    "title": "",
    "section": "1.36 2022-12-25",
    "text": "1.36 2022-12-25\n\nCreate symbol tree from SymbolInformation list."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-36",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-36",
    "title": "",
    "section": "1.37 2022-12-23",
    "text": "1.37 2022-12-23\n\nSupport URI as param for API workspace.jumpTo()."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-37",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-37",
    "title": "",
    "section": "1.38 2022-12-22",
    "text": "1.38 2022-12-22\n\nSupport popup window for window related APIs."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-38",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-38",
    "title": "",
    "section": "1.39 2022-12-21",
    "text": "1.39 2022-12-21\n\nWhen create CocSem highlight group, replace invalid character of token types and token modifiers with underline."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-39",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-39",
    "title": "",
    "section": "1.40 2022-12-20",
    "text": "1.40 2022-12-20\n\nExport Buffer.setKeymap and Buffer.deleteKeymap with vim and neovim support.\nMake workspace.registerLocalKeymap accept bufnr argument."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-40",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-40",
    "title": "",
    "section": "1.41 2022-12-12",
    "text": "1.41 2022-12-12\n\nAllow configuration of window scoped used by folder configuration file, like VSCode.\nAdd location support for getHover action.\nUse unique id for each tab on vim.\nChinese word segmentation for keywords."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-41",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-41",
    "title": "",
    "section": "1.42 2022-12-05",
    "text": "1.42 2022-12-05\n\nAdd switchConsole method to LanguageClient"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-42",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-42",
    "title": "",
    "section": "1.43 2022-12-03",
    "text": "1.43 2022-12-03\n\nAdd configuration suggest.insertMode."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-43",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-43",
    "title": "",
    "section": "1.44 2022-12-02",
    "text": "1.44 2022-12-02\n\nExpand variables for string configuration value."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-44",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-44",
    "title": "",
    "section": "1.45 2022-11-30",
    "text": "1.45 2022-11-30\n\nFile fragment support for workspace.jumpTo().\nSupport g:coc_open_url_command.\nSupport contributes.configuration from extension as array."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-45",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-45",
    "title": "",
    "section": "1.46 2022-11-29",
    "text": "1.46 2022-11-29\n\nAdd documentations for develop of coc.nvim extensions.\nRemove unused variable g:coc_channel_timeout."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-46",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-46",
    "title": "",
    "section": "1.47 2022-11-28",
    "text": "1.47 2022-11-28\n\nPlaceholder and update value support for InputBox and QuickPick.\ntriggerOnly option property for vim completion source.\nExport getExtensionById from extensions module."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-47",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-47",
    "title": "",
    "section": "1.48 2022-11-26",
    "text": "1.48 2022-11-26\n\nUse CTRL-R expression instead of timer for pum related functions:\n\ncoc#pum#insert()\ncoc#pum#one_more()\ncoc#pum#next()\ncoc#pum#prev()\ncoc#pum#stop()\ncoc#pum#cancel()\ncoc#pum#confirm()"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-48",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-48",
    "title": "",
    "section": "1.49 2022-11-25",
    "text": "1.49 2022-11-25\n\nAvoid view change on list create.\nAdd configurations links.enable and links.highlight.\nUse cursorline for list on neovim (to have correct highlight).\nFix highlight not work on neovim 0.5.0 by use luaeval."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-49",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-49",
    "title": "",
    "section": "1.50 2022-11-22",
    "text": "1.50 2022-11-22\n\nAdd command document.toggleCodeLens."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-50",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-50",
    "title": "",
    "section": "1.51 2022-11-21",
    "text": "1.51 2022-11-21\n\nAdd CocAction('addWorkspaceFolder')."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-51",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-51",
    "title": "",
    "section": "1.52 2022-11-20",
    "text": "1.52 2022-11-20\n\nSupport code lens feature on vim9.\ncodeLens.subseparator default changed to |, like VSCode.\nAdd configuration coc.preferences.enableGFMBreaksInMarkdownDocument, default to true\nAdd key-mappings &lt;Plug&gt;(coc-codeaction-selected) and &lt;Plug&gt;(coc-codeaction-refactor-selected)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-52",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-52",
    "title": "",
    "section": "1.53 2022-11-19",
    "text": "1.53 2022-11-19\n\nCreate highlights after VimEnter.\nAction ‘organizeImport’ return false instead of throw error when import code action not found."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-53",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-53",
    "title": "",
    "section": "1.54 2022-11-18",
    "text": "1.54 2022-11-18\n\nThrow error when rpc request error, instead of echo message."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-54",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-54",
    "title": "",
    "section": "1.55 2022-11-13",
    "text": "1.55 2022-11-13\n\nPlugin emit ready after extensions activated."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-55",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-55",
    "title": "",
    "section": "1.56 2022-11-12",
    "text": "1.56 2022-11-12\n\nNot cancel completion when request for in complete sources."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-56",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-56",
    "title": "",
    "section": "1.57 2022-11-11",
    "text": "1.57 2022-11-11\n\nSupport filter and display completion items with different start positions.\nRemove configuration suggest.fixInsertedWord, insert word would always be fixed.\nConfiguration suggest.invalidInsertCharacters default to line break characters."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-57",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-57",
    "title": "",
    "section": "1.58 2022-11-10",
    "text": "1.58 2022-11-10\n\nNot reset ‘Search’ highlight on float window as it could be used.\nNote remap &lt;esc&gt; on float preview window.\nAdd new action feedkeys! to list.\nAdd new configuration list.floatPreview."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-58",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-58",
    "title": "",
    "section": "1.59 2022-11-07",
    "text": "1.59 2022-11-07\n\nAdd API CocAction('snippetInsert') for snippet insert from vim plugin.\nSnippet support for vim source, snippet item should have isSnippet to be true and insertText to be snippet text, when on_complete function exists, the snippet expand should be handled completion source."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-59",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-59",
    "title": "",
    "section": "1.60 2022-11-06",
    "text": "1.60 2022-11-06\n\nwindow.createQuickPick() API that show QuickPick by default, call show()\nFix change value property for QuickPick not works."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-60",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-60",
    "title": "",
    "section": "1.61 2022-10-30",
    "text": "1.61 2022-10-30\n\nAdd configuration colors.enable, mark colors.filetypes deprecated.\nAdd command document.toggleColors for toggle colors of current buffer.\nChanged filter of completion to use code from VSCode.\nAdd configuration suggest.filterGraceful"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-61",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-61",
    "title": "",
    "section": "1.62 2022-10-39",
    "text": "1.62 2022-10-39\n\nAdd configuration suggest.enableFloat back."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-62",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-62",
    "title": "",
    "section": "1.63 2022-10-27",
    "text": "1.63 2022-10-27\n\nUse workspace.rootPatterns replace coc.preferences.rootPatterns, old configuration still works when exists.\nStore configurations with configuration registry."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-63",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-63",
    "title": "",
    "section": "1.64 2022-10-25",
    "text": "1.64 2022-10-25\n\nAdd --height support to CocList."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-64",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-64",
    "title": "",
    "section": "1.65 2022-10-24",
    "text": "1.65 2022-10-24\n\nUse builtin static words source for snippet choices.\nRemove configuration \"snippet.choicesMenuPicker\"\nRemove unused internal functions coc#complete_indent() and coc#_do_complete()"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-65",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-65",
    "title": "",
    "section": "1.66 2022-10-21",
    "text": "1.66 2022-10-21\n\nConsider utf-16 code unit instead of unicode code point.\nAdd coc#string#character_index() coc#string#byte_index() and coc#string#character_length()."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-66",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-66",
    "title": "",
    "section": "1.67 2022-10-20",
    "text": "1.67 2022-10-20\n\nAdd coc#pum#one_more()"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-67",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-67",
    "title": "",
    "section": "1.68 2022-10-19",
    "text": "1.68 2022-10-19\n\nTrigger for trigger sources when no filter results available."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-68",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-68",
    "title": "",
    "section": "1.69 2022-10-18",
    "text": "1.69 2022-10-18\n\nChange suggest.maxCompleteItemCount default to 256."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-69",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-69",
    "title": "",
    "section": "1.70 2022-10-17",
    "text": "1.70 2022-10-17\n\nSet g:coc_service_initialized to 0 before service restart.\nShow warning when diagnostic jump failed.\nUse strwidth.wasm module for string display width.\nAdd API workspace.getDisplayWidth."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-70",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-70",
    "title": "",
    "section": "1.71 2022-10-15",
    "text": "1.71 2022-10-15\n\nAdd configuration inlayHint.display."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-71",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-71",
    "title": "",
    "section": "1.72 2022-10-07",
    "text": "1.72 2022-10-07\n\nUse CocFloatActive for highlight active parameters."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-72",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-72",
    "title": "",
    "section": "1.73 2022-09-28",
    "text": "1.73 2022-09-28\n\nLimit popupmenu width when exceed screen to &pumwidth, instead of change completion column.\nMake escape of ${name} for ultisnip snippets the same behavior as Ultisnip.vim."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-73",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-73",
    "title": "",
    "section": "1.74 2022-09-27",
    "text": "1.74 2022-09-27\n\nUse fuzzy.wasm for native fuzzy match.\nAdd binarySearch and isFalsyOrEmpty functions for array.\nsuggest.localityBonus works like VSCode, using selection ranges.\nAdd and export workspace.computeWordRanges.\nRework keywords parse for better performance (parse changed lines only and use yield to reduce iteration)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-74",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-74",
    "title": "",
    "section": "1.75 2022-09-12",
    "text": "1.75 2022-09-12\n\nAll configurations are now scoped #4185\nNo onDidChangeConfiguration event fired when workspace folder changed.\nDeprecated configuration suggest.detailMaxLength, use suggest.labelMaxLength instead.\nDeprecated configuration inlayHint.filetypes, use inlayHint.enable with scoped languages instead.\nDeprecated configuration semanticTokens.filetypes, use semanticTokens.enable with scoped languages instead.\nUse workspaceFolderValue instead of workspaceValue for ConfigurationInspect returned by WorkspaceConfiguration.inspect()."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-75",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-75",
    "title": "",
    "section": "1.76 2022-09-04",
    "text": "1.76 2022-09-04\n\nAdd configuration “snippet.choicesMenuPicker”."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-76",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-76",
    "title": "",
    "section": "1.77 2022-09-03",
    "text": "1.77 2022-09-03\n\nSend “WinClosed” event to node client.\nAdd onDidFilterStateChange and onDidCursorMoved to TreeView.\nSupport autoPreview for outline."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-77",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-77",
    "title": "",
    "section": "1.78 2022-09-02",
    "text": "1.78 2022-09-02\n\nSupport diagnostic.virtualTextFormat.\nAdd command workspace.writeHeapSnapshot."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-78",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-78",
    "title": "",
    "section": "1.79 2022-09-01",
    "text": "1.79 2022-09-01\n\nAdd configuration “suggest.asciiMatch”\nSupport b:coc_force_attach."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-79",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-79",
    "title": "",
    "section": "1.80 2022-08-31",
    "text": "1.80 2022-08-31\n\nAdd configuration “suggest.reversePumAboveCursor”.\nUse DiagnosticSign* highlight groups when possible.\nUse DiagnosticUnderline* highlight groups when possible."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-80",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-80",
    "title": "",
    "section": "1.81 2022-08-30",
    "text": "1.81 2022-08-30\n\nExport LineBuilder class."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-81",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-81",
    "title": "",
    "section": "1.82 2022-08-29",
    "text": "1.82 2022-08-29\n\nFix semanticTokens highlights unexpected cleared\nFix range of doQuickfix action.\nCheck reverse of CocFloating, use border and Normal highlight when reversed.\nMake CocInlayHint use background of SignColumn.\nAdd command document.toggleInlayHint."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-82",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-82",
    "title": "",
    "section": "1.83 2022-08-28",
    "text": "1.83 2022-08-28\n\nMake CocMenuSel use background of PmenuSel.\nSnippet related configuration changed (old configuration still works until next release)\n\n“coc.preferences.snippetStatusText” -&gt; “snippet.statusText”\n“coc.preferences.snippetHighlight” -&gt; “snippet.highlight”\n“coc.preferences.nextPlaceholderOnDelete” -&gt; “snippet.nextPlaceholderOnDelete”\n\nAdd configuration \"list.smartCase\"\nAdd configurations for inlay hint\n\n“inlayHint.refreshOnInsertMode”\n“inlayHint.enableParameter”\n“inlayHint.typeSeparator”\n“inlayHint.parameterSeparator”\n“inlayHint.subSeparator”"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-83",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-83",
    "title": "",
    "section": "1.84 2022-08-27",
    "text": "1.84 2022-08-27\n\nAvoid use EasyMotion#is_active, use autocmd to disable linting.\nShow message when call hierarchy provider not found or bad position."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-84",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-84",
    "title": "",
    "section": "1.85 2022-08-26",
    "text": "1.85 2022-08-26\n\nRemove completeOpt from workspace.env.\nAdd configuration \"diagnostic.virtualTextAlign\".\nAdd warning when required features not compiled with vim.\nNot echo error for semanticTokens request (log only).\nMerge results form providers when possible."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-85",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-85",
    "title": "",
    "section": "1.86 2022-08-24",
    "text": "1.86 2022-08-24\n\nVirtual text of suggest on vim9.\nVirtual text of diagnostics on vim9.\nAdd configuration inlayHint.filetypes.\nInlay hint support on vim9."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-86",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-86",
    "title": "",
    "section": "1.87 2022-08-23",
    "text": "1.87 2022-08-23\n\nRetry semanticTokens request on server cancel (LSP 3.17).\nRelativePattern support for workspace.createFileSystemWatcher().\nrelativePatternSupport for DidChangeWatchedFiles (LSP 3.17).\nNot echo error on doComplete()."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-87",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-87",
    "title": "",
    "section": "1.88 2022-08-21",
    "text": "1.88 2022-08-21\n\nAdded window.createFloatFactory(), deprecated FloatFactory class.\nSupport labelDetails field of CompleteItem(LSP 3.17).\nAdded triggerKind to CodeActionContext, export CodeActionTriggerKind."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-88",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-88",
    "title": "",
    "section": "1.89 2022-08-20",
    "text": "1.89 2022-08-20\n\nSupport pull diagnostics :h coc-pullDiagnostics.\nBreak change: avoid extension overwrite builtin configuration defaults.\nChange default value of configuration “diagnostic.format”.\n‘line’ changes to ‘currline’ for CocAction('codeAction').\nCheck NodeJS version on syntax error."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-89",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-89",
    "title": "",
    "section": "1.90 2022-08-10",
    "text": "1.90 2022-08-10\n\nChange “notification.highlightGroup” default to “Normal”."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-90",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-90",
    "title": "",
    "section": "1.91 2022-08-07",
    "text": "1.91 2022-08-07\n\nAdd configuration ‘suggest.pumFloatConfig’."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-91",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-91",
    "title": "",
    "section": "1.92 2022-08-04",
    "text": "1.92 2022-08-04\n\nMake diagnostic float window with the same background as CocFloating."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-92",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-92",
    "title": "",
    "section": "1.93 2022-08-03",
    "text": "1.93 2022-08-03\n\nAdd highlight group ‘CocFloatingDividingLine’."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-93",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-93",
    "title": "",
    "section": "1.94 2022-08-01",
    "text": "1.94 2022-08-01\n\nUse custom popup menu, #3862.\nUse “first” instead of “none” for configuration suggest.selection.\nMake “first” default for suggest.selection, like VSCode.\nAdd default blue color for hlgroup CocMenuSel."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-94",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-94",
    "title": "",
    "section": "1.95 2022-06-14",
    "text": "1.95 2022-06-14\n\nAdd highlight groups CocListLine and CocListSearch."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-95",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-95",
    "title": "",
    "section": "1.96 2022-06-11",
    "text": "1.96 2022-06-11\n\nAdd configuration “notification.disabledProgressSources”\nAdd “rounded” property to “floatConfig”"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-96",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-96",
    "title": "",
    "section": "1.97 2022-06-04",
    "text": "1.97 2022-06-04\n\nAdd configuration workspace.openOutputCommand.\nLog channel message of vim when g:node_client_debug enabled."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-97",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-97",
    "title": "",
    "section": "1.98 2022-05-30",
    "text": "1.98 2022-05-30\n\nDisable progressOnInitialization for language client by default."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-98",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-98",
    "title": "",
    "section": "1.99 2022-05-28",
    "text": "1.99 2022-05-28\n\nSupport repeat#set for commands that make changes only."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-99",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-99",
    "title": "",
    "section": "1.100 2022-05-24",
    "text": "1.100 2022-05-24\n\nAdd transition and annotation support for workspace.applyEdits().\nAdd command workspace.undo and workspace.redo.\nRemove configuration coc.preferences.promptWorkspaceEdit.\nRemove command CocAction and CocFix."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-100",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-100",
    "title": "",
    "section": "1.101 2022-05-22",
    "text": "1.101 2022-05-22\n\nCheck for previous position when not able to find completion match.\nAdd content support to window.showMenuPicker()"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-101",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-101",
    "title": "",
    "section": "1.102 2022-05-17",
    "text": "1.102 2022-05-17\n\nAdd QuickPick module.\nAdd API window.showQuickPick() and window.createQuickPick()."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-102",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-102",
    "title": "",
    "section": "1.103 2022-05-16",
    "text": "1.103 2022-05-16\n\nAdd properties title, loading & borderhighlight to InputBox"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-103",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-103",
    "title": "",
    "section": "1.104 2022-05-14",
    "text": "1.104 2022-05-14\n\nAdd InputOption support to window.requestInput\nAdd API window.createInputBox()."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-104",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-104",
    "title": "",
    "section": "1.105 2022-05-13",
    "text": "1.105 2022-05-13\n\nNotification support like VSCode https://github.com/neoclide/coc.nvim/discussions/3813\nAdd configuration notification.minProgressWidth\nAdd configuration notification.preferMenuPicker\nSupport source in notification windows."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-105",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-105",
    "title": "",
    "section": "1.106 2022-05-07",
    "text": "1.106 2022-05-07\n\nShow sort method as description in outline view.\nAdd configuration outline.switchSortKey, default to &lt;C-s&gt;.\nAdd configuration outline.detailAsDescription, default to true.\nAdd variable g:coc_max_treeview_width.\nAdd position: 'center' support to window.showMenuPicker()"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-106",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-106",
    "title": "",
    "section": "1.107 2022-05-06",
    "text": "1.107 2022-05-06\n\nUse menu for window.showQuickpick().\nAdd configuration outline.autoWidth, default to true."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-107",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-107",
    "title": "",
    "section": "1.108 2022-05-05",
    "text": "1.108 2022-05-05\n\nAdd key bindings to dialog (created by window.showDialog()) on neovim."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-108",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-108",
    "title": "",
    "section": "1.109 2022-05-04",
    "text": "1.109 2022-05-04\n\nAdd languages.registerInlayHintsProvider() for inlay hint support."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-109",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-109",
    "title": "",
    "section": "1.110 2022-04-25",
    "text": "1.110 2022-04-25\n\nAdd LinkedEditing support"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-110",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-110",
    "title": "",
    "section": "1.111 2022-04-23",
    "text": "1.111 2022-04-23\n\nAdd WinScrolled event to events."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-111",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-111",
    "title": "",
    "section": "1.112 2022-04-20",
    "text": "1.112 2022-04-20\n\nSelect recent item when input is empty and selection is recentUsedByPrefix.\nAdd coc#snippet#prev() and coc#snippet#next().\nAdd command document.checkBuffer.\nAdd region param to window.diffHighlights()."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-112",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-112",
    "title": "",
    "section": "1.113 2022-04-06",
    "text": "1.113 2022-04-06\n\nworkspace.onDidOpenTextDocument fire contentChanges as empty array when document changed with same lines."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-113",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-113",
    "title": "",
    "section": "1.114 2022-04-04",
    "text": "1.114 2022-04-04\n\nAvoid CompleteDone cancel next completion.\nAvoid indent change on &lt;C-n&gt; and &lt;C-p&gt; during completion.\nSupport joinUndo and move with document.applyEdits()."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-114",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-114",
    "title": "",
    "section": "1.115 2022-04-02",
    "text": "1.115 2022-04-02\n\nChange suggest.triggerCompletionWait default to 0.\nNot trigger completion on TextChangedP.\nRemove configuration suggest.echodocSupport.\nFix complettion triggered after &lt;C-e&gt;."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-115",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-115",
    "title": "",
    "section": "1.116 2022-03-31",
    "text": "1.116 2022-03-31\n\nCheck buffer rename on write."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-116",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-116",
    "title": "",
    "section": "1.117 2022-03-30",
    "text": "1.117 2022-03-30\n\nImprove words parse performance.\nRemove configurations coc.source.around.firstMatch and coc.source.buffer.firstMatch.\nFix coc.source.buffer.ignoreGitignore not works\nCheck document reload on detach."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-117",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-117",
    "title": "",
    "section": "1.118 2022-03-29",
    "text": "1.118 2022-03-29\n\nAdd menu actions to refactor buffer."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-118",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-118",
    "title": "",
    "section": "1.119 2022-03-12",
    "text": "1.119 2022-03-12\n\nAvoid use &lt;sapce&gt;&lt;bs&gt; for cancel completion."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-119",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-119",
    "title": "",
    "section": "1.120 2022-03-05",
    "text": "1.120 2022-03-05\n\nMake WinClosed event fires on CursorHold to support vim8.\nAdd events TabNew and TabClose.\nMake outline reuse TreeView buffer."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-120",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-120",
    "title": "",
    "section": "1.121 2022-03-02",
    "text": "1.121 2022-03-02\n\nAdd ultisnip option to snippetManager.insertSnippet() and snippetManager.resolveSnippet().\nSupport ultisnip regex option: /a (ascii option).\nSupport transform replacement of ultisnip, including:\n\nVariable placeholders, $0, $1 etc.\nEscape sequence \\u \\l \\U \\L \\E \\n \\t\nConditional replacement: (?no:text:other text)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-121",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-121",
    "title": "",
    "section": "1.122 2022-02-28",
    "text": "1.122 2022-02-28\n\nChange workspace.ignoredFiletypes default value to []"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-122",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-122",
    "title": "",
    "section": "1.123 2022-02-24",
    "text": "1.123 2022-02-24\n\nAdd window.activeTextEditor, window.visibleTextEditors.\nAdd events window.onDidChangeActiveTextEditor window.onDidChangeVisibleTextEditors.\nAdd class RelativePattern.\nAdd workspace.findFiles()."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-123",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-123",
    "title": "",
    "section": "1.124 2022-02-23",
    "text": "1.124 2022-02-23\n\nAdd workspace.openTextDocument()\nAdd Workspace.getRelativePath().\nAdd window.terminals window.onDidOpenTerminal window.onDidCloseTerminal and window.createTerminal.\nAdd exitStatus property to Terminal.\nSupport strictEnv in TerminalOptions on neovim.\nDeprecated warning for workspace.createTerminal(), workspace.onDidOpenTerminal and workspace.onDidCloseTerminal"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-124",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-124",
    "title": "",
    "section": "1.125 2022-02-18",
    "text": "1.125 2022-02-18\n\nClear all highlights created by coc.nvim before restart.\nSupport strike through for ansiparse.\nSupport highlights for Documentation in float window."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-125",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-125",
    "title": "",
    "section": "1.126 2022-02-17",
    "text": "1.126 2022-02-17\n\nChange workspace configuration throw error when workspace folder can’t be resolved.\nRemove configuration diagnostic.highlightOffset."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-126",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-126",
    "title": "",
    "section": "1.127 2022-02-15",
    "text": "1.127 2022-02-15\n\nAdd events.race.\nChange default suggest.triggerCompletionWait to 50.\nSupport trigger completion after indent fix."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-127",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-127",
    "title": "",
    "section": "1.128 2022-02-14",
    "text": "1.128 2022-02-14\n\nAdd pumvisible property to events."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-128",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-128",
    "title": "",
    "section": "1.129 2022-02-10",
    "text": "1.129 2022-02-10\n\nAdd shortcut support for window.showMenuPicker().\nAdd configuration dialog.shortcutHighlight for shortcut highlight.\nAdd configuration list.menuAction for choose action by menu picker."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-129",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-129",
    "title": "",
    "section": "1.130 2022-02-09",
    "text": "1.130 2022-02-09\n\nAdd error log to nvim_error_event.\nAdd nvim.lua() which replace nvim.executeLua() to typings.d.ts."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-130",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-130",
    "title": "",
    "section": "1.131 2022-02-08",
    "text": "1.131 2022-02-08\n\nSupport MenuItem with disabled property for window.showMenuPicker\nSupport show disabled code actions in menu picker."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-131",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-131",
    "title": "",
    "section": "1.132 2022-02-07",
    "text": "1.132 2022-02-07\n\nChange :CocLocalConfig to open configuration file of current workspace folder."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-132",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-132",
    "title": "",
    "section": "1.133 2022-02-05",
    "text": "1.133 2022-02-05\n\nSupport version from textDocument/publishDiagnostics notification’s parameter.\nSupport codeDescription of diagnostics by add href to float window.\nSupport showDocument request from language server.\nSupport label from DocumentSymbolOptions in outline tree.\nSupport extra url use regexp under cursor with openLink action.\nSupport activeParameter from signature information.\nAdd trimTrailingWhitespace, insertFinalNewline and trimFinalNewlines to FormattingOptions.\nAdd configuration links.tooltip, default to false."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-133",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-133",
    "title": "",
    "section": "1.134 2022-02-04",
    "text": "1.134 2022-02-04\n\nAdd --reverse option to list.\nAdd &lt;esc&gt; key-mapping to cancel list in preview window (neovim only)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-134",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-134",
    "title": "",
    "section": "1.135 2022-02-02",
    "text": "1.135 2022-02-02\n\nRemove disableWorkspaceFolders disableDiagnostics and disableCompletion from language client option.\nAdd configuration documentHighlight.timeout.\nAdd tabPersist option to ListAction.\nAdd refactor to LocationList"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-135",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-135",
    "title": "",
    "section": "1.136 2022-01-30",
    "text": "1.136 2022-01-30\n\nAdd configuration diagnostics.virtualTextLevel.\nRemove configuration suggest.numberSelect"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-136",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-136",
    "title": "",
    "section": "1.137 2022-01-26",
    "text": "1.137 2022-01-26\n\nUse nvim_buf_set_text when possible to keep extmarks."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-137",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-137",
    "title": "",
    "section": "1.138 2022-01-25",
    "text": "1.138 2022-01-25\n\nNot trigger completion when filtered is succeed.\nMove methods workspace.getSelectedRange workspace.selectRange to window module, show deprecated warning when using old methods."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-138",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-138",
    "title": "",
    "section": "1.139 2022-01-23",
    "text": "1.139 2022-01-23\n\nSupport semantic tokens highlights from range provider."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-139",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-139",
    "title": "",
    "section": "1.140 2022-01-22",
    "text": "1.140 2022-01-22\n\nNot set gravity with api nvim_buf_set_extmark because highlight bug, wait neovim fix.\nSupport watch later created workspace folders for file events."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-140",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-140",
    "title": "",
    "section": "1.141 2022-01-21",
    "text": "1.141 2022-01-21\n\nChanged semantic token highlight prefix from CocSem_ to CocSem.\nChanged semantic token highlight disabled by default, use configuration semanticTokens.filetypes\nAdd configuration semanticTokens.filetypes.\nAdd configuration semanticTokens.highlightPriority.\nAdd configuration semanticTokens.incrementTypes.\nAdd configuration semanticTokens.combinedModifiers.\nAdd configuration workspace.ignoredFolders.\nAdd configuration workspace.workspaceFolderFallbackCwd.\nAdd command semanticTokens.refreshCurrent.\nAdd command semanticTokens.inspect.\nAdd action inspectSemanticToken.\nRework command semanticTokens.checkCurrent to show highlight information.\nSupport semantic tokens highlight group composed with type and modifier."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-141",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-141",
    "title": "",
    "section": "1.142 2022-01-20",
    "text": "1.142 2022-01-20\n\nRemove deprecated method workspace.resolveRootFolder."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-142",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-142",
    "title": "",
    "section": "1.143 2022-01-17",
    "text": "1.143 2022-01-17\n\nExtend buffer.updateHighlights to support priority, combine, start_incl and end_incl.\nAdd configuration diagnostic.highlightPriority.\nAdd configuration colors.filetypes and colors.highlightPriority."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-143",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-143",
    "title": "",
    "section": "1.144 2022-01-16",
    "text": "1.144 2022-01-16\n\nAdd configuration codeLens.position."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-144",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-144",
    "title": "",
    "section": "1.145 2022-01-14",
    "text": "1.145 2022-01-14\n\nAdd configuration suggest.selection."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-145",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-145",
    "title": "",
    "section": "1.146 2022-01-13",
    "text": "1.146 2022-01-13\n\ncodeLens.separator now defaults to \"\" and will be placed above lines on neovim &gt;= 0.6.0 .\nAdd configurations ‘diagnostic.locationlistLevel’, ‘diagnostic.signLevel’, ‘diagnostic.messageLevel’."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-146",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-146",
    "title": "",
    "section": "1.147 2022-01-12",
    "text": "1.147 2022-01-12\n\nAdd document.lineAt(), export TextLine class.\nUpgrade node-client, support nvim.exec().\nAdd documentHighlight.priority configuration."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-147",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-147",
    "title": "",
    "section": "1.148 2019-08-18 0.0.74",
    "text": "1.148 2019-08-18 0.0.74\n\nfeat(cursors): support multiple cursors.\nfeat(extensions): install missing extensions by CocInstall.\nfeat(extensions): add command extensions.forceUpdateAll.\nfeat(completion): rework preselect feature.\nfeat(extension): use request for fetch package info.\nfeat(language-client): support disableDynamicRegister configuration.\nfeat(list): paste from vim register support on insert mode #1088.\nfeat(plugin): add CocHasProvider(), close #1087.\nrefactor(outline): not exclude variables and callback.\nrefactor(diagnostic): remove timeout on InsertLeave."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-148",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-148",
    "title": "",
    "section": "1.149 2019-07-11 0.0.73",
    "text": "1.149 2019-07-11 0.0.73\n\nfix(completion): fix map of number select\nfix(languages): fix cursor position with snippet\nfix(completion): fix cursor position with additionalTextEdits\nfix(position): fix rangeOverlap check #961\nfix(list): not change guicursor when it’s empty\nfix(list): fix filter not work on loading\nfix(list): fix custom location list command not work\nfix(util): highlight & render on vim8\nfix(handler): fix getCommands\nfix(handler): not check lastInsert on trigger signatureHelp\nfix(handler): fix check of signature help trigger\nfix(language-client): configuration for configured server, closes #930\nfix(diagnostic): clear diagnostics on filetype change\nfeat(plugin): add download & fetch modules\nfeat(plugin): add highligher module\nfeat(refactor): add &lt;Plug&gt;(coc-refactor) for refactor window\nfeat(extension): use mv module for folder rename\nfeat(extension): support install tagged extension\nfeat(extension): support custom extension root g:coc_extension_root\nfeat(handler): close signature float window on ‘)’\nfeat(list): support g:coc_quickfix_open_command\nfeat(list): add eval action\nfeat(list): add –tab list option\nfeat(list): use highligher module for showHelp\nfeat(terminal): add noa on window jump\nfeat(terminal): support vim8\nfeat(diagnostic): add diagnosticRelated support\nfeat(diagnostic): use text properties on vim8\nfeat(handler): improve signature float window"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-149",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-149",
    "title": "",
    "section": "1.150 2019-07-01",
    "text": "1.150 2019-07-01\n\nfeat(plugin): add CocStatusChange autocmd\nfeat(extension): support both npm and yarn.\nfeat(plugin): work on vim 8.0\nfeat(extensions): add lock & doc actions to extension source\nfeat(extension): add proxy auth support (#920)\nfeat(source): not change startcol for file source\nfeat(completion): no numberSelect for number input\nfeat(extensions): Use yarn when npm not found\nfeat(completion): no popup for command line buffer\nfeat(plugin): support only for codeActions action\nfeat(task): debounce stdout\nfeat(plugin): add keymaps for selection ranges\nfeat(plugin): add function textobj\nfeat(list): restore window height, closes #905\nfeat(handler): support signature.floatTimeout\nfeat(configuration): support change of workspace configuration\nfeat(diagnostic): add keymaps for jump error diagnostics\nfeat(plugin): delay start on gvim, fix #659"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-150",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-150",
    "title": "",
    "section": "1.151 2019-06-15",
    "text": "1.151 2019-06-15\n\nfeat(plugin): add popup support of vim\nrefactor(completion): improve float support\nrefactor(floating): remove unused code\nrefactor(workspace): replace find-up\nrefactor(handler): improve message for fold method\nfix(virtualtext): invalid highlight tag (#874)\nfix(snippets): fix plaintext check\nfix(highlight): catch error of child_process.spawn\nfix(highlight): use v:progpath, fix #871\nfix(floatFactory): escape feedkeys\nfix(handler): fix getCurrentFunctionSymbol not work"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-151",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-151",
    "title": "",
    "section": "1.152 2019-06-12",
    "text": "1.152 2019-06-12\n\nfeat(document): add getVar method\nfix(util): not break selection on message\nfix(workspace): fix jumpTo not work on vim8\nfix(completion): trigger completion with word character\nrefactor(handler): return boolean result\nperf(workspace): improve jump performance\nfix(util): Escape filename for jump (#862)\nrefactor(plugin): not show empty hover\nfeat(outline): ignore callback function\nfeat(workspace): support list of events with registerAutocmd\nfix(workspace): fix jump with tab drop\nrefactor(language-client): change API of selectionRanges"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-152",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-152",
    "title": "",
    "section": "1.153 2019-06-09",
    "text": "1.153 2019-06-09\n\nBreak change CocHighlightText link to CursorColumn by default.\nBreak change logger folder changed to $XDG_RUNTIME_DIR when exists.\nAdd &lt;PageUp&gt; and &lt;PageDown&gt; support for list, #825.\nAdd function coc#add_command().\nAdd disableDiagnostics & disableCompletion to languageclient configuration.\nAdd signature.triggerSignatureWait configuration.\nAdd vim-repeat support for run command and quickfix.\nAdd preferred codeAction support.\nAdd prompt.paste action to list.\nAdd title as argument support for codeAction action.\nAdd suggest.floatEnable configuration.\nAdd editor.action.organizeImport command.\nAdd :CocAction and :CocFix commands.\nAdd codeActions action.\nFix issues with list."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-153",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-153",
    "title": "",
    "section": "1.154 2019-05-30",
    "text": "1.154 2019-05-30\n\nBreak change logger folder changed.\nAdd support of vim-repeat for &lt;Plug&gt; keymaps.\nAdd CocRegistNotification() function.\nAdd argument to rename action.\nAdd suggest.disableMenuShortcut configuration.\nAdd glob support for root patterns.\nAdd &lt;esc&gt; keymap to list window.\nAdd shortcut in sources list.\nAdd list.previewSplitRight configuration.\nAdd triggerOnly property to source.\nAdd warning for duplicate extension.\nBug fixes."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-154",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-154",
    "title": "",
    "section": "1.155 2019-05-07",
    "text": "1.155 2019-05-07\n\nNew feature load extensions from coc-extensions folder.\nAdd workspace.renameCurrentFile command.\nAdd FloatBuffer, FloatFactory and URI to exports.\nAdd resolveItem support to list.\nFix prompt can’t work when execute list action.\nFix ansiparser for empty color ranges.\nFix highlight only work with first 8 items."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-155",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-155",
    "title": "",
    "section": "1.156 2019-04-27",
    "text": "1.156 2019-04-27\n\nBreak change vim-node-rpc not required on vim.\nBreak change python not required on vim.\nBreak change complete items would refreshed after 500ms when not finished.\nAdd additionalSchemes for configured language server.\nAdd support for jumpCommand as false.\nFix diagnostic.level not work."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-156",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-156",
    "title": "",
    "section": "1.157 2019-04-09",
    "text": "1.157 2019-04-09\n\nBreak change --strictMatch option of list renamed to --strict\nBreak change suggest.reloadPumOnInsertChar support removed.\nBreak change no more binary release.\nBreak change logic for resolve workspace folder changed.\nAdd Task module.\nAdd getCurrentFunctionSymbol action.\nAdd list.source.outline.ctagsFiletypes setting.\nAdd suggest.disableMenu and suggest.disableMenu settings.\nAdd equal support for complete items.\nAdd support for do action with visual select lines of list.\nAdd expand tilder support for language server command.\nAdd switch matcher support to list.\nAdd select all support to list.\nAdd quickfix action to list.\nAdd selectionRanges of LSP.\nAdd load extensions for &rtp support.\nAdd coc#on_enter() for formatOnType and add new lines on enter.\nImprove completion by support trigger completion when pumvisible.\nRemove document check on BufWritePre."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-157",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-157",
    "title": "",
    "section": "1.158 2019-03-31",
    "text": "1.158 2019-03-31\n\nBreak change not using vim-node-rpc from npm modules any more.\nBreak change rename &lt;Plug&gt;_ to &lt;Plug&gt;CocRefresh.\nFix wrong format options send to server.\nFix throw error when extension root not created.\nFix MarkedString not considered as markdown.\nFix echo message on vim exit.\nFix error throw on file watch.\nFix unexpected update of user configuration."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-158",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-158",
    "title": "",
    "section": "1.159 2019-03-28",
    "text": "1.159 2019-03-28\n\nAdd workspace.resolveRootFolder.\nAdd diagnostic.joinMessageLines setting.\nAdd suggest.completionItemKindLabels setting.\nAdd memento support for extension.\nAdd workspace.getSelectedRange.\nAdd Terminal module.\nAdd command workbench.action.reloadWindow.\nFix extension not activated by command.\nFix broken undo with floating window.\nFix document create possible wrong uri & filetype.\nImprove highlight with floating window."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-159",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-159",
    "title": "",
    "section": "1.160 2019-03-24",
    "text": "1.160 2019-03-24\n\nBreak change make number input not trigger completion.\nBreak change make none keywords character doesn’t filter completion.\nAdd functions for check snippet state.\nAdd setting diagnostic.checkCurrentLine.\nFix signature.target not work.\nFix flick of signature window.\nFix EPIPE error of node-client.\nFix wrong root of FileWatchSysmtem."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-160",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-160",
    "title": "",
    "section": "1.161 2019-03-19",
    "text": "1.161 2019-03-19\n\nBreak change signature settings now starts signature.\nBreak change default request timeout changed to 5s.\nBreak change commands.executeCommand return promise.\nAdd coc.preferences.signatureHelpTarget.\nAdd diagnostic.maxWindowHeight & signature.maxWindowHeight.\nAdd diagnostic.enableSign.\nAdd support for $COC_NO_PLUGINS.\nAdd keymaps: &lt;Plug&gt;(coc-float-hide) and &lt;Plug&gt;(coc-float-jump).\nAdd coc.preferences.enableFloatHighlight.\nFix issues with floating window.\nFix critical performance issue on diff text.\nImprove color of CocHighlightText.\nImprove sort of complete items.\nImprove extension list with version and open action."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-161",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-161",
    "title": "",
    "section": "1.162 2019-03-16",
    "text": "1.162 2019-03-16\n\nBreak change change vim config home on windows to ‘$HOME/vimfiles’.\nAdd highlights to float windows.\nAdd CocLocationsAsync().\nAdd support for b:coc_suggest_disable.\nAdd support for b:coc_suggest_blacklist.\nAdd setting diagnostic.messageTarget.\nAdd floating window support for signatures.\nFix issues with diagnostic float.\nFix info of completion item not shown.\nFix CocUpdateSync not work without service start.\nFix wrong indent spaces of snippets."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-162",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-162",
    "title": "",
    "section": "1.163 2019-03-11",
    "text": "1.163 2019-03-11\n\nBreak change change buffers instead of disk file for workspace.applyEdits.\nBreak change add config errors to diagnostic list instead of jump locations.\nBreak change hack for popup menu flicker is removed, use suggest.reloadPumOnInsertChar to enable it.\nBreak change use nvim_select_popupmenu_item for number select completion.\nAdd floating window for completion items.\nAdd floating window support for diagnostics.\nAdd floating window support for hover documentation.\nAdd coc#on_enter() for notify enter pressed.\nAdd setting coc.preferences.useQuickfixForLocations.\nAdd support of g:coc_watch_extensions for automatic reload extensions.\nAdd command: editor.action.doCodeAction.\nFix service on restarted on windows after rebuild.\nFix config of airline.\nFix relative path of watchman.\nImprove Mru model."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-163",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-163",
    "title": "",
    "section": "1.164 2019-03-03",
    "text": "1.164 2019-03-03\n\nBreak change signature change of workspace.registerKeymap.\nBreak change &lt;esc&gt; of CocList can’t be remapped any more.\nBreak change use yarnpkg command instead of yarn when possible.\nBreak change noinsert is removed from completeopt when noselect is enabled, &lt;CR&gt; would break line by default.\nAdd setting diagnostic.refreshAfterSave.\nAdd chinese documentation.\nAdd support of multiple line placeholder.\nFix edit of nested snippet placeholders.\nFix possible infinite create of documents.\nFix check for resume completion."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-164",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-164",
    "title": "",
    "section": "1.165 2019-02-25",
    "text": "1.165 2019-02-25\n\nBreak change default of suggest.detailMaxLength changed to 100.\nBreak change option of workspace.registerKeymap changed.\nAdd settings: suggest.detailField.\nAdd check for autocmd in health check.\nAdd trigger patterns support for complete sources.\nAdd support of coc-snippets-expand-jump\nAdd source option for completion start.\nAdd sources.createSource method."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-165",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-165",
    "title": "",
    "section": "1.166 2019-02-22",
    "text": "1.166 2019-02-22\n\nBreak change some configurations have been renamed, checkout #462.\nBreak change no longer automatic trigger for CursorHoldI #452.\nBreak change add preview option of completeopt according to suggest.enablePreview.\nAdd statusItem for CocUpdate.\nAdd -sync option for :CocInstall\nAdd support for floating preview window.\nAdd more module export.\nFix check of vim-node-rpc throw error.\nFix wrong line for TextEdit of complete item.\nFix diagnostics not cleared on service restart."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-166",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-166",
    "title": "",
    "section": "1.167 2019-02-17",
    "text": "1.167 2019-02-17\n\nBreak change completion resolve requires CompleteChanged autocmd.\nBreak change mapping of space on insert mode of list removed.\nBreak change kind of completion item use single letter.\nFix snippet not works on GUI vim.\nFix cursor vanish on vim by use timer hacks.\nFix behavior of list preview window.\nFix python check on vim.\nFix CocJumpPlaceholder not fired.\nFix vscode-open command not work."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-167",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-167",
    "title": "",
    "section": "1.168 2019-02-12",
    "text": "1.168 2019-02-12\n\nBreak change function coc#util#clearmatches signature changed.\nAdd check for python gtk module.\nAdd check for vim-node-rpc update error.\nFix source name of diagnostics.\nFix empty buffers created on preview.\nFix trigger of CursorHoldI."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-168",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-168",
    "title": "",
    "section": "1.169 2019-02-11",
    "text": "1.169 2019-02-11\n\nBreak change: internal filetype of settings file changed to jsonc.\nBreak change: coc#util#install changed to synchronize by default.\nBreak change: no document highlight would be added for colored symbol.\nBreak change: remove coc.preferences.openResourceCommand.\nAdd fallback rename implementation which rename symbols on current buffer.\nAdd command :CocUpdateSync.\nAdd coc.preferences.detailMaxLength for slice detail on completion menu.\nAdd cancel support for completion.\nAdd ctags as fallback of document symbols list.\nAdd default key-mappings for location actions.\nAdd python check on vim.\nAdd disableSyntaxes support for completion sources.\nAdd support for change isProgress of StatusBarItem\nAdd check of coc.nvim version for CocUpdate\nAdd coc.preferences.previewAutoClose, default true.\nAdd workspace.add registerAutocmd.\nFix highlight not cleared on vim\nFix health check of service state.\nFix CursorHoldI not triggered on neovim.\nFix sort of list not stable."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-169",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-169",
    "title": "",
    "section": "1.170 2019-02-04",
    "text": "1.170 2019-02-04\n\nBreak change: no messages when documentSymbol and workspaceSymbol provider not found.\nAdd support for configure sign in statusline.\nAdd help action for list.\nFix parse error on extensions update.\nFix wrong uri on windows.\nFix cancel list without close ui.\nImprove startup time by remove jobwait."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-170",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-170",
    "title": "",
    "section": "1.171 2019-02-02",
    "text": "1.171 2019-02-02\n\nBreak change: extensions now update automatically, prompt is removed.\nAdd check for extension compatibility.\nAdd transform support for placeholder.\nAdd check for node version.\nAdd error check for list.\nAdd settings: coc.preferences.diagnostic.virtualTextLines.\nFix preview window not shown.\nFix highlight not cleared on vim.\nFix highlight commands of list block vim on start.\nImprove extension load.\nImprove list experience."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-171",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-171",
    "title": "",
    "section": "1.172 2019-01-28",
    "text": "1.172 2019-01-28\n\nBreak change: coc.preferences.diagnostic.echoMessage changed to enum.\nAdd mru support for commands and lists list.\nAdd coc.preferences.diagnostic.refreshOnInsertMode\nAdd Mru module.\nImprove highlight for lists, support empty filterLabel.\nFix findLocations not work with nest locations.\nFix cursor position after apply additionalTextEdits."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-172",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-172",
    "title": "",
    "section": "1.173 2019-01-24",
    "text": "1.173 2019-01-24\n\nBreak change: python code for denite support moved to separated repo.\nBreak change: Quickfix list no longer used.\nAdd list support.\nAdd configuration: coc.preferences.diagnostic.virtualText.\nAdd watch for &rtp change.\nAdd support for configure g:coc_user_config and g:coc_global_extensions\nAdd support for send request to coc on vim start.\nAdd g:coc_start_at_startup support.\nAdd configuration: coc.preferences.invalidInsertCharacters.\nAdd configuration: coc.preferences.snippetStatusText.\nAdd coc#_insert_key() for insert keymap.\nAdd workspace.registerExprKeymap().\nAdd detect for vim-node-rpc abnormal exist.\nAdd requireRootPattern to languageserver configuration.\nFix git check, always generate keywords.\nFix crash when righleft set to 1 on neovim.\nFix snippet position could be wrong."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-173",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-173",
    "title": "",
    "section": "1.174 2019-01-09",
    "text": "1.174 2019-01-09\n\nBreak change: throw error when languageserver id is invalid.\nAdd watcher for languageserver configuration change.\nFix possible invalid package.json.\nFix applyEdits not work sometimes.\nFix server still started when command search failed.\nFix log file not writeable.\nImprove completion performance."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-174",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-174",
    "title": "",
    "section": "1.175 2019-01-03",
    "text": "1.175 2019-01-03\n\nBreak change: using of g:rooter_patterns is removed.\nBreak change: diagnostics would be updated in insert mode now.\nAdd configuration: coc.preferences.rootPatterns\nAdd TM_SELECTED_TEXT and CLIPBOARD support for snippets.\nFix check of latest insert char failed.\nFix highlight not cleared sometimes."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-175",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-175",
    "title": "",
    "section": "1.176 2019-01-01",
    "text": "1.176 2019-01-01\n\nFix issues with completion."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-176",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-176",
    "title": "",
    "section": "1.177 2018-12-31",
    "text": "1.177 2018-12-31\n\nBreak change: created keymaps use rpcrequest instead of rpcnotify.\nBreak change: snippets provider is removed, use coc-snippets for extension snippets.\nAdd command: coc.action.insertSnippet\nFix position of snippets.\nFix modifier of registered keymaps.\nFix completion triggered on complete done.\nFix closure function possible conflict.\nFix unexpected snippet cancel.\nFix document applyEdits, always use current lines.\nFix fail of yarn global command.\nFix check of changedtick on completion done.\nFix line used for textEdit of completion.\nFix snippet canceled by formatOnType.\nFix CocJumpPlaceholder not fired\nOptimize content synchronize."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-177",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-177",
    "title": "",
    "section": "1.178 2018-12-27",
    "text": "1.178 2018-12-27\n\nBreak change: no more message on service ready.\nBreak change: vim source now registered as extension.\nBreak change: complete item sort have reworked.\nBreak change: request send to coc would throw when service not ready.\nAdd support for check current state on diagnostic update.\nAdd env opinion for registered command languageserver.\nAdd outputChannel for watchman.\nAdd coc#_select_confirm() for trigger select and confirm.\nAdd coc.preferences.numberSelect.\nAdd priority support for format provider.\nAdd workspace.watchGlobal and workspace.watchOption methods.\nFix cursor disappear on TextChangedP with vim.\nFix coc process not killed when update on windows.\nFix snippet broken on vim.\nFix support of startcol of completion result.\nFix labelOffsetSupport wrong position.\nFix flicking on neovim.\nFix unicide not considered as iskeyword.\nFix watchman client not initialized sometimes.\nImprove performance for parse iskeyword.\nNot echo message on vim exit.\nNot send empty configuration change to languageserver."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-178",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-178",
    "title": "",
    "section": "1.179 2018-12-20",
    "text": "1.179 2018-12-20\n\nBreak change configuration for module language server, transport now require specified value.\nBreak change new algorithm for socre complete items.\nAdd command workspace.clearWatchman.\nAdd quickfixs, doCodeAction and doQuickfix actions.\nAdd g:vim_node_rpc_args for debug purpose.\nAdd coc#add_extension() for specify extensions to install.\nFix clients not restarted on CocRestart.\nFix execArgv and runtime not work for node language server.\nFix detail of complete item not echoed sometimes.\nFix actions missing when registered with same clientId.\nFix issues with signature echo.\nFix uri is wrong with whitespace.\nImprove highlight performance with nvim_call_atomic."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-179",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-179",
    "title": "",
    "section": "1.180 2018-12-17",
    "text": "1.180 2018-12-17\n\nBreak change vim-node-rpc now upgrade in background.\nAdd ignoredRootPaths to languageserver option.\nAdd detect of vim running state.\nAdd client.vim for create clients.\nFix possible wrong current line of completeResolve.\nFix snippet not work with set virtualedit=all.\nFix default timeout to 2000.\nFix file mode of log file."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-180",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-180",
    "title": "",
    "section": "1.181 2018-12-12",
    "text": "1.181 2018-12-12\n\nBreak change fixInsertedWord fix inserted word which ends with word after.\nBreak change onCompleteSelect is removed.\nAdd workspace.registerKeymap for register keymap.\nAdd match score for sort complete items.\nFix possible connection lost.\nFix priority of diagnostic signs.\nFix possible wrong uri.\nFix RevealOutputChannelOn not default to never.\nFix possible wrong line used for textEdit of complete item.\nFix possible wrong cursor position of snippet after inserted."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-181",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-181",
    "title": "",
    "section": "1.182 2018-12-08",
    "text": "1.182 2018-12-08\n\nBreak change default rootPath would be directory of current file, not cwd.\nBreak change codeLens feature now disabled by default.\nBreak change diagnostic prev/next now loop diagnostics.\nAdd support of neovim highlight namespace.\nAdd support for undo additionalTextEdits on neovim\nFix configuration resolve could be wrong.\nFix word of completion item could be wrong.\nFix rootPath could be null.\nFix highlight not cleared on restart."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-182",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-182",
    "title": "",
    "section": "1.183 2018-12-06",
    "text": "1.183 2018-12-06\n\nBreak change RevealOutputChannelOn of language client default to never.\nFix can’t install on windows vim.\nFix displayByAle not clearing diagnostics.\nAdd check for vim-node-rpc update on vim.\nAdd Resolver module.\nImprove apply WorkspaceEdit, support 0 as document version and merge edits for same document."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-183",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-183",
    "title": "",
    "section": "1.184 2018-12-05",
    "text": "1.184 2018-12-05\n\nAdd CocJumpPlaceholder autocmd.\nAdd rootPatterns to languageserver config.\nAdd setting: coc.preferences.hoverTarget, support use echo.\nAdd setting coc.preferences.diagnostic.displayByAle for use ale to display errors.\nAdd setting coc.preferences.extensionUpdateCheck for control update check of extensions.\nAdd coc#config for set configuration in vim.\nFix rootPath not resolved on initialize.\nFix possible wrong tabSize by use shiftwidth option.\nFix trigger of documentColors request.\nFix vim-node-rpc service not work on windows vim.\nFix codeLens not works.\nFix highlight of signatureHelp.\nFix watchman watching same root multiple times.\nFix completion throw undefined error.\nFix open_terminal not works on vim.\nFix possible connection lost by use notification when possible.\nFix process not terminated when connection lost.\nRework diagnostics with task sequence.\nRework configuration with more tests."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-184",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-184",
    "title": "",
    "section": "1.185 2018-11-28",
    "text": "1.185 2018-11-28\n\nBreak change signature help reworked, vim API for echo signature changed.\nAdd :CocInfo command.\nAdd trigger for signature help after function expand.\nAdd echo message when provider not found for some actions.\nAdd support for formatexpr\nAdd support for locality bonus like VSCode.\nAdd support of applyAdditionalLEdits on item selected by &lt;esc&gt;\nAdd coc.preferences.useQuickfixForLocations\nAdd coc.preferences.messageLevel\nAdd support for trigger command which not registered by server.\nAdd g:coc_denite_quickfix_action\nFix insert unwanted word when trigger commitCharacter.\nFix rpc request throw on vim.\nFix data of complete item conflict.\nFix code action not work sometime.\nFix coc.preferences.diagnostic.locationlist not work.\nFix coc.preference.preferCompleteThanJumpPlaceholder.\nFix workspace.jumpTo not work sometime.\nFix line indent for snippet.\nFix trigger of signatureHelp and onTypeFormat."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-185",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-185",
    "title": "",
    "section": "1.186 2018-11-24",
    "text": "1.186 2018-11-24\n\nBreak change sources excluding around, buffer or file are extracted as extensions.\nBreak change custom source doesn’t exist any more.\nAdd coc.preferences.preferCompleteThanJumpPlaceholder to make jump placeholder behavior as confirm completion when possible.\nAdd CocDiagnosticChange autocmd for force statusline update.\nAdd onDidUnloadExtension event on extension unload.\nFix getDiagnosticsInRange, consider all interactive ranges.\nFix completion throw when data on complete item is string.\nFix commitCharacters not works.\nFix workspace methods: renameFile, deleteFile and resolveRoot.\nFix textEdit of builtin sources not works."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-186",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-186",
    "title": "",
    "section": "1.187 2018-11-19",
    "text": "1.187 2018-11-19\n\nBreak change snippet support reworked: support nest snippets, independent session in each buffer and lots of fixes.\nBreak change diagnostic list now sort by severity first.\nAdd commands: :CocUninstall and :CocOpenLog\nAdd cterm color for highlights.\nAdd line highlight support for diagnostic.\nAdd coc.preferences.fixInsertedWord to make complete item replace current word.\nFix check confirm not works on vim sometimes.\nFix check of vim-node-rpc.\nFix preselect complete item not first sometimes.\nImprove completion sort result by consider more abort priority and recent selected.\nImprove colors module, only highlight current buffer and when buffer changed.\nImprove doc/coc.txt"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-187",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-187",
    "title": "",
    "section": "1.188 2018-11-13",
    "text": "1.188 2018-11-13\n\nBreak change default completion timeout changed to 2s.\nBreak change snippet session not canceled on InsertLeave, use &lt;esc&gt; in normal mode to cancel.\nAdd document color support.\nAdd CocAction ‘pickColor’ and ‘colorPresentation’.\nAdd prompt for install vim-node-rpc module.\nAdd support for inComplete completion result.\nAdd status item for snippet session.\nAdd support for fix inserted text of snippet completion item.\nFix document highlight not cleared.\nFix cancel behavior of snippet.\nFix range check of edit on snippet session.\nFix check of completion confirm.\nFix highlight group ‘CocHighlightWrite’ not work.\nFix command editor.action.rename not works.\nFix throw error before initialize.\nFix g:coc_node_path not working.\nFix file source throw undefined error.\nImprove logic of sorting completion items, strict match items comes first."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-188",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-188",
    "title": "",
    "section": "1.189 2018-11-07",
    "text": "1.189 2018-11-07\n\nBreak change word source removed from custom sources, enabled for markdown by default.\nBreak change ignore sortText when input.length &gt; 3.\nBreak change show prompt for install coc-json when not found.\nFix document content synchronize could be wrong.\nFix filetype not converted on completion.\nFix complete item possible not resolved.\nImprove document highlight, no highlight when cursor moved.\nImprove completion score, use fuzzaldrin-plus replace fuzzaldrin."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-189",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-189",
    "title": "",
    "section": "1.190 2018-11-02",
    "text": "1.190 2018-11-02\n\nBreak change no items from snippets source when input is empty.\nBreak change javascript.jsx would changed to javascriptreact as languageId.\nBreak change typescript.tsx would changed to typescriptreact as languageId.\nAdd support for commitCharacters and coc.preferences.acceptSuggestionOnCommitCharacter.\nAdd setting: coc.preferences.diagnostic.level.\nAdd g:coc_filetype_map for customize mapping between filetype and languageId.\nAdd g:coc_node_path for custom node executable.\nAdd workspaceFolders feature to language client.\nAdd ~ to complete item of snippet source.\nAdd onDidChangeWorkspaceFolder event\nFix eol issue by check eol option.\nFix workspace.document could be null.\nFix workspaceFolder could be null.\nFix diagnostic for quickfix buffer.\nFix resolve of coc.preferences.rootPath"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-190",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-190",
    "title": "",
    "section": "1.191 2018-10-29",
    "text": "1.191 2018-10-29\n\nBreak change diagnostic reworked, no refresh on insert mode.\nBreak change keep sortText on filter for better result.\nBreak change prefer trigger completion than filter, same as VSCode.\nBreak change filetype of document would be first part of &filetype split by ..\nBreak change prefer label as abbr for complete item.\nFix creating wrong textEdit for snippet.\nFix startcol of CompleteResult not working.\nFix workspaceConfiguration.toJSON return invalid result.\nFix workspace.readFile not synchronized with buffer.\nFix workspace.rootPath not resolved as expected.\nFix CompletionItem resolved multiple times.\nFix check of latestInsert on completion.\nFix formatOnType possible add unnecessary indent.\nFix document content synchronized on vim.\nFix confirm check of completion for all source.\nFix document possible register multiple times.\nFix completion always stopped when input is empty.\nAdd warning message when definition not found.\nAdd redraw after g:coc_status changed.\nRemove change of virtualedit option of snippet.\nImproved performance of filter completion items."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-191",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-191",
    "title": "",
    "section": "1.192 2018-10-25",
    "text": "1.192 2018-10-25\n\nFix implementation and typeDefinition of language client not working.\nFix diffLines return wrong range.\nFix setqflist and setloclist not works on vim.\nFix snippets and additionalTextEdits not works on vim.\nFix append lines not works on vim.\nFix highlight action not works on vim.\nFix null version of TextDocumentIdentifier not handled.\nAdd workspace.registerTextDocumentContentProvider for handle custom uri.\nAdd workspace.createStatusBarItem method."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-192",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-192",
    "title": "",
    "section": "1.193 2018-10-21",
    "text": "1.193 2018-10-21\n\nBreak change: triggerAfterInsertEnter now respect minTriggerInputLength.\nAdd coc.preferences.minTriggerInputLength.\nAdd command: :CocCommand.\nFix position of provideCompletionItems.\nFix content change not trigger after completion.\nFix default sorters & matchers of denite sources.\nFix outputChannel wrong buftype.\nFix completion not works with textEdit add new lines.\nFix first item not resolved when noselect is disabled\nRemove using of diff module."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-193",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-193",
    "title": "",
    "section": "1.194 2018-10-18",
    "text": "1.194 2018-10-18\n\nBreak change: all buffers are created as document.\nBreak change: retrieve workspace root on document create.\nFix uri for all buffer types.\nFix bad performance on parse keywords.\nFix check of language client state.\nFix register of renameProvider\nFix CocRequestAsync not work.\nFix workspace.openResource error with wildignore option.\nFix output channel can’t shown if hidden.\nFix extension activate before document create.\nAdd command vscode.open and editor.action.restart.\nAdd workspace.requestInput method.\nAdd support of g:rooter_patterns\nAdd storagePath to ExtensionContext\nAdd workspace.env property.\nAdd support of scoped configuration.\nDisable buffer highlight on vim."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-194",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-194",
    "title": "",
    "section": "1.195 2018-10-14",
    "text": "1.195 2018-10-14\n\nBreak change API: workspace.resoleModule only does resolve.\nBreak change extension would still be loaded even if current coc version miss match.\nBreak change variables are removed from view of Denite coc-symbols\nFix workspace.applyEdits\nFix console.log throws in extension.\nFix invalid workspace.root with custom buffer schema.\nFix possible crash on neovim 0.3.1 by not attach terminal buffer.\nFix jump position not stored when jump to current buffer position.\nFix install function not works on vim.\nAdd support for custom uri schema for workspace.jumpTo and workspace.openResource\nAdd workspace.findUp for find up file of current buffer.\nAdd env option for custom language server config.\nAdd vim function: CocRequest and CocRequestAsync for send request to language server in vim.\nAdd coc.preferences.parseKeywordsLimitLines and coc.preferences.hyphenAsKeyword for buffer parse.\nRework completion for performance and accuracy."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-195",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-195",
    "title": "",
    "section": "1.196 2018-10-05",
    "text": "1.196 2018-10-05\n\nBreak change, workspace.onDidChangeConfiguration emit ConfigurationChangeEvent now.\nAdd position to function coc#util#open_terminal.\nImprove performance of completion by use vim’s filter when possible.\nFix service start multiple times.\nFix parse of iskeyword option, consider @-@.\nFix completion of snippet: cancel on line change."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-196",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-196",
    "title": "",
    "section": "1.197 2018-10-01",
    "text": "1.197 2018-10-01\n\nImproved document didChange before trigger completion.\nAdd option coc.preferences.triggerCompletionWait, default 60.\nAdd watch for iskeyword change.\nFix snippet jump not works sometime.\nFix possible wrong rootPath of language server.\nFix highlight of highlight action not using terminal colors.\nFix detect for insert new line character."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-197",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-197",
    "title": "",
    "section": "1.198 2018-09-30",
    "text": "1.198 2018-09-30\n\nAdd quickfix source of denite and fzf\nAdd option coc.preferences.rootPath\nAdd option revealOutputChannelOn to language server.\nFix jump of placeholder.\nFix empty root on language server initialize."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-198",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-198",
    "title": "",
    "section": "1.199 2018-09-28",
    "text": "1.199 2018-09-28\n\nBreak change: coc.preferences.formatOnType default to false.\nBreak change: snippet completion disabled in string and comment.\nAdd support for register local extension.\nAdd title for commands in Denite coc-command\nFix prompt hidden by echo message.\nFix contribute commands not shown in denite interface.\nFix parse of iskeyword, support character range.\nFix triggerKind of completion.\nFix install extension from url not reloaded."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-199",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-199",
    "title": "",
    "section": "1.200 2018-09-27",
    "text": "1.200 2018-09-27\n\nBreak change: :CocDisable disabled all events from vim.\nBreak change: new snippet implementation.\n\nSupport multiple line snippet.\nSupport VSCode snippet extension.\nSupport completion of snippets from snippet extension.\n\nAdd highlight groups for different severity.\nAdd coc.preferences.formatOnType option.\nAdd coc.preferences.snippets.enable option.\nFix snippet not works as insertText.\nFix echo message with multiple lines.\nFix signatureHelp with showcmd disabled.\nFix location list cleared on :lopen.\nFix diagnostic info not cleared on :CocDisable\nFix diagnostic info not cleared on buffer unload.\nFix buffer highlight not cleared on highlight action.\nFix format on type not work as expected."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-200",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-200",
    "title": "",
    "section": "1.201 2018-09-24",
    "text": "1.201 2018-09-24\n\nBreak change: use CursorMove instead of CursorHold for diagnostic message.\nBreak change: direct move to diagnostic position would show diagnostic message without truncate.\nBreak change: snippet would be canceled when mode changed to normal, no mapping of &lt;esc&gt; any more.\nAdd format document on insertLeave when onTypeFormat is supported.\nAdd buffer operations on resource edit.\nAdd uninstall action for Denite coc-extension.\nFix active extension on command not working.\nFix delete file from resource edit not works."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-201",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-201",
    "title": "",
    "section": "1.202 2018-09-20",
    "text": "1.202 2018-09-20\n\nFix diagnostic check next offset for diagnostics.\nAdd &lt;Plug&gt;(coc-diagnostic-info) for show diagnostic message without truncate."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-202",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-202",
    "title": "",
    "section": "1.203 2018-09-15",
    "text": "1.203 2018-09-15\n\nFix wrong configuration on update.\nFix install command with tag version.\nFix using of unsafe new Buffer.\nAdd support of trace format & resource operations.\nAdd support of json validation for extension.\nAdd support of format on save by coc.preferences.formatOnSaveFiletypes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-203",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-203",
    "title": "",
    "section": "1.204 2018-09-10",
    "text": "1.204 2018-09-10\n\nAdd Denite coc-extension for manage extensions.\nAdd actions for manage extension including toggleExtension reloadExtension deactivateExtension\nAdd check for extension update everyday.\nFix extensions using same process of coc itself.\nFix configurationSection should be null if none was specified."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-204",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-204",
    "title": "",
    "section": "1.205 2018-09-07",
    "text": "1.205 2018-09-07\n\nBreak change: all extension all separated from core, checkout Using coc extension\nFix textDocumentSync option not work when received as object.\nFix wrong diagnostic info when using multiple lint servers.\nUse CursorHold for show diagnostic message.\nAdd option coc.preferences.enableMessage to disable showing of diagnostic message.\nAdd new events module for receive vim events.\nAdd support for prepareRename.\nAdd support for CodeActionOptions"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-205",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-205",
    "title": "",
    "section": "1.206 2018-08-30",
    "text": "1.206 2018-08-30\n\nFix wrong triggerKind from VSCode.\nAdd &lt;Plug&gt;(coc-openlink) for open link.\nAdd typescript.jsx as valid typescript type."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-206",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-206",
    "title": "",
    "section": "1.207 2018-08-23",
    "text": "1.207 2018-08-23\n\nFix sometimes client status invalid.\nAdd multiply provider support for all features.\nAdd documentLink support\nAdd documentHighlight support\nAdd foldingRange support\nAdd support of documentSelector same as VSCode"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-207",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-207",
    "title": "",
    "section": "1.208 2018-08-21",
    "text": "1.208 2018-08-21\n\nFix diagnostic and arguments of tsserver.\nAdd keepfocus option for open_terminal.\nImprove error catch of autocmds.\nAdd onTypeFormat feature for language server\nAdd onTypeFormat support for tsserver.\nRefactor and more tests of workspace.\nFix window/showMessageRequest request.\nUse callAsync for async request to vim.\nAdd CocActionAsync function send async request to server."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-208",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-208",
    "title": "",
    "section": "1.209 2018-08-17",
    "text": "1.209 2018-08-17\n\nFix exists terminal buffer not watched.\nFix buffer not attached after edit!.\nFix clean diagnostics of tsserver.watchBuild command.\nFix refresh of buffer.\nFix document not found on BufEnter.\nUse rpcrequest for BufCreate\nFix no permission of log file.\nDisable create log file for root user.\nAdd more command for tsserver:\n\ntsserver.reloadProjects\ntsserver.openTsServerLog\ntsserver.goToProjectConfig\ntsserver.restart\n\nAdd test for workspace."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-209",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-209",
    "title": "",
    "section": "1.210 2018-08-16",
    "text": "1.210 2018-08-16\n\nImproved for tsserver:\n\nAdd watchBuild command for build current project with watch in terminal.\nSupport of untitled buffer\nSupport projectRootPath\n\nFix detach error of document.\nFix trigger characters not works for some source.\nFix document possible not sync before save.\nFix denite errors with 0 as result.\nFix wrong arguments of tsserver refactor command.\nUse drop for workspace openResource.\nAdd clear coc signs on :CocRestart.\nBreak change all buffer types except nofile help and quickfix are watched for changes."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-210",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-210",
    "title": "",
    "section": "1.211 2018-08-15",
    "text": "1.211 2018-08-15\n\nFix filter of completion items on fast input.\nFix sometimes fails of include & neosnippet source.\nFix sometimes fails to find global modules.\nImprove complete source initialization.\n\nAlways respect change of configuration.\n\nAdd ability to start standalone coc service for debugging.\n\nUse NVIM_LISTEN_ADDRESS=/tmp/nvim nvim to start neovim.\nStart coc server by command like node bin/server.js\n\nAdd ability to recover from unload buffer.\nSometimes bufReadPost BufEnter could be not be fired on buffer create, check buffer on CursorHold and TextChanged to fix this issue.\nAdd tsserver features: tsserver.formatOnSave and tsserver.organizeImportOnSave\nBoth default to false.\nAdd tests for completion sources."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-211",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-211",
    "title": "",
    "section": "1.212 2018-08-14",
    "text": "1.212 2018-08-14\n\nFix remote source not working.\nFix sort of completion items.\nFix EPIPE error from net module.\nAdd tslint.lintProject command.\nAdd config coc.preferences.maxCompleteItemCount.\nAdd g:coc_auto_copen, default to 1."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-212",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-212",
    "title": "",
    "section": "1.213 2018-08-12",
    "text": "1.213 2018-08-12\n\nBreak change :CocRefresh replaced with call CocAction('refreshSource').\nAdd support filetype change of buffer.\nAdd basic test for completion.\nImprove loading speed, use child process to initialize vim sources.\nImprove install.sh, install node when it doesn’t exist.\nImprove interface of workspace.\nFix loading of configuration content."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-213",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-213",
    "title": "",
    "section": "1.214 2018-08-11",
    "text": "1.214 2018-08-11\n\nFix configuration content not saved on change.\nFix thrown error on watchman not found.\nFix incompatible options of child_process.\nFix location list for diagnostics.\n\nReset on BufWinEnter.\nAvailable for all windows of single buffer.\nUse replace on change for coc location list.\nAdd debounce.\n\nFix signature help behaviour, truncate messages to not overlap.\nReworks sources use async import."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-214",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-214",
    "title": "",
    "section": "1.215 2018-08-10",
    "text": "1.215 2018-08-10\n\nFix dispose for all modules.\nAdd support for multiple addWillSaveUntilListener.\nFix startcol for json server.\nAdd support filetype javascriptreact for tsserver."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-215",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-215",
    "title": "",
    "section": "1.216 2018-08-09",
    "text": "1.216 2018-08-09\n\nAdd coc#util#install for installation.\nAdd install.cmd for windows."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-216",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-216",
    "title": "",
    "section": "1.217 2018-08-08",
    "text": "1.217 2018-08-08\n\nImproved location list for diagnostics.\nAdd internal option to command.\nCommands registered by server are internal.\nAdd support for multiple save wait until requests."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-217",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-217",
    "title": "",
    "section": "1.218 2018-08-07",
    "text": "1.218 2018-08-07\n\nAdd forceFullSync to language server option."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-218",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-218",
    "title": "",
    "section": "1.219 2018-08-05",
    "text": "1.219 2018-08-05\n\nImprove eslint extension to use workspaceFolder.\nFix watchman not works with multiple roots.\nAdd feature: dynamic root support for workspace.\nBreak change output channel of watchman is removed."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-219",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-219",
    "title": "",
    "section": "1.220 2018-08-04",
    "text": "1.220 2018-08-04\n\nFix order of document symbols.\nFix completion snippet with $variable.\nAdd feature: expand snippet on confirm.\nAdd feature: &lt;Plug&gt;(coc-complete-custom) for complete custom sources.\nDefault customs sources: emoji, include and word\nBreak change emoji include used for all filetypes by default."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-220",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-220",
    "title": "",
    "section": "1.221 2018-08-03",
    "text": "1.221 2018-08-03\n\nAdd command :CocErrors for debug.\nSupport DocumentSymbol for ‘textDocument/documentSymbol’"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-221",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-221",
    "title": "",
    "section": "1.222 2018-08-02",
    "text": "1.222 2018-08-02\n\nFix error of language client with unsupported schema.\nNo document event fired for unsupported schema (eg: fugitive://)\nFix update empty configuration not works."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-222",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-222",
    "title": "",
    "section": "1.223 2018-07-31",
    "text": "1.223 2018-07-31\n\nImprove file source triggered with dirname started path."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-223",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-223",
    "title": "",
    "section": "1.224 2018-07-30",
    "text": "1.224 2018-07-30\n\nFix source ultisnip not working.\nFix custom language client with command not working.\nFix wrong arguments passed to runCommand function.\nImprove module install, add sudo for npm install on Linux.\nImprove completion on backspace.\n\nCompletion is resumed when search is empty.\nCompletion is triggered when user try to fix search."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-224",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-224",
    "title": "",
    "section": "1.225 2018-07-29",
    "text": "1.225 2018-07-29\n\nBreak change all servers are decoupled from coc.nvim\nA prompt for download is shown when server not found.\nBreak change vim-node-rpc decoupled from coc.nvim\nA prompt would be shown to help user install vim-node-rpc in vim.\nAdd command CocConfig"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-225",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-225",
    "title": "",
    "section": "1.226 2018-07-28",
    "text": "1.226 2018-07-28\n\nFix uncaught exception error on windows.\nUse plugin root for assets resolve.\nFix emoji source not triggered by :.\nImprove file source to recognize ~ as user home."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-226",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-226",
    "title": "",
    "section": "1.227 2018-07-27",
    "text": "1.227 2018-07-27\n\nPrompt user for download server module with big extension like vetur and wxml-langserver\nBreak change, section of settings changed: cssserver.[languageId] moved to [languageId]\nFor example: cssserver.css section is moved to css section.\nThis makes coc settings of css languages the same as VSCode.\nBreak change, stylelint extension is disabled by default, add\n\"stylelint.enable\": true,\nto your coc-settings.json to enable it.\nUser will be prompted to download server if stylelint-langserver is not installed globally.\nBreak change, triggerAfterInsertEnter is always true, add\n\"coc.preferences.triggerAfterInsertEnter\": false,\nto your coc-settings.json to disable it.\nBreak change, when autoTrigger is always completion would be triggered after completion item select."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-227",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-227",
    "title": "",
    "section": "1.228 2018-07-24",
    "text": "1.228 2018-07-24\n\nbetter statusline integration with airline and lightline."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-228",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-228",
    "title": "",
    "section": "1.229 2018-07-23",
    "text": "1.229 2018-07-23\n\nCoc service start much faster.\nAdd vim-node-rpc module.\nBreak change global function CocAutocmd and CocResult are removed.\nSupport Vue with vetur"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-229",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-229",
    "title": "",
    "section": "1.230 2018-07-21",
    "text": "1.230 2018-07-21\n\nFix issue with completeopt.\nAdd source neosnippet.\nAdd source gocode."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-230",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-230",
    "title": "",
    "section": "1.231 2018-07-20",
    "text": "1.231 2018-07-20\n\nAdd documentation for language server debug.\nRework register of functions, avoid undefined function."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-231",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-231",
    "title": "",
    "section": "1.232 2018-07-19",
    "text": "1.232 2018-07-19\n\nFix error of isFile check.\nIgnore undefined function on service start."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-232",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-232",
    "title": "",
    "section": "1.233 2018-07-17",
    "text": "1.233 2018-07-17\n\nAdd coc.preference.jumpCommand to settings.\nMake coc service standalone."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-233",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-233",
    "title": "",
    "section": "1.234 2018-07-16",
    "text": "1.234 2018-07-16\n\nSupport arguments for runCommand action.\nAdd coc command workspace.showOutput.\nSupport output channel for language server.\nSupport [extension].trace.server setting for trace server communication."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-234",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-234",
    "title": "",
    "section": "1.235 2018-07-15",
    "text": "1.235 2018-07-15\n\nSupport location list for diagnostic.\nAdd tsserver project errors command."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-235",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-235",
    "title": "",
    "section": "1.236 2018-07-14",
    "text": "1.236 2018-07-14\n\nAdd support for preselect of complete item.\nAdd support for socket language server configuration.\nFix configured language server doesn’t work.\nAdd workspace.diffDocument coc command.\nFix buffer sometimes not attached.\nImprove completion of JSON extension."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-236",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-236",
    "title": "",
    "section": "1.237 2018-07-13",
    "text": "1.237 2018-07-13\n\nBreak change: diagnostic in setting.json changed to diagnostic.\nFix clearHighlight arguments.\nAdd eslint extension https://github.com/Microsoft/vscode-eslint.\nFix snippet break with line have $variable.\nUse jsonc-parser replace json5.\nAdd data/schema.json for coc-settings.json."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-237",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/coc.nvim/history.html#section-237",
    "title": "",
    "section": "1.238 2018-07-12",
    "text": "1.238 2018-07-12\n\nFix restart of tsserver not working.\nFix edit of current buffer change jumplist by using :keepjumps."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/copilot.vim/SECURITY.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/copilot.vim/SECURITY.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\nIf you discover a security issue in this repo, please submit it through the GitHub Security Bug Bounty.\nThanks for helping make GitHub Copilot safe for everyone.\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/copilot.vim/SECURITY.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/copilot.vim/SECURITY.html."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/BUILD.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/BUILD.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/BUILD.html#build-instructions",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/BUILD.html#build-instructions",
    "title": "",
    "section": "1.1 Build instructions",
    "text": "1.1 Build instructions\n\n1.1.1 Prerequisites\n\nGo 1.20 or above\n\n\n\n1.1.2 Using Makefile\n# Build fzf binary for your platform in target\nmake\n\n# Build fzf binary and copy it to bin directory\nmake install\n\n# Build fzf binaries and archives for all platforms using goreleaser\nmake build\n\n# Publish GitHub release\nmake release\n\n[!WARNING] Makefile uses git commands to determine the version and the revision information for fzf --version. So if you’re building fzf from an environment where its git information is not available, you have to manually set $FZF_VERSION and $FZF_REVISION.\ne.g. FZF_VERSION=0.24.0 FZF_REVISION=tarball make\n\n\n[!TIP] To build fzf with profiling options enabled, set TAGS=pprof\nTAGS=pprof make clean install\nfzf --profile-cpu /tmp/cpu.pprof --profile-mem /tmp/mem.pprof \\\n    --profile-block /tmp/block.pprof --profile-mutex /tmp/mutex.pprof"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/BUILD.html#third-party-libraries-used",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/BUILD.html#third-party-libraries-used",
    "title": "",
    "section": "1.2 Third-party libraries used",
    "text": "1.2 Third-party libraries used\n\nrivo/uniseg\n\nLicensed under MIT\n\nmattn/go-shellwords\n\nLicensed under MIT\n\nmattn/go-isatty\n\nLicensed under MIT\n\ntcell\n\nLicensed under Apache License 2.0\n\nfastwalk\n\nLicensed under MIT"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/BUILD.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/BUILD.html#license",
    "title": "",
    "section": "1.3 License",
    "text": "1.3 License\nMIT"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#installation",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#installation",
    "title": "",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nOnce you have fzf installed, you can enable it inside Vim simply by adding the directory to &runtimepath in your Vim configuration file. The path may differ depending on the package manager.\n\" If installed using Homebrew\nset rtp+=/usr/local/opt/fzf\n\n\" If installed using Homebrew on Apple Silicon\nset rtp+=/opt/homebrew/opt/fzf\n\n\" If you have cloned fzf on ~/.fzf directory\nset rtp+=~/.fzf\nIf you use vim-plug, the same can be written as:\n\" If installed using Homebrew\nPlug '/usr/local/opt/fzf'\n\n\" If installed using Homebrew on Apple Silicon\nPlug '/opt/homebrew/opt/fzf'\n\n\" If you have cloned fzf on ~/.fzf directory\nPlug '~/.fzf'\nBut if you want the latest Vim plugin file from GitHub rather than the one included in the package, write:\nPlug 'junegunn/fzf'\nThe Vim plugin will pick up fzf binary available on the system. If fzf is not found on $PATH, it will ask you if it should download the latest binary for you.\nTo make sure that you have the latest version of the binary, set up post-update hook like so:\nPlug 'junegunn/fzf', { 'do': { -&gt; fzf#install() } }"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#summary",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#summary",
    "title": "",
    "section": "1.2 Summary",
    "text": "1.2 Summary\nThe Vim plugin of fzf provides two core functions, and :FZF command which is the basic file selector command built on top of them.\n\nfzf#run([spec dict])\n\nStarts fzf inside Vim with the given spec\n:call fzf#run({'source': 'ls'})\n\nfzf#wrap([spec dict]) -&gt; (dict)\n\nTakes a spec for fzf#run and returns an extended version of it with additional options for addressing global preferences (g:fzf_xxx)\n\n:echo fzf#wrap({'source': 'ls'})\n\nWe usually wrap a spec with fzf#wrap before passing it to fzf#run\n\n:call fzf#run(fzf#wrap({'source': 'ls'}))\n\n\n:FZF [fzf_options string] [path string]\n\nBasic fuzzy file selector\nA reference implementation for those who don’t want to write VimScript to implement custom commands\nIf you’re looking for more such commands, check out fzf.vim project.\n\n\nThe most important of all is fzf#run, but it would be easier to understand the whole if we start off with :FZF command."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#fzf",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#fzf",
    "title": "",
    "section": "1.3 :FZF[!]",
    "text": "1.3 :FZF[!]\n\" Look for files under current directory\n:FZF\n\n\" Look for files under your home directory\n:FZF ~\n\n\" With fzf command-line options\n:FZF --reverse --info=inline /tmp\n\n\" Bang version starts fzf in fullscreen mode\n:FZF!\nSimilarly to ctrlp.vim, use enter key, CTRL-T, CTRL-X or CTRL-V to open selected files in the current window, in new tabs, in horizontal splits, or in vertical splits respectively.\nNote that the environment variables FZF_DEFAULT_COMMAND and FZF_DEFAULT_OPTS also apply here.\n\n1.3.1 Configuration\n\ng:fzf_action\n\nCustomizable extra key bindings for opening selected files in different ways\n\ng:fzf_layout\n\nDetermines the size and position of fzf window\n\ng:fzf_colors\n\nCustomizes fzf colors to match the current color scheme\n\ng:fzf_history_dir\n\nEnables history feature\n\n\n\n1.3.1.1 Examples\n\" This is the default extra key bindings\nlet g:fzf_action = {\n  \\ 'ctrl-t': 'tab split',\n  \\ 'ctrl-x': 'split',\n  \\ 'ctrl-v': 'vsplit' }\n\n\" An action can be a reference to a function that processes selected lines\nfunction! s:build_quickfix_list(lines)\n  call setqflist(map(copy(a:lines), '{ \"filename\": v:val, \"lnum\": 1 }'))\n  copen\n  cc\nendfunction\n\nlet g:fzf_action = {\n  \\ 'ctrl-q': function('s:build_quickfix_list'),\n  \\ 'ctrl-t': 'tab split',\n  \\ 'ctrl-x': 'split',\n  \\ 'ctrl-v': 'vsplit' }\n\n\" Default fzf layout\n\" - Popup window (center of the screen)\nlet g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }\n\n\" - Popup window (center of the current window)\nlet g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true } }\n\n\" - Popup window (anchored to the bottom of the current window)\nlet g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true, 'yoffset': 1.0 } }\n\n\" - down / up / left / right\nlet g:fzf_layout = { 'down': '40%' }\n\n\" - Window using a Vim command\nlet g:fzf_layout = { 'window': 'enew' }\nlet g:fzf_layout = { 'window': '-tabnew' }\nlet g:fzf_layout = { 'window': '10new' }\n\n\" Customize fzf colors to match your color scheme\n\" - fzf#wrap translates this to a set of `--color` options\nlet g:fzf_colors =\n\\ { 'fg':      ['fg', 'Normal'],\n  \\ 'bg':      ['bg', 'Normal'],\n  \\ 'hl':      ['fg', 'Comment'],\n  \\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],\n  \\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],\n  \\ 'hl+':     ['fg', 'Statement'],\n  \\ 'info':    ['fg', 'PreProc'],\n  \\ 'border':  ['fg', 'Ignore'],\n  \\ 'prompt':  ['fg', 'Conditional'],\n  \\ 'pointer': ['fg', 'Exception'],\n  \\ 'marker':  ['fg', 'Keyword'],\n  \\ 'spinner': ['fg', 'Label'],\n  \\ 'header':  ['fg', 'Comment'] }\n\n\" Enable per-command history\n\" - History files will be stored in the specified directory\n\" - When set, CTRL-N and CTRL-P will be bound to 'next-history' and\n\"   'previous-history' instead of 'down' and 'up'.\nlet g:fzf_history_dir = '~/.local/share/fzf-history'\n\n1.3.1.1.1 Explanation of g:fzf_colors\ng:fzf_colors is a dictionary mapping fzf elements to a color specification list:\nelement: [ component, group1 [, group2, ...] ]\n\nelement is an fzf element to apply a color to:\n\n\n\n\n\n\n\nElement\nDescription\n\n\n\n\nfg / bg / hl\nItem (foreground / background / highlight)\n\n\nfg+ / bg+ / hl+\nCurrent item (foreground / background / highlight)\n\n\npreview-fg / preview-bg\nPreview window text and background\n\n\nhl / hl+\nHighlighted substrings (normal / current)\n\n\ngutter\nBackground of the gutter on the left\n\n\npointer\nPointer to the current line (&gt;)\n\n\nmarker\nMulti-select marker (&gt;)\n\n\nborder\nBorder around the window (--border and --preview)\n\n\nheader\nHeader (--header or --header-lines)\n\n\ninfo\nInfo line (match counters)\n\n\nspinner\nStreaming input indicator\n\n\nquery\nQuery string\n\n\ndisabled\nQuery string when search is disabled\n\n\nprompt\nPrompt before query (&gt;)\n\n\npointer\nPointer to the current line (&gt;)\n\n\n\ncomponent specifies the component (fg / bg) from which to extract the color when considering each of the following highlight groups\ngroup1 [, group2, ...] is a list of highlight groups that are searched (in order) for a matching color definition\n\nFor example, consider the following specification:\n  'prompt':  ['fg', 'Conditional', 'Comment'],\nThis means we color the prompt - using the fg attribute of the Conditional if it exists, - otherwise use the fg attribute of the Comment highlight group if it exists, - otherwise fall back to the default color settings for the prompt.\nYou can examine the color option generated according the setting by printing the result of fzf#wrap() function like so:\n:echo fzf#wrap()"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#fzfrun",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#fzfrun",
    "title": "",
    "section": "1.4 fzf#run",
    "text": "1.4 fzf#run\nfzf#run() function is the core of Vim integration. It takes a single dictionary argument, a spec, and starts fzf process accordingly. At the very least, specify sink option to tell what it should do with the selected entry.\ncall fzf#run({'sink': 'e'})\nWe haven’t specified the source, so this is equivalent to starting fzf on command line without standard input pipe; fzf will traverse the file system under the current directory to get the list of files. (If $FZF_DEFAULT_COMMAND is set, fzf will use the output of the command instead.) When you select one, it will open it with the sink, :e command. If you want to open it in a new tab, you can pass :tabedit command instead as the sink.\ncall fzf#run({'sink': 'tabedit'})\nYou can use any shell command as the source to generate the list. The following example will list the files managed by git. It’s equivalent to running git ls-files | fzf on shell.\ncall fzf#run({'source': 'git ls-files', 'sink': 'e'})\nfzf options can be specified as options entry in spec dictionary.\ncall fzf#run({'sink': 'tabedit', 'options': '--multi --reverse'})\nYou can also pass a layout option if you don’t want fzf window to take up the entire screen.\n\" up / down / left / right / window are allowed\ncall fzf#run({'source': 'git ls-files', 'sink': 'e', 'left': '40%'})\ncall fzf#run({'source': 'git ls-files', 'sink': 'e', 'window': '30vnew'})\nsource doesn’t have to be an external shell command, you can pass a Vim array as the source. In the next example, we pass the names of color schemes as the source to implement a color scheme selector.\ncall fzf#run({'source': map(split(globpath(&rtp, 'colors/*.vim')),\n            \\               'fnamemodify(v:val, \":t:r\")'),\n            \\ 'sink': 'colo', 'left': '25%'})\nThe following table summarizes the available options.\n\n\n\n\n\n\n\n\nOption name\nType\nDescription\n\n\n\n\nsource\nstring\nExternal command to generate input to fzf (e.g. find .)\n\n\nsource\nlist\nVim list as input to fzf\n\n\nsink\nstring\nVim command to handle the selected item (e.g. e, tabe)\n\n\nsink\nfuncref\nFunction to be called with each selected item\n\n\nsinklist (or sink*)\nfuncref\nSimilar to sink, but takes the list of output lines at once\n\n\nexit\nfuncref\nFunction to be called with the exit status of fzf (e.g. 0, 1, 2, 130)\n\n\noptions\nstring/list\nOptions to fzf\n\n\ndir\nstring\nWorking directory\n\n\nup/down/left/right\nnumber/string\n(Layout) Window position and size (e.g. 20, 50%)\n\n\ntmux\nstring\n(Layout) --tmux options (e.g. 90%,70%)\n\n\nwindow (Vim 8 / Neovim)\nstring\n(Layout) Command to open fzf window (e.g. vertical aboveleft 30new)\n\n\nwindow (Vim 8 / Neovim)\ndict\n(Layout) Popup window settings (e.g. {'width': 0.9, 'height': 0.6})\n\n\n\noptions entry can be either a string or a list. For simple cases, string should suffice, but prefer to use list type to avoid escaping issues.\ncall fzf#run({'options': '--reverse --prompt \"C:\\\\Program Files\\\\\"'})\ncall fzf#run({'options': ['--reverse', '--prompt', 'C:\\Program Files\\']})\nWhen window entry is a dictionary, fzf will start in a popup window. The following options are allowed:\n\nRequired:\n\nwidth [float range [0 ~ 1]] or [integer range [8 ~ ]]\nheight [float range [0 ~ 1]] or [integer range [4 ~ ]]\n\nOptional:\n\nyoffset [float default 0.5 range [0 ~ 1]]\nxoffset [float default 0.5 range [0 ~ 1]]\nrelative [boolean default v:false]\nborder [string default rounded (sharp on Windows)]: Border style\n\nrounded / sharp / horizontal / vertical / top / bottom / left / right / no[ne]"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#fzfwrap",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#fzfwrap",
    "title": "",
    "section": "1.5 fzf#wrap",
    "text": "1.5 fzf#wrap\nWe have seen that several aspects of :FZF command can be configured with a set of global option variables; different ways to open files (g:fzf_action), window position and size (g:fzf_layout), color palette (g:fzf_colors), etc.\nSo how can we make our custom fzf#run calls also respect those variables? Simply by “wrapping” the spec dictionary with fzf#wrap before passing it to fzf#run.\n\nfzf#wrap([name string], [spec dict], [fullscreen bool]) -&gt; (dict)\n\nAll arguments are optional. Usually we only need to pass a spec dictionary.\nname is for managing history files. It is ignored if g:fzf_history_dir is not defined.\nfullscreen can be either 0 or 1 (default: 0).\n\n\nfzf#wrap takes a spec and returns an extended version of it (also a dictionary) with additional options for addressing global preferences. You can examine the return value of it like so:\necho fzf#wrap({'source': 'ls'})\nAfter we “wrap” our spec, we pass it to fzf#run.\ncall fzf#run(fzf#wrap({'source': 'ls'}))\nNow it supports CTRL-T, CTRL-V, and CTRL-X key bindings (configurable via g:fzf_action) and it opens fzf window according to g:fzf_layout setting.\nTo make it easier to use, let’s define LS command.\ncommand! LS call fzf#run(fzf#wrap({'source': 'ls'}))\nType :LS and see how it works.\nWe would like to make :LS! (bang version) open fzf in fullscreen, just like :FZF!. Add -bang to command definition, and use &lt;bang&gt; value to set the last fullscreen argument of fzf#wrap (see :help &lt;bang&gt;).\n\" On :LS!, &lt;bang&gt; evaluates to '!', and '!0' becomes 1\ncommand! -bang LS call fzf#run(fzf#wrap({'source': 'ls'}, &lt;bang&gt;0))\nOur :LS command will be much more useful if we can pass a directory argument to it, so that something like :LS /tmp is possible.\ncommand! -bang -complete=dir -nargs=? LS\n    \\ call fzf#run(fzf#wrap({'source': 'ls', 'dir': &lt;q-args&gt;}, &lt;bang&gt;0))\nLastly, if you have enabled g:fzf_history_dir, you might want to assign a unique name to our command and pass it as the first argument to fzf#wrap.\n\" The query history for this command will be stored as 'ls' inside g:fzf_history_dir.\n\" The name is ignored if g:fzf_history_dir is not defined.\ncommand! -bang -complete=dir -nargs=? LS\n    \\ call fzf#run(fzf#wrap('ls', {'source': 'ls', 'dir': &lt;q-args&gt;}, &lt;bang&gt;0))\n\n1.5.1 Global options supported by fzf#wrap\n\ng:fzf_layout\ng:fzf_action\n\nWorks only when no custom sink (or sinklist) is provided\n\nHaving custom sink usually means that each entry is not an ordinary file path (e.g. name of color scheme), so we can’t blindly apply the same strategy (i.e. tabedit some-color-scheme doesn’t make sense)\n\n\ng:fzf_colors\ng:fzf_history_dir"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#tips",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#tips",
    "title": "",
    "section": "1.6 Tips",
    "text": "1.6 Tips\n\n1.6.1 fzf inside terminal buffer\nOn the latest versions of Vim and Neovim, fzf will start in a terminal buffer. If you find the default ANSI colors to be different, consider configuring the colors using g:terminal_ansi_colors in regular Vim or g:terminal_color_x in Neovim.\n\" Terminal colors for seoul256 color scheme\nif has('nvim')\n  let g:terminal_color_0 = '#4e4e4e'\n  let g:terminal_color_1 = '#d68787'\n  let g:terminal_color_2 = '#5f865f'\n  let g:terminal_color_3 = '#d8af5f'\n  let g:terminal_color_4 = '#85add4'\n  let g:terminal_color_5 = '#d7afaf'\n  let g:terminal_color_6 = '#87afaf'\n  let g:terminal_color_7 = '#d0d0d0'\n  let g:terminal_color_8 = '#626262'\n  let g:terminal_color_9 = '#d75f87'\n  let g:terminal_color_10 = '#87af87'\n  let g:terminal_color_11 = '#ffd787'\n  let g:terminal_color_12 = '#add4fb'\n  let g:terminal_color_13 = '#ffafaf'\n  let g:terminal_color_14 = '#87d7d7'\n  let g:terminal_color_15 = '#e4e4e4'\nelse\n  let g:terminal_ansi_colors = [\n    \\ '#4e4e4e', '#d68787', '#5f865f', '#d8af5f',\n    \\ '#85add4', '#d7afaf', '#87afaf', '#d0d0d0',\n    \\ '#626262', '#d75f87', '#87af87', '#ffd787',\n    \\ '#add4fb', '#ffafaf', '#87d7d7', '#e4e4e4'\n  \\ ]\nendif\n\n\n1.6.2 Starting fzf in a popup window\n\" Required:\n\" - width [float range [0 ~ 1]] or [integer range [8 ~ ]]\n\" - height [float range [0 ~ 1]] or [integer range [4 ~ ]]\n\"\n\" Optional:\n\" - xoffset [float default 0.5 range [0 ~ 1]]\n\" - yoffset [float default 0.5 range [0 ~ 1]]\n\" - relative [boolean default v:false]\n\" - border [string default 'rounded']: Border style\n\"   - 'rounded' / 'sharp' / 'horizontal' / 'vertical' / 'top' / 'bottom' / 'left' / 'right'\nlet g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }\nAlternatively, you can make fzf open in a tmux popup window (requires tmux 3.2 or above) by putting --tmux option value in tmux key.\n\" See `--tmux` option in `man fzf` for available options\n\" [center|top|bottom|left|right][,SIZE[%]][,SIZE[%]]\nif exists('$TMUX')\n  let g:fzf_layout = { 'tmux': '90%,70%' }\nelse\n  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }\nendif\n\n\n1.6.3 Hide statusline\nWhen fzf starts in a terminal buffer, the file type of the buffer is set to fzf. So you can set up FileType fzf autocmd to customize the settings of the window.\nFor example, if you open fzf on the bottom on the screen (e.g. {'down': '40%'}), you might want to temporarily disable the statusline for a cleaner look.\nlet g:fzf_layout = { 'down': '30%' }\nautocmd! FileType fzf\nautocmd  FileType fzf set laststatus=0 noshowmode noruler\n  \\| autocmd BufLeave &lt;buffer&gt; set laststatus=2 showmode ruler"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#license",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/fzf/README-VIM.html#license",
    "title": "",
    "section": "1.7 License",
    "text": "1.7 License\nThe MIT License (MIT)\nCopyright (c) 2013-2024 Junegunn Choi"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#unreleased",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#unreleased",
    "title": "",
    "section": "1.1 0.12 - Unreleased",
    "text": "1.1 0.12 - Unreleased\n\nNew features\n\nExtensions:\n\npoetv support\nvim-lsp support\nzoomwintab support\nVaffle support\nvim-dirvish support\nfzf.vim support\nOmniSharp support\nsearchcount support\nfern.vim support\nVim-CMake support\nbattery.vim support\nnvim-lspconfig support\ngen_tags.vim support\nAscii Scrollbar support\n\n\nImprovements\n\ngit branch can also be displayed using gina.vim\ncoc extensions can also show additional status messages as well as the current function\ncoc-git extension integrated into hunks extension\nrewrote parts using Vim9 Script for performance improvements\n\nOther\n\nChanged CI from travis-ci.org to GitHub Actions\nIntroduce Vim script static analysis using reviewdog\nAdded multiple Vim versions to unit tests using Travis CI\nAdded option to show short paths in the status line"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section",
    "title": "",
    "section": "1.2 0.11 - 2019-11-10",
    "text": "1.2 0.11 - 2019-11-10\n\nNew features\n\nExtensions:\n\nCoc support\nDefx support\ngina support\nvim-bookmark support\nvista.vim support\ntabws support for the tabline\n\n\nImprovements\n\nThe statusline can be configured to be shown on top (in the tabline) Set the g:airline_statusline_ontop to enable this experimental feature.\nIf buffer_idx_mode=2, up to 89 mappings will be exposed to access more buffers directly (issue #1823)\nAllow to use random as special theme name, which will switch to a random airline theme (at least if a random number can be generated :()\nThe branch extensions now also displays whether the repository is in a clean state (will append a ! or ⚡if the repository is considered dirty).\nThe whitespace extensions will also check for conflict markers\n:AirlineRefresh command now takes an additional ! attribute, that skips recreating the highlighting groups (which might have a serious performance impact if done very often, as might be the case when the configuration variable airline_skip_empty_sections is active).\nairline can now also detect multiple cursor mode (issue #1933)\nexpose hunks output using the function airline#extensions#hunks#get_raw_hunks() to the outside #1877\nexpose wordcount affected filetype list to the public using the airline#extensions#wordcount#filetypes variable #1887\nfor the :AirlineExtension command, indicate whether the extension has been loaded from an external source #1890\ncorrectly load custom wordcount formatters #1896\nadd a new short_path formatter for the tabline #1898\nseveral improvements to the branch, denite and tabline extension, as well as the async code for Vim and Neovim\nthe term extension supports neoterm vim plugin"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-1",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-1",
    "title": "",
    "section": "1.3 0.10 - 2018-12-15",
    "text": "1.3 0.10 - 2018-12-15\n\nNew features\n\nExtensions:\n\nLanguageClient\nvim-gutentags\nvim-localsearch\nxtabline\nvim-grepper\n\nAdd custom AirlineModeChanged autocommand, allowing to call user defined commands whenever airline displays a different mode\nNew :AirlineExtensions command, to show which extensions have been loaded\nDetect several new modes (e.g. completion, virtual replace, etc)\n\nImprovements\n\nVarious performance improvements, should Vim keep responsive, even when many highlighting groups need to be re-created\nRework tabline extension\nRefactor vim-ctrlspace extension\nRefactor the wordcount extension\nReworked the po extension\nAllow to disable line numbers for the Ale Extension\nfugitive plugin has been refactored causing adjustments for vim-airline, also uses Fugitives new API calls\nsome improvements to Vims terminal mode\nAllow to use alternative separators for inactive windows (#1236)\nStatusline can be set to inactive, whenever Vim loses focus (using FocusLost autocommand)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-2",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-2",
    "title": "",
    "section": "1.4 0.9 - 2018-01-15",
    "text": "1.4 0.9 - 2018-01-15\n\nChanges\n\nLook of default Airline Symbols has been improved #1397\nAirline does now set laststatus=2 if needed\nSyntastic extension now displays warnings and errors separately\nUpdates on Resize and SessionLoad events\nAdd maxlinenr symbol to airline_section_z\nAdd quickfix title to inactive windows\n\nImprovements\n\nMany performance improvements (using caching and async feature when possible)\nCache changes to highlighting groups if g:airline_highlighting_cache = 1 is set\nAllow to skip empty sections by setting g:airline_skip_empty_sections variable\nMake use of improved Vim Script API, if available (e.g. getwininfo())\nSupport for Vims terminal feature (very experimental since it hasn’t been stabilized yet)\nMore configuration for the tabline extension (with clickable buffers for Neovim)\nWorks better on smaller window sizes\nMake airline aware of git worktrees\nImprovements to the fugitive extension #1603\nAllows for configurable fileformat output if g:airline#parts#ffenc#skip_expected_string is set\nImprovements to the documentation\n\nNew features\n\nFull async support for Vim 8 and Neovim\nExtensions:\n\nvim-bufmru\nxkb-switch\ninput-source-switcher\nvimagit\ndenite\ndein\nvimtex\nminpac\nvim-cursormode\nNeomake\nAle\nvim-obsession\nspell (can also display Spell language)\nkeymap\n\nFormatters:\n\nFormatters for JavaScript #1617\nTabline: Allow for custom formatter for tab_nr_type #1418\nCustomizable wordcount formatter #1584\n\nAdd User autocommand for Theme changing #1226\nShows mercurial mq status if hg mq extension is enabled"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-3",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-3",
    "title": "",
    "section": "1.5 0.8 - 2016-03-09",
    "text": "1.5 0.8 - 2016-03-09\n\nChanges\n\nAirline converted to an organization and moved to new repository\nThemes have been split into a separate repository vim-airline-themes\n\nImprovements\n\nExtensions\n\nbranch: support Git and Mercurial simultaneously, untracked files\nwhitespace: new mixed-indent rule\n\nWindows support\nMany bug fixes\nSupport for Neovim\n\nNew features\n\nMany new themes\nExtensions/integration\n\ntaboo\nvim-ctrlspace\nquickfixsigns\nYouCompleteMe\npo.vim\nunicode.vim\nwordcount\ncrypt indicator\nbyte order mark indicator\n\nTabline’s tab mode can display splits simultaneously"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-4",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-4",
    "title": "",
    "section": "1.6 0.7 - 2014-12-10",
    "text": "1.6 0.7 - 2014-12-10\n\nNew features\n\naccents support; allowing multiple colors/styles in the same section\nextensions: eclim\nthemes: understated, monochrome, murmur, sol, lucius\n\nImprovements\n\nsolarized theme; support for 8 color terminals\ntabline resizes dynamically based on number of open buffers\nmiscellaneous bug fixes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-5",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-5",
    "title": "",
    "section": "1.7 0.6 - 2013-10-08",
    "text": "1.7 0.6 - 2013-10-08\n\nNew features\n\naccents support; allowing multiple colors/styles in the same section\nextensions: eclim\nthemes: understated, monochrome, murmur, sol, lucius\n\nImprovements\n\nsolarized theme; support for 8 color terminals\ntabline resizes dynamically based on number of open buffers\nmiscellaneous bug fixes"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-6",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-6",
    "title": "",
    "section": "1.8 0.5 - 2013-09-13",
    "text": "1.8 0.5 - 2013-09-13\n\nNew features\n\nsmart tabline extension which displays all buffers when only one tab is visible\nautomatic section truncation when the window resizes\nsupport for a declarative style of configuration, allowing parts to contain metadata such as minimum window width or conditional visibility\nthemes: zenburn, serene\n\nOther\n\na sizable chunk of vim-airline is now running through a unit testing suite, automated via Travis CI"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-7",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-7",
    "title": "",
    "section": "1.9 0.4 - 2013-08-26",
    "text": "1.9 0.4 - 2013-08-26\n\nNew features\n\nintegration with csv.vim and vim-virtualenv\nhunks extension for vim-gitgutter and vim-signify\nautomatic theme switching with matching colorschemes\ncommands: AirlineToggle\nthemes: base16 (all variants)\n\nImprovements\n\nintegration with undotree, tagbar, and unite\n\nOther\n\nrefactored core and exposed statusline builder and pipeline\nall extension related g:airline_variables have been deprecated in favor of g:airline#extensions# variables\nextensions found in the runtimepath outside of the default distribution will be automatically loaded"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-8",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-8",
    "title": "",
    "section": "1.10 0.3 - 2013-08-12",
    "text": "1.10 0.3 - 2013-08-12\n\nNew features\n\nfirst-class integration with tagbar\nwhite space detection for trailing spaces and mixed indentation\nintroduced warning section for syntastic and white space detection\nimproved ctrlp integration: colors are automatically selected based on the current airline theme\nnew themes: molokai, bubblegum, jellybeans, tomorrow\n\nBug fixes\n\nimproved handling of eventignore used by other plugins\n\nOther\n\ncode cleaned up for clearer separation between core functionality and extensions\nintroduced color extraction from highlight groups, allowing themes to be generated off of the active colorscheme (e.g. jellybeans and tomorrow)\nLicense changed to MIT"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-9",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-9",
    "title": "",
    "section": "1.11 0.2 - 2013-07-28",
    "text": "1.11 0.2 - 2013-07-28\n\nNew features\n\niminsert detection\nintegration with vimshell, vimfiler, commandt, lawrencium\nenhanced bufferline theming\nsupport for ctrlp theming\nsupport for custom window excludes\n\nNew themes - luna and wombat\nBug fixes - refresh branch name after switching with a shell command"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-10",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-airline/CHANGELOG.html#section-10",
    "title": "",
    "section": "1.12 0.1 - 2013-07-17",
    "text": "1.12 0.1 - 2013-07-17\n\nInitial release\n\nintegration with other plugins: netrw, unite, nerdtree, undotree, gundo, tagbar, minibufexplr, ctrlp\nsupport for themes: 8 included"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#alignment-around-whitespaces",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#alignment-around-whitespaces",
    "title": "",
    "section": "1.1 Alignment around whitespaces",
    "text": "1.1 Alignment around whitespaces\nYou can align text around whitespaces with &lt;space&gt; delimiter key.\nStart the interactive mode as described above (gaip or vipga) and try these commands:\n\n&lt;space&gt;\n2&lt;space&gt;\n*&lt;space&gt;\n-&lt;space&gt;\n-2&lt;space&gt;\n&lt;Enter&gt;&lt;space&gt;\n&lt;Enter&gt;*&lt;space&gt;\n&lt;Enter&gt;&lt;Enter&gt;*&lt;space&gt;\n\n\n1.1.1 Example\n\nPaul McCartney 1942\nGeorge Harrison 1943\nRingo Starr 1940\nPete Best 1941"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#formatting-table",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#formatting-table",
    "title": "",
    "section": "1.2 Formatting table",
    "text": "1.2 Formatting table\nAgain, start the interactive mode and try these commands:\n\n*|\n**|\n&lt;Enter&gt;*|\n&lt;Enter&gt;**|\n&lt;Enter&gt;&lt;Enter&gt;*|\n\n\n1.2.1 Example\n\n| Option| Type | Default | Description |\n|--|--|--|--|\n| threads | Fixnum | 1 | number of threads in the thread pool |\n|queues |Fixnum | 1 | number of concurrent queues |\n|queue_size | Fixnum | 1000 | size of each queue |\n|   interval | Numeric | 0 | dispatcher interval for batch processing |\n|batch | Boolean | false | enables batch processing mode |\n |batch_size | Fixnum | nil | number of maximum items to be assigned at once |\n |logger | Logger | nil | logger instance for debug logs |"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#alignment-around",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#alignment-around",
    "title": "",
    "section": "1.3 Alignment around =",
    "text": "1.3 Alignment around =\nThe default rule for delimiter key = aligns around a whole family of operators containing = character.\nTry these commands in the interactive mode.\n\n=\n*=\n**=\n&lt;Enter&gt;**=\n&lt;Enter&gt;&lt;Enter&gt;*=\n\n\n1.3.1 Example\n\na =\na = 1\nbbbb = 2\nccccccc = 3\nccccccccccccccc\nddd = 4\neeee === eee = eee = eee=f\nfff = ggg += gg &&= gg\ng != hhhhhhhh == 888\ni   := 5\ni     %= 5\ni       *= 5\nj     =~ 5\nj   &gt;= 5\naa      =&gt;         123\naa &lt;&lt;= 123\naa        &gt;&gt;= 123\nbbb               =&gt; 123\nc     =&gt; 1233123\nd   =&gt;      123\ndddddd &&= 123\ndddddd ||= 123\ndddddd /= 123\ngg &lt;=&gt; ee"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#formatting-yaml-or-json",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#formatting-yaml-or-json",
    "title": "",
    "section": "1.4 Formatting YAML (or JSON)",
    "text": "1.4 Formatting YAML (or JSON)\nYou can use :-rule here to align text around only the first occurrences of colons. In this case, you don’t want to align around all the colons: *:.\nmysql:\n  # JDBC driver for MySQL database:\n  driver: com.mysql.jdbc.Driver\n  # JDBC URL for the connection (jdbc:mysql://HOSTNAME/DATABASE)\n  url: jdbc:mysql://localhost/test\n  database: test\n  \"user:pass\":r00t:pa55"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#formatting-multi-line-method-chaining",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#formatting-multi-line-method-chaining",
    "title": "",
    "section": "1.5 Formatting multi-line method chaining",
    "text": "1.5 Formatting multi-line method chaining\nTry . or *. on the following lines.\nmy_object\n      .method1().chain()\n    .second_method().call()\n      .third().call()\n     .method_4().execute()\nNotice that the indentation is adjusted to match the shortest one among those of the lines starting with the delimiter.\nmy_object\n    .method1()      .chain()\n    .second_method().call()\n    .third()        .call()\n    .method_4()     .execute()"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#using-blockwise-visual-mode-or-negative-n-th-parameter",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#using-blockwise-visual-mode-or-negative-n-th-parameter",
    "title": "",
    "section": "1.6 Using blockwise-visual mode or negative N-th parameter",
    "text": "1.6 Using blockwise-visual mode or negative N-th parameter\nYou can try either: - select text around =&gt; in blockwise-visual mode (CTRL-V) and ga= - or gaip-=\noptions = { :caching =&gt; nil,\n            :versions =&gt; 3,\n            \"cache=blocks\" =&gt; false }.merge(options)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#commas",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#commas",
    "title": "",
    "section": "1.7 Commas",
    "text": "1.7 Commas\nThere is also a predefined rule for commas, try *,.\naaa,   bb,c\nd,eeeeeee\nfffff, gggggggggg,\nh, ,           ii\nj,,k"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#ignoring-delimiters-in-comments-or-strings",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#ignoring-delimiters-in-comments-or-strings",
    "title": "",
    "section": "1.8 Ignoring delimiters in comments or strings",
    "text": "1.8 Ignoring delimiters in comments or strings\nDelimiters highlighted as comments or strings are ignored by default, try gaip*= on the following lines.\n\n/* a */ b = c\naa &gt;= bb\n// aaa = bbb = cccc\n/* aaaa = */ bbbb   === cccc   \" = dddd = \" = eeee\naaaaa /* bbbbb */      == ccccc /* != eeeee = */ === fffff\nThis only works when syntax highlighting is enabled."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#aligning-in-line-comments",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#aligning-in-line-comments",
    "title": "",
    "section": "1.9 Aligning in-line comments",
    "text": "1.9 Aligning in-line comments\nNote: Since the current version provides ‘#’-rule as one of the default rules, you can ignore this section.\napple = 1 # comment not aligned\nbanana = 'Gros Michel' # comment 2\nSo, how do we align the trailing comments in the above lines? Simply try -&lt;space&gt;. The spaces in the comments are ignored, so the trailing comment in each line is considered to be a single chunk.\nBut that doesn’t work in the following case.\napple = 1 # comment not aligned\napricot = 'DAD' + 'F#AD'\nbanana = 'Gros Michel' # comment 2\nThat is because the second line doesn’t have trailing comment, and the last (-) space for that line is the one just before 'F#AD'.\nSo, let’s define a custom mapping for #.\nif !exists('g:easy_align_delimiters')\n  let g:easy_align_delimiters = {}\nendif\nlet g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }\nNotice that the rule overrides ignore_groups attribute in order not to ignore delimiters highlighted as comments.\nThen on #, we get\napple = 1         # comment not aligned\napricot = 'DAD' + 'F#AD'\nbanana = 'string' # comment 2\nIf you don’t want to define the rule, you can do the same with the following command:\n\" Using regular expression /#/\n\" - \"ig\" is a shorthand notation of \"ignore_groups\"\n:EasyAlign/#/{'ig':['String']}\n\n\" Or more concisely with the shorthand notation;\n:EasyAlign/#/ig['String']\nIn this case, the second line is ignored as it doesn’t contain a # (The one in 'F#AD' is ignored as it’s highlighted as String). If you don’t want the second line to be ignored, there are three options:\n\nSet global g:easy_align_ignore_unmatched flag to 0\nUse :EasyAlign command with ignore_unmatched option\nUpdate the alignment rule with ignore_unmatched option\n\n\" 1. Set global g:easy_align_ignore_unmatched to zero\nlet g:easy_align_ignore_unmatched = 0\n\n\" 2. Using :EasyAlign command with ignore_unmatched option\n\" 2-1. Using predefined rule with delimiter key #\n\"      - \"iu\" is expanded to \"*i*gnore_*u*nmatched\"\n:EasyAlign#{'iu':0}\n\" or\n:EasyAlign#iu0\n\n\" 2-2. Using regular expression /#/\n:EasyAlign/#/ig['String']iu0\n\n\" 3. Update the alignment rule with ignore_unmatched option\nlet g:easy_align_delimiters['#'] = {\n  \\ 'pattern': '#', 'ignore_groups': ['String'], 'ignore_unmatched': 0 }\nThen we get,\napple = 1                # comment not aligned\napricot = 'DAD' + 'F#AD'\nbanana = 'string'        # comment 2"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#aligning-c-style-variable-definition",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vim-easy-align/EXAMPLES.html#aligning-c-style-variable-definition",
    "title": "",
    "section": "1.10 Aligning C-style variable definition",
    "text": "1.10 Aligning C-style variable definition\nTake the following example:\nconst char* str = \"Hello\";\nint64_t count = 1 + 2;\nstatic double pi = 3.14;\nWe can align these lines with the predefined = rule. Select the lines and press ga=\nconst char* str  = \"Hello\";\nint64_t count    = 1 + 2;\nstatic double pi = 3.14;\nNot bad. However, the names of the variables, str, count, and pi are not aligned with each other. Can we do better? We can clearly see that simple &lt;space&gt;-rule won’t properly align those names. So let’s define an alignment rule than can handle this case.\nlet g:easy_align_delimiters['d'] = {\n\\ 'pattern': '\\(const\\|static\\)\\@&lt;! ',\n\\ 'left_margin': 0, 'right_margin': 0\n\\ }\nThis new rule aligns text around spaces that are not preceded by const or static. Let’s select the lines and try gad.\nconst char*   str = \"Hello\";\nint64_t       count = 1 + 2;\nstatic double pi = 3.14;\nOkay, the names are now aligned. We select the lines again with gv, and then press ga= to finish our alignment.\nconst char*   str   = \"Hello\";\nint64_t       count = 1 + 2;\nstatic double pi    = 3.14;\nSo far, so good. However, this rule is not sufficient to handle more complex cases involving C++ templates or Java generics. Take the following example:\nconst char* str = \"Hello\";\nint64_t count = 1 + 2;\nstatic double pi = 3.14;\nstatic std::map&lt;std::string, float&gt;*    scores = pointer;\nWe see that our rule above doesn’t work anymore.\nconst char*                  str = \"Hello\";\nint64_t                      count = 1 + 2;\nstatic double                pi = 3.14;\nstatic std::map&lt;std::string, float&gt;*    scores = pointer;\nSo what do we do? Let’s try to improve our alignment rule.\nlet g:easy_align_delimiters['d'] = {\n\\ 'pattern': ' \\ze\\S\\+\\s*[;=]',\n\\ 'left_margin': 0, 'right_margin': 0\n\\ }\nNow the new rule has changed to align text around spaces that are followed by some non-whitespace characters and then an equals sign or a semi-colon. Try vipgad\nconst char*                          str = \"Hello\";\nint64_t                              count = 1 + 2;\nstatic double                        pi = 3.14;\nstatic std::map&lt;std::string, float&gt;* scores = pointer;\nWe’re right on track, now press gvga= and voila!\nconst char*                          str    = \"Hello\";\nint64_t                              count  = 1 + 2;\nstatic double                        pi     = 3.14;\nstatic std::map&lt;std::string, float&gt;* scores = pointer;"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/DOCUMENTATION.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/DOCUMENTATION.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/DOCUMENTATION.html#vimtex.vim",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/DOCUMENTATION.html#vimtex.vim",
    "title": "",
    "section": "6.1 vimtex.vim",
    "text": "6.1 vimtex.vim\nThis file defines the main entry point vimtex#init(), which is responsible for loading all of the VimTeX functionalities, except:\n\nsyntax highlighting is loaded from syntax/tex.vim\nindentation is loaded from indent/tex.vim\n\nThe main initialization function calls vimtex#mymodule#init_buffer() for each submodule, if it exists. This function should take care of defining buffer local mappings, commands, and autocommands for the respective submodule.\nThe initialization function also ensures that the current buffer is coupled with a corresponding state dictionary, see autoload/vimtex/state.vim."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/DOCUMENTATION.html#vimtex",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/DOCUMENTATION.html#vimtex",
    "title": "",
    "section": "6.2 vimtex",
    "text": "6.2 vimtex\nThis directory holds the bulk of the VimTeX source code. Each .vim file represents a separate submodule that may provide one or more of the following:\n\na functional API that is used in other parts of VimTeX\nbuffer functionalities (mappings, commands, and/or autocommands)\nstate data\n\n\n6.2.1 state.vim\nThe VimTeX state variable is a dictionary that contains data specific to a single LaTeX project. A project may consist of several buffers for different files, e.g. if the project is a multi-file project (see :help vimtex-multi-file). A submodule may add to the state during initialization with vimtex#mymodule#init_state(state), which takes the state object as a single argument.\n\n\n6.2.2 delim.vim\nThis file defines an API and some buffer mappings for detecting and manipulating the surrounding delimiters.\nThe API is mostly based on the function vimtex#delim#get_surrounding(type). The following is a simple example to detect the surrounding environment. Let | denote the cursor position:\n\\begin{Environment}\n  Some awesome | text\n\\end{Environment}\nExample code for working with the environment delimiter:\n\" The return values are dictionaries\nlet [l:open, l:close] = vimtex#delim#get_surrounding('env_tex')\n\n\" Empty dicts mean we did not find a surrounding environment\nif empty(l:open) | return | endif\n\n\" The dicts have several attributes, the most important are probably these:\necho l:open.name\necho l:open.lnum\necho l:open.cnum\n\n\n6.2.3 cmd.vim\nThis file defines an API and some buffer mappings for detecting and manipulating LaTeX commands.\nThe main API relies on the functions vimtex#cmd#get_*(...), e.g. vimtex#cmd#get_current(). A simple example usage:\nlet l:cmd = vimtex#cmd#get_current()\nif empty(l:cmd) | return | endif\n\necho l:cmd.name\necho l:cmd.pos_start\necho l:cmd.pos_end\necho l:cmd.args\necho l:cmd.opts\n\n\n6.2.4 cache.vim\nThis file implements an API for creating and accessing caches that can be both volatile and persistent, as well as project and buffer local.\nHere’s an example of how to use a cache.\nfunction VimTeXCacheExample()\n  \" create a new cache (if the name doesn't exist yet)\n  \" with an attribute 'number'. So the cache would be like that:\n  \"\n  \"   let l:test = {\n  \"   'number' = 10,\n  \"   }\n  let l:my_cache = vimtex#cache#open('cache_name', {'number' : 10})\n\n  \" change the value in you cache\n  let l:my_cache['number'] = 9001\n\n  \" will print '9001'\n  echo l:my_cache['number']\n\n  \" save your changes\n  \" In general it'll be saved in your `$XDG_CACHE_HOME/vimtex/` directory\n  \" (normally '~/.cache/vimtex') in the appropriate tex-file where you accessed\n  \" cache file.\n  call vimtex#cache#close('cache_name')\nendfunction\n\n\n6.2.5 compiler.vim\nThis submodule defines an API for interacting with LaTeX compiler backends. It also defines the main compiler mappings and commands (e.g. :VimtexCompile).\nEach supported backend is defined in separated scripts under vimtex/autoload/vimtex/compiler/*.vim. These scripts provide vimtex#compiler#mycompiler#init(), which is used to initialize a particular backend - it should return a dictionary object that will be part of the VimTeX state.\nThe main compiler API essentially connects to the specified backend. E.g., if one uses the default latexmk backend, then the top level vimtex#compiler#start() function will essentially call the s:compiler_nvim.start_single() function from vimtex/autolaod/vimtex/compiler/latexmk.vim.\n\n\n6.2.6 debug.vim\nThis standalone script defines a convenience function for internal debugging: vimtex#debug#stacktrace() parses the stacktrace from the v:throwpoint variable (see :h v:throwpoint for more information). If this does not exist, then we forcibly create it and remove the top element. You can try this code as an example:\n\" Save as test.py\nfunction! Test() abort\n  try\n    throw \"Nasty error message is here :D\"\n  catch\n    call vimtex#debug#stacktrace(1)\n  endtry\nendfunction\nNow type :call Test(), and the quickfix window should pop up with the specified error message and the location of the error.\n\n\n6.2.7 complete.vim\nThis script defines the main completion API: vimtex#complete#omnifunc(...). See :help complete-functions for details on how omnifunctions work.\nThe function is relatively advanced and allows different completion mechanisms for different contexts.\nThe complete/ subdirectory contains simple files that lists keywords defined for specific packages or classes. These files are used by the command and environment completers.\nThe complete/tools directory includes a large map between LaTeX commands and unicode glyphs, like \\alpha -&gt; α and \\beta -&gt; β. This is used to enrich the keywords lists under complete/ to add more fancy completion menus.\n\n\n6.2.8 context.vim\nThis script provides a context menu feature (:help :VimtexContextMenu). Each script under autoload/vimtex/context/*.vim defines a specific context and its related actions. See here for a more detailed description of how this is implemented.\nFor instance, the context context/cite.vim defines a citation context (see :help vimtex-context-citation).\n\n\n6.2.9 fold.vim\nThis defines the fold functions for VimTeX. Folding is explained in :help folds. An example of how a folded document may look like:\n\n\n\nfolding example\n\n\nVimTeX defines a custom fold expression, see :help fold-expr. The vimtex#fold#init_state function will apply folding as per the related configuration (see :help vimtex-folding).\nThe fold expression is modularized to allow a relatively high degree of customizability. Each type is defined in its separate file, e.g. autoload/vimtex/fold/envs.vim for folding of environments.\n\n\n6.2.10 parser.vim\nA lot of VimTeX functionalities relies on some type of parsing. This module defines an API for various parsers, both for TeX files and other filetypes (e.g. aux and bib), as well as some specific types of parser (e.g. toc for parsing TeX files for a table of contents).\nThe code for each parser is defined in sub modules, e.g. parser/bib.vim.\nThe vimcomplete.bst file is used by parser/bib.vim in the s:parse_with_bibtex() function. It is used to convert a .bib file to a .bbl file with bibtex - this is useful because the .bbl file generated with this .bst file is very easy to parse.\n\n\n6.2.11 toc.vim\nSpecifies a simple API and buffer mappings/commands for creating a convenient table of contents (TOC) to navigate and inspect a file (:h :VimtexTocToggle for more information).\n\n\n\ntoc example\n\n\n\n\n6.2.12 qf.vim\nThis submodule defines functions and buffer mappings to parse log files and similar and put errors and warnings into the quickfix window (see :help quickfix). The functions are used e.g. by callbacks from the compilers, if supported and enabled, to automatically parse log files and display potential errors after compilation.\nThe files vimtex/autoload/vimtex/qf/*.vim define different types of log parsers. E.g., qf/bibtex.vim is used to parse .blg files for BibTeX related warnings and errors, and qf/latexlog.vim parses .log files for LaTeX warnings and errors. qf/pulp.vim defines an alternative log parser that can be used instead of latexlog.vim. See also :help g:vimtex_quickfix_method.\nHere’s an example of the quickfix list generated by the qf/latexlog.vim script:\n\n\n\nquickfix example\n\n\n\n\n6.2.13 syntax.vim\nThis script implements some convenience functions for the bulk VimTeX code. This may be counter intuitive, so be warned.\nThe idea is that other parts of VimTeX may rely on the syntax state, e.g. to determine if a position is within math mode (vimtex#syntax#in_mathzone(...)).\nThe actual syntax rules are defined in the scripts under syntax/*.vim.\n\n\n6.2.14 syntax\nThis subdirectory contains the main syntax highlighting scripts. The entry point for the syntax scripts are, as mentioned previously, the top level syntax/tex.vim. However, as most of the code, the bulk source is defined in the autoloaded functions.\nIn short: syntax/core.vim implements the core syntax rules, whereas the scripts under syntax/p/ define package specific syntax rules.\n\n\n6.2.15 text_obj.vim\nThis submodule defines text objects, see :help text-objects. Buffer local mappings are created during initialization.\nThe module allows to use different backends, including the popular targets.vim.\n\n\n6.2.16 view.vim\nThis submodule defines the main view API and buffer mappings/commands. That is, mappings and commands to open a PDF viewer for the compiled LaTeX document.\nThe desired PDF viewer is specified with g:vimtex_view_method variable, and the specified viewer is initialized from view/VIEWER.vim (e.g. view/zathura.vim). This does essentially just the following for a given VimTeX state:\nlet a:state.viewer = vimtex#view#{g:vimtex_view_method}#new()\nThat is, if g:vimtex_view_method is zathura, then this calls vimtex#view#zathura#new(). The new() method should return a dictionary object with e.g. a .view() method that is used to open a file with the specified viewer."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/DOCUMENTATION.html#healthvimtex.vim",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/DOCUMENTATION.html#healthvimtex.vim",
    "title": "",
    "section": "6.3 health/vimtex.vim",
    "text": "6.3 health/vimtex.vim\nVimTeX hooks into the health.vim framework provided by neovim (see :help health). This is a utility framework for performing health checks that may help users discover problems with e.g. configuration. VimTeX has a few checks for e.g. Vim versions and configuration validation.\nNote: This is not relevant for regular Vim."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/DOCUMENTATION.html#unitesourcesvimtex.vim",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/DOCUMENTATION.html#unitesourcesvimtex.vim",
    "title": "",
    "section": "6.4 unite/sources/vimtex.vim",
    "text": "6.4 unite/sources/vimtex.vim\nThis script defines a VimTeX table-of-content source for the unite plugin. See :help vimtex-unite for more info."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#table-of-contents",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#table-of-contents",
    "title": "",
    "section": "1.1 Table of contents",
    "text": "1.1 Table of contents\n\n\nMotion commands\n\nNavigating sections\nNavigating environments\nNavigating math zones\nNavigating frames\nNavigating matching delimiters\n\nText objects\n\nThe math text object\nThe section, delimiter, and command text objects\nThe environment and item text objects\n\nDeleting surrounding LaTeX content\n\nDelete surrounding commands\nDelete surrounding environments\nDelete surrounding math zones\nDelete surrounding delimiters\n\nChanging surrounding LaTeX content\n\nChange surrounding commands\nChange surrounding environments\nChange surrounding math zones\nChange surrounding delimiters\n\nToggling commands\n\nToggling starred commands and environments\nToggling between inline and display math\nToggling delimiter modifiers\nToggling fractions\n\nHow these GIFs were made"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#motion-commands",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#motion-commands",
    "title": "",
    "section": "1.2 Motion commands",
    "text": "1.2 Motion commands\n\n1.2.1 Navigating sections\nUse ]] to jump to the beginning of the next \\section, \\subsection or \\subsubsection, whichever comes first. Use [[ to jump backward through sections, and see the similar shortcuts ][ and [] in the VimTeX documentation at :help &lt;Plug&gt;(vimtex-][) and :help &lt;Plug&gt;(vimtex-[]).\n\n\n\nNavigating sections\n\n\n\n\n1.2.2 Navigating environments\nUse ]m and [m to jump to the next or previous environment \\begin{} command. See the VimTeX documentation for the similar shortcuts ]M and [M, described in :help &lt;Plug&gt;(vimtex-]M) and :help &lt;Plug&gt;(vimtex-[M).\n\n\n\nNavigating environments\n\n\n\n\n1.2.3 Navigating math zones\nUse ]n and [n to jump to the beginning of the next or previous math zone. See the VimTeX documentation for the similar shortcuts ]N and [N, described in :help &lt;Plug&gt;(vimtex-]N) and :help &lt;Plug&gt;(vimtex-[N).\n\n\n\nNavigating math zones\n\n\n\n\n1.2.4 Navigating frames\nUse ]r and [r to jump to the beginning of the next or previous Beamer frame environment. See the VimTeX documentation for the similar shortcuts ]R and [R, described in :help &lt;Plug&gt;(vimtex-]R) and :help &lt;Plug&gt;(vimtex-[R).\n\n\n\nNavigating frames\n\n\n\n\n1.2.5 Navigating matching delimiters\nUse % to move between matching delimiters, inline-math $ delimiters, and LaTeX environments.\n\n\n\nNavigating matching delimiters"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#text-objects",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#text-objects",
    "title": "",
    "section": "1.3 Text objects",
    "text": "1.3 Text objects\nVimTeX provides text objects for commands, delimiters, environments, math zones, sections, and items. The following GIFs use Vim’s visual mode to show the scope of the text objects.\n\n1.3.1 The math text object\nThe i$ and a$ text objects select inline math, display math, and common math environments.\n\n\n\nThe math text object\n\n\n\n\n1.3.2 The section, delimiter, and command text objects\nThe iP and aP text objects select LaTeX sections (their subsection variations); the id and ad objects select delimiters (parentheses, brackets, braces…); the ic and ac objects select LaTeX commands.\n\n\n\nThe section, delimiter, and command text objects\n\n\n\n\n1.3.3 The environment and item text objects\nThe ie and ae text objects select LaTeX environments and the im and am objects select items in enumerated environments.\n\n\n\nThe environment and item text objects"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#deleting-surrounding-latex-content",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#deleting-surrounding-latex-content",
    "title": "",
    "section": "1.4 Deleting surrounding LaTeX content",
    "text": "1.4 Deleting surrounding LaTeX content\n\n1.4.1 Delete surrounding commands\nUse dsc to delete a LaTeX command while preserving the command’s argument(s); the dsc mapping also recognizes and correctly deletes parameters inside square brackets.\n\n\n\ndsc\n\n\n\n\n1.4.2 Delete surrounding environments\nUse dse to delete the \\begin{} and \\end{} declaration surrounding a LaTeX environment without changing the environment contents.\n\n\n\ndse\n\n\n\n\n1.4.3 Delete surrounding math zones\nUse ds$ to delete surrounding math zones (display math, standard environments, and inline math) without changing the math contents.\n\n\n\nds$\n\n\n\n\n1.4.4 Delete surrounding delimiters\nUse dsd to delete delimiters (e.g. (), [], {}, and any of their \\left \\right, \\big \\big variants) without changing the enclosed content.\n\n\n\ndsd"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#changing-surrounding-latex-content",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#changing-surrounding-latex-content",
    "title": "",
    "section": "1.5 Changing surrounding LaTeX content",
    "text": "1.5 Changing surrounding LaTeX content\n\n1.5.1 Change surrounding commands\nUse csc to change a LaTeX command while preserving the command’s argument(s).\n\n\n\ncsc\n\n\n\n\n1.5.2 Change surrounding environments\nUse cse to change the type of a LaTeX environment without changing the environment contents.\n\n\n\ncse\n\n\n\n\n1.5.3 Change surrounding math zones\nUse cs$ to change the type of surrounding math zone without changing the math contents. You can switch between display math, standard environments, and inline math.\n\n\n\ncs$\n\n\n\n\n1.5.4 Change surrounding delimiters\nUse csd to change delimiters (e.g. (), [], {}, and any of their \\left \\right, \\big \\big variants) without changing the enclosed content; the csd command is “smart” and correctly recognizes and preserves \\left \\right-style modifiers.\n\n\n\ncsd"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#toggling-commands",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#toggling-commands",
    "title": "",
    "section": "1.6 Toggling commands",
    "text": "1.6 Toggling commands\n\n1.6.1 Toggling starred commands and environments\nUse tsc and tss to toggle between starred and un-starred versions of commands and environments, respectively.\n\n\n\ntsc and tss\n\n\n\n[!NOTE]\ntss used to be tse before v2.16. See the release notes for more info.\n\n\n\n1.6.2 Toggling between inline and display math\nUse ts$ to toggle between inline math, display math, and standard math environments.\n\n\n\nts$\n\n\n\n\n1.6.3 Toggling delimiter modifiers\nUse tsd to change between plain and \\left/\\right versions of delimiters. Use the g:vimtex_delim_toggle_mod_list variable to add more modifiers to the delimiter toggle list. (e.g. \\big as in the GIF below)\n\n\n\ntsd\n\n\n\n\n1.6.4 Toggling fractions\nUse tsf to toggle between inline and \\frac{}{} versions of fractions.\n\n\n\ntsf"
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#how-these-gifs-were-made",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/VISUALS.html#how-these-gifs-were-made",
    "title": "",
    "section": "1.7 How these GIFs were made",
    "text": "1.7 How these GIFs were made\n(Based on interest and discussion in issue #2685.)\nThe basic toolkit is Menyoki for recording the GIFs and screenkey to display the keys being typed, all running on a Linux system using the X11 window system.\nOn top of this are some aesthetic details to make the GIFs look nicer, including:\n\nGoyo to remove Vim peripherals (status bar, line numbers, etc.) for a cleaner look\nLimelight to draw focus to the currently selected paragraph (and gray out the rest of the document)\nScreen recording region (crop, basically) set via Menyoki to exactly capture the terminal window (and not e.g. the rest of my desktop)\nEnlarged terminal font for the duration of the GIF recording for better readability\nVim and screenkey color schemes and fonts aligned for visual consistency.\n\nThe aesthetic details and cropping are wrapped in shell scripts for repeatability across multiple GIF recordings—the original scripts and auxiliary files can be found in the GitHub repo ejmastnak/ejmastnak.github.io, although they might be difficult to parse without additional context.\nFeel free to contact @ejmastnak if you’re interested in the details or recording similar GIFs."
  },
  {
    "objectID": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/test/example-markdown/test.html",
    "href": "posts/share_R_code_via_docker/peng1/vimplugins/vimtex/test/example-markdown/test.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n1 Title\nmath here f(x) = 1\nmath here (f(x) = 1)\nbold text italic text\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{(ryy)_glenn_thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/vimtex/test/example-markdown/test.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/share_R_code_via_docker/peng1/vimplugins/vimtex/test/example-markdown/test.html."
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/CLAUDE.html",
    "href": "posts/shiny_simulation_app/shiny_app/CLAUDE.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#running-the-app",
    "href": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#running-the-app",
    "title": "",
    "section": "1.1 Running the App",
    "text": "1.1 Running the App\n\nLaunch app: shiny::runApp(\"path/to/shiny_app.R\")\nRun functions individually: source(\"corecode.R\") then call specific functions"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#code-style",
    "href": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#code-style",
    "title": "",
    "section": "1.2 Code Style",
    "text": "1.2 Code Style\n\nIndentation: 2 spaces (per .Rproj)\nNaming: camelCase for functions, snake_case for variables\nPackage imports: Place at top of file with library() calls\nConflict resolution: Use conflicts_prefer() when needed"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#code-organization",
    "href": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#code-organization",
    "title": "",
    "section": "1.3 Code Organization",
    "text": "1.3 Code Organization\n\nUI elements in top section, server logic below\nDefine functions before using them\nGroup related functionality together\nStatistical core functions separate from UI components"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#error-handling",
    "href": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#error-handling",
    "title": "",
    "section": "1.4 Error Handling",
    "text": "1.4 Error Handling\n\nUse try-catch blocks: try(expr, silent = TRUE)\nValidate reactive inputs with req()\nAdd input validation with conditionals\nInclude progress indicators for long operations"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#dependencies",
    "href": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#dependencies",
    "title": "",
    "section": "1.5 Dependencies",
    "text": "1.5 Dependencies\n\nCore: shiny, ggplot2, reshape2, DT, dplyr\nUI: shinythemes, shinydashboard, shinyWidgets\nViz: plotly, shinycssloaders, waiter, fresh"
  },
  {
    "objectID": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#best-practices",
    "href": "posts/shiny_simulation_app/shiny_app/CLAUDE.html#best-practices",
    "title": "",
    "section": "1.6 Best Practices",
    "text": "1.6 Best Practices\n\nSet seed for reproducibility: set.seed(42)\nDocument complex functions with header comments\nMaintain clear separation between data processing and visualization\nFollow tidyverse conventions where possible"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Thomas Lab",
    "section": "",
    "text": "I’m Ronald G. Thomas, a researcher and R enthusiast focused on statistical methods and data science tools. This site serves as a collection of technical blog posts, tutorials, and resources related to:\n\nR programming and package development\nStatistical analysis and visualization\nResearch computing workflows\nReproducible research practices\nDocker containerization for data science\nVim/Neovim configurations for data work\n\nBrowse my blog posts for tutorials and technical content, or check the about page to learn more about my work.\n\n\n\n\n\n\n\n\nR package development\nDocker containerization for Shiny apps\nStatistical computing with Quarto\nSetting up reproducible environments\n\n\n\n\n\nGitHub\nTwitter"
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Thomas Lab",
    "section": "",
    "text": "I’m Ronald G. Thomas, a researcher and R enthusiast focused on statistical methods and data science tools. This site serves as a collection of technical blog posts, tutorials, and resources related to:\n\nR programming and package development\nStatistical analysis and visualization\nResearch computing workflows\nReproducible research practices\nDocker containerization for data science\nVim/Neovim configurations for data work\n\nBrowse my blog posts for tutorials and technical content, or check the about page to learn more about my work."
  },
  {
    "objectID": "index.html#latest-posts",
    "href": "index.html#latest-posts",
    "title": "Thomas Lab",
    "section": "2 Latest Posts",
    "text": "2 Latest Posts\n\n\n\n2.1 Docker for Shiny\nLearn how to containerize your Shiny applications for easy deployment and sharing.\nRead more →\n\n\n2.2 Configure Vim for R\nSet up a powerful development environment for R programming with Vim/Neovim.\nRead more →\n\n\n2.3 Lowercasing Dataframes\nEfficiently process multiple dataframes and standardize column names.\nRead more →\n\n\n\nView All Posts"
  },
  {
    "objectID": "index.html#featured-topics",
    "href": "index.html#featured-topics",
    "title": "Thomas Lab",
    "section": "3 Featured Topics",
    "text": "3 Featured Topics\n\n\n3.1 Programming & Development\n\nR package development, functional programming, and data manipulation techniques.\nExplore →\n\n\n3.2 Deployment & Operations\n\nDocker containers, cloud deployment, and secure web hosting solutions.\nExplore →\n\n\n3.3 Development Environment\n\nSetting up Vim/Neovim, terminal tools, and optimized workflows.\nExplore →\n\n\n\n\n3.4 Shiny Applications\n\nInteractive dashboards, statistical tools, and data collection interfaces.\nExplore →\n\n\n3.5 Data Analysis & Visualization\n\nData cleaning, visualization techniques, and statistical analysis.\nExplore →\n\n\n3.6 AI & Automation\n\nLLMs, ChatGPT integration, and research automation tools.\nExplore →"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Blog Posts",
    "section": "",
    "text": "Welcome to my technical blog where I share insights, tutorials, and explorations in R programming, data science, and research computing."
  },
  {
    "objectID": "posts/index.html#explore-by-category",
    "href": "posts/index.html#explore-by-category",
    "title": "Blog Posts",
    "section": "1 Explore by Category",
    "text": "1 Explore by Category\n\nProgramming & Development: R package development, functional programming, object-oriented techniques\nData Analysis & Visualization: Data cleaning, visualization techniques, statistical analysis\nDeployment & Operations: Docker containers, cloud deployment, web hosting\nDevelopment Environment: Vim/Neovim, terminal tools, Git workflows\nShiny Applications: Web applications, interactive dashboards, data collection tools\nAI & Automation: LLMs, ChatGPT integration, research automation\nSystem Administration: Linux, dual-boot configurations, server management ## Introduction\n\nIn development"
  },
  {
    "objectID": "posts/index.html#prerequisites",
    "href": "posts/index.html#prerequisites",
    "title": "Blog Posts",
    "section": "2 Prerequisites",
    "text": "2 Prerequisites\nIn development"
  },
  {
    "objectID": "posts/index.html#step-by-step-implementation",
    "href": "posts/index.html#step-by-step-implementation",
    "title": "Blog Posts",
    "section": "3 Step-by-Step Implementation",
    "text": "3 Step-by-Step Implementation\nIn development"
  },
  {
    "objectID": "posts/index.html#key-takeaways",
    "href": "posts/index.html#key-takeaways",
    "title": "Blog Posts",
    "section": "4 Key Takeaways",
    "text": "4 Key Takeaways\nIn development"
  },
  {
    "objectID": "posts/index.html#further-reading",
    "href": "posts/index.html#further-reading",
    "title": "Blog Posts",
    "section": "5 Further Reading",
    "text": "5 Further Reading\nIn development"
  },
  {
    "objectID": "posts/rct_validation_lang/EDC_Data_Validation.html",
    "href": "posts/rct_validation_lang/EDC_Data_Validation.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/rct_validation_lang/EDC_Data_Validation.html#proprietary-edc-systems-with-built-in-validation",
    "href": "posts/rct_validation_lang/EDC_Data_Validation.html#proprietary-edc-systems-with-built-in-validation",
    "title": "",
    "section": "1.1 1. Proprietary EDC Systems with Built-in Validation",
    "text": "1.1 1. Proprietary EDC Systems with Built-in Validation\n\nMedidata Rave (uses Medidata Rave Edit Check Scripts)\nOracle Clinical / InForm (PL/SQL-based validation)\nIBM Clinical Development\nVeeva Vault EDC\nCastor EDC\nProvide graphical interfaces or scripting languages for validation rules."
  },
  {
    "objectID": "posts/rct_validation_lang/EDC_Data_Validation.html#open-source-edc-systems-with-custom-validation-capabilities",
    "href": "posts/rct_validation_lang/EDC_Data_Validation.html#open-source-edc-systems-with-custom-validation-capabilities",
    "title": "",
    "section": "1.2 2. Open-Source EDC Systems with Custom Validation Capabilities",
    "text": "1.2 2. Open-Source EDC Systems with Custom Validation Capabilities\n\n1.2.1 a. OpenClinica\n\nValidation Features:\n\nReal-time edit checks (range, cross-field, logic-based).\nUses XPath expressions for validation.\n\nExample Implementation:\n&lt;rule&gt;\n    &lt;when&gt;\n        /StudyEventData/FormData/ItemGroupData/ItemData[@ItemOID='AGE'] &gt; 100\n    &lt;/when&gt;\n    &lt;then&gt;\n        &lt;message&gt;Age cannot be greater than 100 years.&lt;/message&gt;\n    &lt;/then&gt;\n&lt;/rule&gt;\nWebsite: openclinica.com\n\n\n\n\n1.2.2 b. REDCap\n\nValidation Features:\n\nReal-time range and logic checks.\nUses branching logic and calculated fields.\nCustom data quality rules via SQL queries.\n\nExample Implementation:\n[age] &gt; 18 AND [age] &lt; 65\nWebsite: projectredcap.org\n\n\n\n\n1.2.3 c. ClinCapture\n\nValidation Features:\n\nJavaScript-based validation for logic and range checks.\nCustom queries to detect missing or inconsistent data.\n\nWebsite: clincapture.com"
  },
  {
    "objectID": "posts/rct_validation_lang/EDC_Data_Validation.html#custom-validation-using-general-purpose-tools",
    "href": "posts/rct_validation_lang/EDC_Data_Validation.html#custom-validation-using-general-purpose-tools",
    "title": "",
    "section": "1.3 3. Custom Validation Using General-Purpose Tools",
    "text": "1.3 3. Custom Validation Using General-Purpose Tools\n\n1.3.1 a. R for Data Validation\n\nLibraries: validate, pointblank\nExample:\nlibrary(validate)\nrules &lt;- validator(\n  age &gt;= 18,\n  bmi &gt;= 15 & bmi &lt;= 50,\n  start_date &lt; end_date\n)\ncheck_results &lt;- confront(data, rules)\nsummary(check_results)\n\n\n\n\n1.3.2 b. Python for Data Validation\n\nLibraries: pandera, cerberus\nExample:\nfrom pandera import DataFrameSchema, Column, Check\n\nschema = DataFrameSchema({\n    \"age\": Column(int, Check(lambda x: 18 &lt;= x &lt;= 65, error=\"Age must be 18-65\")),\n    \"bmi\": Column(float, Check(lambda x: 15 &lt;= x &lt;= 50, error=\"BMI must be realistic\")),\n    \"start_date\": Column(str),\n    \"end_date\": Column(str, Check(lambda x, y: x &lt; y, error=\"Start date must be before end date\"))\n})\n\nvalidated_data = schema.validate(df)\n\n\n\n\n1.3.3 c. SQL for Data Integrity Checks\n\nExample:\nSELECT patient_id, age\nFROM clinical_data\nWHERE age &lt; 18 OR age &gt; 100;"
  },
  {
    "objectID": "posts/rct_validation_lang/EDC_Data_Validation.html#integrating-validation-into-edc-workflows",
    "href": "posts/rct_validation_lang/EDC_Data_Validation.html#integrating-validation-into-edc-workflows",
    "title": "",
    "section": "1.4 4. Integrating Validation into EDC Workflows",
    "text": "1.4 4. Integrating Validation into EDC Workflows\n\nAutomated Validation Pipelines: Apache NiFi, Talend, Pentaho for ETL-based validation.\nFHIR/CDISC Compliance: OpenCDISC Validator for CDISC standards (SDTM/ADaM)."
  },
  {
    "objectID": "posts/rct_validation_lang/EDC_Data_Validation.html#conclusion",
    "href": "posts/rct_validation_lang/EDC_Data_Validation.html#conclusion",
    "title": "",
    "section": "1.5 Conclusion",
    "text": "1.5 Conclusion\n\nFor real-time validation: OpenClinica, REDCap, and ClinCapture provide built-in rule engines.\nFor custom validation: R, Python, and SQL offer greater flexibility. Which approach fits your use case best?"
  },
  {
    "objectID": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html",
    "href": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "",
    "text": "Photo by Nathan Waters"
  },
  {
    "objectID": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#hosting",
    "href": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#hosting",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "2.1 Hosting",
    "text": "2.1 Hosting\nHow to set up the hosting server? There are many ways to accomplish the hosting. Here we’ll describe a straightforward and efficient approach using mainstream cloud services and open source tools. In other words, we’ll describe how to ‘spin’ up a virtual server on Amazon Web Service EC2, and use Docker, R, Shiny, and Caddy to put in place a secure web app to share with our colleagues.\n\n\n\nData flow\n\n\nFigure 2 illustrates the tools we’ll use and the flow of program and configuration files. In order to host power1_app online we’ll need to complete the following tasks:\nHosting List\n\nGenerate a virtual server with a firewall on EC2.\nObtain a static IPv4 address (to identify the server online)\nObtain a custom domain name (a name to associate with static IP address) from a domain registration provider.\nInstall and configure a webserver ( a tool to interact with https protocol requests )\nObtain and install a TLS (transport layer security) security certificate (to allow encrypted communication between the server and other machines on the network).\nConfigure user authentication for the web site.\nconfigure a reverse proxy method (to translate https, port 443, requests to Shiny, port 3838 requests).\n\n\n\n“What Is An SSL/TLS Certificate?\nAn SSL/TLS certificate is a digital object that allows systems to verify the identity & subsequently establish an encrypted network connection to another system using the Secure Sockets Layer/Transport Layer Security (SSL/TLS) protocol. Certificates are used within a cryptographic system known as a public key infrastructure (PKI). PKI provides a way for one party to establish the identity of another party using certificates if they both trust a third-party - known as a certificate authority. SSL/TLS certificates thus act as digital identity cards to secure network communications, establish the identity of websites over the Internet as well as resources on private networks.”\n reference"
  },
  {
    "objectID": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#select-a-hosting-service",
    "href": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#select-a-hosting-service",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "2.2 Select a hosting service",
    "text": "2.2 Select a hosting service\nThere are a number of cloud based server options we can choose from: Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nIn this post we’ll describe the process using AWS EC2. Detailed instructions for setting up a server on EC2, both via the console and the command line interface are covered in earlier posts ( here ) and ( here ).\nStep 0. Create an account or sign in to the AWS EC2 dashboard.\nStep 1. Set up an working environment with AWS server. This entails:\n\ndefine an ssh key-pair.\nconfigure a firewall.\nobtain a static IP.\nobtain a domain name.\nselect an instance (AMI, type and disk size), generate and launch server.\n\nOnce the server is available, connect via ssh, and login,\nThe only software necessary to install is docker (assuming it wasn’t installed in the server setup process). Install docker with the following commands:\nsudo snap install docker.io\nOnce the host is set up and docker installed, we’ll have accomplished items 1, 2, and 3 from our hosting list above. i.e. a customized virtual server wtih a static IP address, with a unique domain name and firewall are in place."
  },
  {
    "objectID": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#docker",
    "href": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#docker",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "3.1 Docker",
    "text": "3.1 Docker\n\n\n  Photo by Ian Taylor on Unsplash \nWe’ll use docker to access Shiny, and docker-compose to access Caddy, our webserver. The first file is the dockerfile. Here is our minimal dockerfile:\n\nshow the Dockerfile code\nFROM rocker/shiny:4.2.0\nRUN rm -rf /srv/shiny-server\nCOPY /power1_shiny/* /srv/shiny-server/\nUSER shiny\nCMD [\"/usr/bin/shiny-server\"]\n\nThis configuration file instructs Docker to build a container based on a Rocker/Shiny image (constructed as a ubuntu image with R and Shiny installed), then copy the power1_shiny/app.R code into the container and finally launch Shiny on (default) port 3838. We placed the power1_app/app.R code in the default location /srv/shiny-server we only need to start the server and it will find the shiny program.\nNote: We placed the power1_shiny/app.R code in the default location /srv/shiny-server so we only need to start the Shiny server and it will find the shiny program\nStart by building and pushing the image to the gitlab container registry.\n# login to gitlab\n\ncat gitlab_access_token | docker login \\\nregistry.gitlab.com -u rgt47 --password-stdin\n\ndocker build -t \\\nregistry.gitlab.com/rgt47/power1_app/power1_image:v1.0 \\\n        --platform linux/x86_64 .\ndocker push \\\nregistry.gitlab.com/rgt47/power1_app/power1_image:v1.0"
  },
  {
    "objectID": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#caddy",
    "href": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#caddy",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "3.2 Caddy",
    "text": "3.2 Caddy\nA Caddy web server configuration file (default name Caddyfile)\nWe’ll use Caddy as our web server. Caddy is an open-source tool that has the very useful feature of automating the acquisition and installing of an SSL certificate. An SSL cert is required by most browsers to use the encrypted communication protocol https.\nWe use the caddy configuration file to specify three critical things.\n\nthe site domain name.\nthe ‘reverse proxy’ map that redirects requests to port 443 (ssl port) to port 3838 (Shiny port).\nadd login credentials for all users (e.g. bob/vanilla47):\n\nOur barebones Caddyfile looks like this:\n\nShow the Caddyfile code\n# use caddy auth tool to generate a password via the `bcrypt` algorithm.\n# &gt; caddy hash-password --plaintext hiccup\n\nrgtlab.org {\nbasicauth /power1/* {\n    Bob $2a$14$Zkx19XLiW6VYouLHR5NmfOFU0z2GTNmpkT/5qqR7hx4IjWJPDhjvG\n}\n    root * /srv\n    handle_path /power1/* {\n        reverse_proxy power1:3838\n    }\n    file_server\n}\n\nWe can accomplish what we need for items 4, 5, and 7 through the Caddyfile.\nNote:\n\nrgtlab.org is our domain name\nhandle_path maps all https requests to port 3838 where Shiny is listening.\n\nProviding our servers domain name, rgtlab.org is sufficient to initiate an exchange with the letsencrypt service to generates an SSL certificate."
  },
  {
    "objectID": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#docker-compose",
    "href": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#docker-compose",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "3.3 Docker Compose",
    "text": "3.3 Docker Compose\nAnd a third file is a config file for Docker Compose. Docker Compose is a Docker module that provides a framework for running multi-container applications. This docker compose YAML file instructs Docker to containerize our Shiny app, pull a caddy webserver image from Docker Hub and create a local network for the two containers to communicate in.\nA Docker-compose configuration file (default name docker-compose.yml).\nThe docker-compose.yml file:\n\ndocker-compose.yml. Show the code\nversion: \"3.7\"\n\nservices:\n  power1:\n    image: registry.gitlab.com/rgt47/power1_app/power1_image:v1.0\n    restart: unless-stopped\n    expose:\n      - \"3838\"\n  caddy:\n    image: caddy:2.6.4-alpine\n    restart: always\n    ports:\n      - \"443:443\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - $PWD/site:/srv\n      - caddy_data:/data\n      - caddy_config:/config\n    depends_on:\n      - power1\n    environment:\n      - HOST=\"rgtlab.org\"\n      - EMAIL=\"rgthomas@ucsd.edu\"\nvolumes:\n  caddy_data:\n  caddy_config:"
  },
  {
    "objectID": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#landing-page",
    "href": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#landing-page",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "3.4 Landing Page",
    "text": "3.4 Landing Page\nLastly, we need an html file, index.html in a subdirectory named site that provides the landing page for our server.\n\nindex.html. Show the code\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;Power Calculators&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/bulma@0.9.0/css/bulma.min.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"app\"&gt;\n      &lt;section class=\"hero is-small\"&gt;\n        &lt;div class=\"hero-body\"&gt;\n          &lt;div class=\"container has-text-centered\"&gt;\n            &lt;h1 class=\"title\"&gt;RGT Lab Power Calculators&lt;/h1&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/section&gt;\n            &lt;hr&gt;\n\n            &lt;div class=\"columns\"&gt;\n              &lt;div class=\"column is-4 is-offset-1\"&gt;\n      &lt;img src=\"https://github.com/rgt47/power0/blob/master/power1.png?raw=true\"\n        width=\"200\" height=\"250\"  ”float: left; padding: 3px 3px 0px 3px;” &gt;\n              &lt;/div&gt;\n              &lt;div class=\"column is-6\"&gt;\n                &lt;h1 class=\"title\"&gt; Power1 App &lt;/h1&gt;\n                &lt;p&gt; Power for two-sample t-test &lt;/p&gt;\n                &lt;br&gt;\n                &lt;a href=\"./rebecca/\" class=\"button is-info\"&gt;Go to app&lt;/a&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\nAt this point our power1_app repo looks like this:\n.\n├── Caddyfile\n├── Dockerfile\n├── docker-compose.yml\n└── site\n    └── index.html"
  },
  {
    "objectID": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#tip-1.-docker-on-m1-macbook.",
    "href": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#tip-1.-docker-on-m1-macbook.",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "5.1 Tip 1. Docker on M1 macbook.",
    "text": "5.1 Tip 1. Docker on M1 macbook.\nTo get docker functioning properly with rocker images on M1 Mac desktop use --platform option.\ndocker build -t power1_shiny --platform linux/x86_64 .\ndocker run -d -p 80:3838 --platform linux/x86_64 power1_shiny"
  },
  {
    "objectID": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#tip-2-add-user-to-docker-group-on-server.",
    "href": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#tip-2-add-user-to-docker-group-on-server.",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "5.2 Tip 2 add user to docker group on server.",
    "text": "5.2 Tip 2 add user to docker group on server.\nAdd ubuntu to the docker group to allow docker to run without sudo.\nsudo usermod -aG docker ${USER}"
  },
  {
    "objectID": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#tip-3-ssh-config-file.",
    "href": "posts/dockerize_compose/index (zzlenovo's conflicted copy 2025-02-20).html#tip-3-ssh-config-file.",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "5.3 Tip 3 ssh config file.",
    "text": "5.3 Tip 3 ssh config file.\nFor convenience, construct a config file in ~/.ssh as:\n\n\n\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\nthen you can ssh into the new server with\nsh&gt; ssh rgtlab.org"
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#introduction",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#introduction",
    "title": "Reproducible R Development with Docker and renv",
    "section": "1 Introduction",
    "text": "1 Introduction\n\nEnsuring reproducibility in R Markdown can be challenging.\nPackage version mismatches and OS differences cause issues.\nSolution: renv (package management) + Docker (containerization)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#workflow-overview",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#workflow-overview",
    "title": "Reproducible R Development with Docker and renv",
    "section": "2 Workflow Overview",
    "text": "2 Workflow Overview\n\nDeveloper 1: Sets up renv & Docker, pushes to GitHub & DockerHub.\nDeveloper 2: Clones repo, pulls Docker image, runs & modifies analysis.\nUses bind mounting to ensure local files persist."
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---setup-github-repository",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---setup-github-repository",
    "title": "Reproducible R Development with Docker and renv",
    "section": "3 Developer 1 - Setup GitHub Repository",
    "text": "3 Developer 1 - Setup GitHub Repository\ngit clone https://github.com/username/penguins-analysis.git\ncd penguins-analysis"
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---initialize-renv",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---initialize-renv",
    "title": "Reproducible R Development with Docker and renv",
    "section": "4 Developer 1 - Initialize renv",
    "text": "4 Developer 1 - Initialize renv\ninstall.packages(\"renv\")\nrenv::init()\n\nCreates renv.lock to track package versions."
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---install-required-packages",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---install-required-packages",
    "title": "Reproducible R Development with Docker and renv",
    "section": "5 Developer 1 - Install Required Packages",
    "text": "5 Developer 1 - Install Required Packages\ninstall.packages(\"ggplot2\")\ninstall.packages(\"palmerpenguins\")\nrenv::snapshot()\n\nrenv::snapshot() saves exact package versions."
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---create-dockerfile",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---create-dockerfile",
    "title": "Reproducible R Development with Docker and renv",
    "section": "6 Developer 1 - Create Dockerfile",
    "text": "6 Developer 1 - Create Dockerfile\nFROM rocker/r-ver:4.1.0\nWORKDIR /workspace\nRUN R -e \"install.packages('renv', repos='https://cloud.r-project.org')\"\nCOPY renv.lock renv/activate.R /workspace/\nRUN R -e \"renv::restore()\"\nCMD [\"/bin/bash\"]\n\nDoes NOT include peng1.Rmd (handled locally by Developer 2)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---build-push-docker-image",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---build-push-docker-image",
    "title": "Reproducible R Development with Docker and renv",
    "section": "7 Developer 1 - Build & Push Docker Image",
    "text": "7 Developer 1 - Build & Push Docker Image\ndocker build -t username/penguins-analysis:v1 .\ndocker login\ndocker push username/penguins-analysis:v1\n\nImage now available on DockerHub."
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---push-to-github",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-1---push-to-github",
    "title": "Reproducible R Development with Docker and renv",
    "section": "8 Developer 1 - Push to GitHub",
    "text": "8 Developer 1 - Push to GitHub\ngit add .\ngit commit -m \"Initial renv setup and Docker environment (without Rmd)\"\ngit push origin main"
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-2---clone-pull-docker-image",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-2---clone-pull-docker-image",
    "title": "Reproducible R Development with Docker and renv",
    "section": "9 Developer 2 - Clone & Pull Docker Image",
    "text": "9 Developer 2 - Clone & Pull Docker Image\ngit clone https://github.com/username/penguins-analysis.git\ncd penguins-analysis\ndocker pull username/penguins-analysis:v1"
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-2---run-docker-interactively",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-2---run-docker-interactively",
    "title": "Reproducible R Development with Docker and renv",
    "section": "10 Developer 2 - Run Docker Interactively",
    "text": "10 Developer 2 - Run Docker Interactively\ndocker run --rm -it -v \"$(pwd):/workspace\" -w /workspace username/penguins-analysis:v1 /bin/bash\n\nMounts local repository to /workspace inside the container."
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-2---write-peng1.rmd",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-2---write-peng1.rmd",
    "title": "Reproducible R Development with Docker and renv",
    "section": "11 Developer 2 - Write peng1.Rmd",
    "text": "11 Developer 2 - Write peng1.Rmd\n---\ntitle: \"Palmer Penguins Analysis\"\nauthor: \"Developer 2\"\ndate: \"2025-05-13\"\noutput: html_document\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n# Explicitly use palmerpenguins::penguins to avoid conflicts\nggplot(palmerpenguins::penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point() + theme_minimal()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range (`geom_point()`).\n\n\n\n\n\n\n\n\n:::\n\n## Developer 2 - Render R Markdown\n```r\nrmarkdown::render(\"peng1.Rmd\")\n\nOutput peng1.html is saved locally (due to bind mount)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-2---extend-analysis-push-to-github",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#developer-2---extend-analysis-push-to-github",
    "title": "Reproducible R Development with Docker and renv",
    "section": "12 Developer 2 - Extend Analysis & Push to GitHub",
    "text": "12 Developer 2 - Extend Analysis & Push to GitHub\n## Body Mass vs. Bill Length\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(palmerpenguins::penguins, aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point() + theme_minimal()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range (`geom_point()`).\n\n\n\n\n\n\n\n\n:::\n\n```sh\ngit add peng1.Rmd\ngit commit -m \"Added second plot: Body Mass vs. Bill Length\"\ngit push origin main"
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#conclusion",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#conclusion",
    "title": "Reproducible R Development with Docker and renv",
    "section": "13 Conclusion",
    "text": "13 Conclusion\n✅ renv ensures package reproducibility.\n✅ Docker ensures OS & R version consistency.\n✅ GitHub & DockerHub enable collaboration.\n✅ Bind mounting ensures local modifications persist."
  },
  {
    "objectID": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#thank-you",
    "href": "posts/share_R_code_via_docker/docker_renv_slides_updated.html#thank-you",
    "title": "Reproducible R Development with Docker and renv",
    "section": "14 Thank You! 🚀",
    "text": "14 Thank You! 🚀\n\nQuestions?\n\nTry setting up your own Dockerized R environment!"
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html",
    "href": "posts/share_R_code_via_docker/index.html",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "",
    "text": "Reproducibility stands as a cornerstone of professional data analysis, yet in practice, achieving it consistently with R workflows remains challenging. R projects frequently break when transferred between computers due to mismatched R versions or package dependencies, leaving developers in what is colloquially known as “dependency hell.” This white paper presents a comprehensive approach to solving this problem by combining two powerful tools: renv for R package management and Docker for containerizing the computing environment. Together, these tools ensure that an R workflow runs identically across different systems with the same packages, R version, and system libraries as the original setup."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#executive-summary",
    "href": "posts/share_R_code_via_docker/index.html#executive-summary",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "",
    "text": "Reproducibility stands as a cornerstone of professional data analysis, yet in practice, achieving it consistently with R workflows remains challenging. R projects frequently break when transferred between computers due to mismatched R versions or package dependencies, leaving developers in what is colloquially known as “dependency hell.” This white paper presents a comprehensive approach to solving this problem by combining two powerful tools: renv for R package management and Docker for containerizing the computing environment. Together, these tools ensure that an R workflow runs identically across different systems with the same packages, R version, and system libraries as the original setup."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#motivation",
    "href": "posts/share_R_code_via_docker/index.html#motivation",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "2 Motivation",
    "text": "2 Motivation\nImagine you’ve written code that you want to share with a colleague. At first glance, this may seem like a straightforward task—simply send the R files via email. However, ensuring that your colleague can run the code without errors and obtain the same results is often much more challenging than anticipated.\nWhen sharing R code, several potential problems can arise:\n\nDifferent versions of R installed on each machine\nMismatched R package versions\nMissing system dependencies (like pandoc or LaTeX)\nMissing supplemental files referenced by the program (bibliography files, LaTeX preambles, datasets, images)\nDifferent R startup configurations (.Rprofile or .Renviron)\n\nA real-world scenario often unfolds like this:\n\nYou email your R Markdown file to your colleague, Joe\nJoe attempts to run it with R -e \"source('peng1.Rmd')\"\nR isn’t installed on Joe’s system\nAfter installing R, Joe gets an error: “could not find function ‘render’”\nJoe installs the rmarkdown package\nNow pandoc is missing\nAfter installing pandoc, a required package is missing\nAfter installing the package, external files are missing (bibliography, images)\nAnd so on…\n\nThis cycle of troubleshooting can be time-consuming and frustrating, often resulting in the “it works on my machine” syndrome. Even when the code eventually runs, there’s no guarantee that Joe will get the same results that you did.\nTo ensure true reproducibility, your colleague should have a computing environment as similar to yours as possible. Given the dynamic nature of open source software, this can be difficult to achieve through manual installation and configuration.\nThe approach outlined in this white paper offers a more robust solution. Rather than sending standalone text files, you can provide a complete, containerized environment that includes everything needed to run your analysis. With this approach, your colleague can run a simple command like:\ndocker run -v \"$(pwd):/home/joe\" -v \"$(pwd)/output:/home/joe/output\" username/penguins-analysis\nThis creates an identical R environment on their desktop, ready for them to run or modify your code with confidence that it will work as intended."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#introduction",
    "href": "posts/share_R_code_via_docker/index.html#introduction",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "3 Introduction",
    "text": "3 Introduction\n\n3.1 The Challenge of Reproducibility in R\nR has become a standard tool for data science and statistical analysis across numerous disciplines. However, as R projects grow in complexity, they often develop intricate webs of dependencies that can make sharing and reproducing analyses difficult. Some common challenges include:\n\nDifferent R versions across machines\nIncompatible package versions\nMissing system-level dependencies\nOperating system differences (macOS vs. Windows vs. Linux)\nConflicts with other installed packages\nR startup files (.Rprofile, .Renviron) that affect code behavior\n\nThese challenges often manifest as the frustrating “it works on my machine” problem, where analysis code runs perfectly for the original author but fails when others attempt to use it. This undermines the scientific and collaborative potential of R-based analyses.\n\n\n3.2 A Two-Level Solution\nTo address these challenges comprehensively, we need to tackle reproducibility at two distinct levels:\n\nPackage-level reproducibility: Ensuring exact package versions and dependencies are maintained\nSystem-level reproducibility: Guaranteeing consistent R versions, operating system, and system libraries\n\nThe strategy presented in this white paper leverages renv for package-level consistency and Docker for system-level consistency. When combined, they provide a robust framework for end-to-end reproducible R workflows."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#renv-package-level-reproducibility",
    "href": "posts/share_R_code_via_docker/index.html#renv-package-level-reproducibility",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "4 renv: Package-Level Reproducibility",
    "text": "4 renv: Package-Level Reproducibility\n\n4.1 What is renv?\nrenv (Reproducible Environment) is an R package designed to create isolated, project-specific library environments. Instead of relying on a shared system-wide R library that might change over time, renv gives each project its own separate collection of packages with specific versions.\n\n\n4.2 Key Features of renv\n\nIsolated project library: renv creates a project-specific library (typically in renv/library) containing only the packages used by that project. This isolation ensures that updates or changes to packages in one project won’t affect others.\nLockfile for dependencies: When you finish installing or updating packages, renv::snapshot() produces a renv.lock file - a JSON document listing each package and its exact version and source. This lockfile is designed to be committed to version control and shared.\nEnvironment restoration: On a new machine (or when reproducing past results), renv::restore() installs the exact versions of packages specified in the lockfile. This creates an R package environment identical to the one that created the lockfile, provided the same R version is available.\n\n\n\n4.3 Basic renv Workflow\nThe typical workflow with renv involves:\n# One-time installation of renv\ninstall.packages(\"renv\")\n\n# Initialize renv for the project\nrenv::init()  # Creates renv infrastructure\n\n# Install project-specific packages\n# ...\n\n# Save the package state to renv.lock\nrenv::snapshot()\n\n# Later or on another system...\nrenv::restore()  # Restore packages from renv.lock\nWhile renv effectively handles package dependencies, it does not address differences in R versions or system libraries. This limitation is where Docker becomes essential."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#docker-system-level-reproducibility",
    "href": "posts/share_R_code_via_docker/index.html#docker-system-level-reproducibility",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "5 Docker: System-Level Reproducibility",
    "text": "5 Docker: System-Level Reproducibility\n\n5.1 What is Docker?\nDocker is a platform that allows you to package software into standardized units called containers. A Docker container is like a lightweight virtual machine that includes everything needed to run an application: the code, runtime, system tools, libraries, and settings.\n\n\n5.2 Docker’s Role in Reproducibility\nWhile renv handles R packages, Docker ensures consistency for:\n\nOperating system: The specific Linux distribution or OS version\nR interpreter: The exact R version\nSystem libraries: Required C/C++ libraries and other dependencies\nComputational environment: Memory limits, CPU configuration, etc.\nExternal tools: pandoc, LaTeX, and other utilities needed for R Markdown\n\nBy running an R Markdown project in Docker, you eliminate differences in OS or R installation as potential sources of irreproducibility. Any machine running Docker will execute the container in an identical environment.\n\n\n5.3 Docker Components for R Workflows\nFor R-based projects, a typical Docker approach involves:\n\nBase image: Starting from a pre-configured R image (e.g., from the Rocker project)\nDependencies: Adding system and R package dependencies\nConfiguration: Setting working directories and environment variables\nContent: Adding project files\nExecution: Defining how the project should run\n\nA simple Dockerfile for an R Markdown project might look like:\n# Use R 4.1.0 on Linux as base image\nFROM rocker/r-ver:4.1.0\n\n# Set the working directory inside the container\nWORKDIR /workspace\n\n# Install renv and restore dependencies\nRUN R -e \"install.packages('renv', repos='https://cloud.r-project.org')\"\n\n# Copy renv lockfile and infrastructure\nCOPY renv.lock renv/activate.R /workspace/\n\n# Restore the R package environment\nRUN R -e \"renv::restore()\"\n\n# Default command when container runs\nCMD [\"/bin/bash\"]\nA more comprehensive Dockerfile that includes additional tools and user setup might look like:\nFROM rocker/r-devel\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get clean\nRUN apt-get install pandoc vim git sudo -y\nRUN Rscript -e 'install.packages(\"renv\")'\nCOPY renv.lock renv.lock\nRUN Rscript -e 'renv::restore()'\nRUN groupadd --system joe\nRUN useradd --system --gid joe -m joe\nRUN usermod -aG sudo joe\nRUN chown joe:joe -R /home/joe\nRUN chown joe:joe -R /usr/local/lib/R/site-library\nWORKDIR /home/joe/\nRUN mkdir -p /home/joe/output\nUSER joe\nCMD [\"/bin/bash\"]\nThis Dockerfile creates a consistent environment with a specific R version and packages, regardless of the host system."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#combining-renv-and-docker-a-comprehensive-approach",
    "href": "posts/share_R_code_via_docker/index.html#combining-renv-and-docker-a-comprehensive-approach",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "6 Combining renv and Docker: A Comprehensive Approach",
    "text": "6 Combining renv and Docker: A Comprehensive Approach\n\n6.1 Why Use Both?\nUsing renv or Docker alone improves reproducibility, but combining them provides the most comprehensive solution:\n\nDocker guarantees the OS and R version\nrenv guarantees the R packages and their versions\nTogether they achieve end-to-end reproducibility from operating system to package dependencies\n\nThis combined approach creates a fully portable analytical environment that can be shared and will produce identical results across different computers.\n\n\n6.2 Integration Strategy\nThe recommended workflow integrates renv and Docker in the following manner:\n\nDevelop locally with renv: Create your R project with renv to manage package dependencies.\nSnapshot dependencies: Use renv::snapshot() to create a lockfile.\nContainerize with Docker: Create a Dockerfile that uses a specific R version and incorporates the renv lockfile.\nShare both: Distribute both the code (with lockfile) and the Docker configuration.\nExecute consistently: Run analyses in the Docker container for guaranteed reproducibility.\n\nThis strategy ensures that your R Markdown documents and analyses will run identically for anyone who has access to your Docker container, regardless of their local setup."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#practical-example-collaborative-r-markdown-development-with-testing",
    "href": "posts/share_R_code_via_docker/index.html#practical-example-collaborative-r-markdown-development-with-testing",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "7 Practical Example: Collaborative R Markdown Development with Testing",
    "text": "7 Practical Example: Collaborative R Markdown Development with Testing\nThe following case study demonstrates how two developers can collaborate on an R Markdown project using renv and Docker to ensure reproducibility, with integrated testing procedures to maintain code quality.\n\n7.1 Project Scenario\nTwo data scientists are collaborating on an analysis of the Palmer Penguins dataset. Developer 1 will set up the initial project structure and create a basic analysis. Developer 2 will extend the analysis with additional visualizations. They’ll use GitHub for version control and DockerHub to share the containerized environment. Both will implement testing to ensure code quality before merging changes.\n\n\n7.2 Step-by-Step Implementation\n\n7.2.1 Developer 1: Project Setup and Initial Analysis\nStep 1: Create and Initialize the GitHub Repository\nDeveloper 1 creates a new GitHub repository called “penguins-analysis” and clones it locally:\ngit clone https://github.com/username/penguins-analysis.git\ncd penguins-analysis\nStep 2: Initialize renv for Dependency Management\ninstall.packages(\"renv\")  # If not already installed\nrenv::init()  # Initialize renv for the project\nThis creates the necessary renv infrastructure, including an initial renv.lock file.\nStep 3: Install Required R Packages\ninstall.packages(\"ggplot2\")\ninstall.packages(\"palmerpenguins\")\ninstall.packages(\"testthat\")  # For testing\ninstall.packages(\"devtools\")  # For development utilities\nrenv::snapshot()  # Save package versions to renv.lock\nStep 4: Create Initial R Markdown Analysis\nDeveloper 1 creates a file named peng1.Rmd with the following content:\n\n\n\n\n\n\n---\ntitle: \"Palmer Penguins Analysis\"\nauthor: \"Developer 1\"\ndate: \"2025-05-13\"\noutput: html_document\n---\n\n\n\n## Flipper Length vs. Bill Length\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(palmerpenguins::penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point() +\n  theme_minimal() +\n  ggtitle(\"Flipper Length vs. Bill Length\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n:::\n\n**Step 5: Create Tests for Analysis Functions**\n\nDeveloper 1 creates a test directory structure and initial tests:\n\n```bash\nmkdir -p tests/testthat\nThen creates a file tests/testthat.R:\nlibrary(testthat)\nlibrary(palmerpenguins)\n\ntest_check(\"penguinanalysis\")\nAnd a test file tests/testthat/test-data-integrity.R:\ncontext(\"Data Integrity\")\n\ntest_that(\"penguins data is available and has expected dimensions\", {\n  expect_true(exists(\"penguins\", where = \"package:palmerpenguins\"))\n  expect_equal(ncol(palmerpenguins::penguins), 8)\n  expect_gt(nrow(palmerpenguins::penguins), 300)\n})\n\ntest_that(\"penguins data has required columns\", {\n  expect_true(\"species\" %in% names(palmerpenguins::penguins))\n  expect_true(\"bill_length_mm\" %in% names(palmerpenguins::penguins))\n  expect_true(\"flipper_length_mm\" %in% names(palmerpenguins::penguins))\n  expect_true(\"body_mass_g\" %in% names(palmerpenguins::penguins))\n})\nStep 6: Create a Dockerfile\nDeveloper 1 creates a Dockerfile that deliberately excludes the R Markdown file to ensure that Developer 2’s local files are used when running the container:\n# Use R 4.1.0 as base image\nFROM rocker/r-ver:4.1.0\n\n# Set the working directory inside the container\nWORKDIR /workspace\n\n# Install renv and restore dependencies\nRUN R -e \"install.packages('renv', repos='https://cloud.r-project.org')\"\n\n# Copy only the renv.lock and renv infrastructure\nCOPY renv.lock renv/activate.R /workspace/\n\n# Restore the R package environment\nRUN R -e \"renv::restore()\"\n\n# Create test directory\nRUN mkdir -p tests/testthat\n\nCMD [\"/bin/bash\"]\nStep 7: Build and Push the Docker Image\ndocker build -t username/penguins-analysis:v1 .\ndocker login\ndocker push username/penguins-analysis:v1\nStep 8: Run tests before committing\nDeveloper 1 runs the tests to make sure everything is working correctly:\nR -e \"devtools::test()\"\nStep 9: Commit and Push to GitHub\nAfter confirming the tests pass, Developer 1 commits the project files:\ngit add .\ngit commit -m \"Initial renv setup, Docker environment, and tests\"\ngit push origin main\nStep 10: Communicate with Developer 2\nDeveloper 1 provides these instructions to Developer 2:\n\nClone the GitHub repository\nPull the prebuilt Docker image from DockerHub\nRun the container interactively, mounting the local repository\nCreate a new branch for feature development\nExtend the analysis in the peng1.Rmd file\nWrite tests for new functionality\nRun tests to verify changes\nPush changes back to GitHub\nCreate a pull request\n\n\n\n7.2.2 Developer 2: Extending the Analysis\nStep 1: Clone the Repository and Pull the Docker Image\ngit clone https://github.com/username/penguins-analysis.git\ncd penguins-analysis\ndocker pull username/penguins-analysis:v1\nStep 2: Create a Feature Branch\ngit branch body-mass-analysis\ngit checkout body-mass-analysis\nStep 3: Run Docker Interactively\nDeveloper 2 runs the container with the local repository mounted:\ndocker run --rm -it -v \"$(pwd):/workspace\" -w /workspace username/penguins-analysis:v1 /bin/bash\nThis approach: - Uses the renv-restored environment from the container - Allows Developer 2 to access and modify files directly from their local machine\nStep 4: Extend the Analysis\nDeveloper 2 modifies peng1.Rmd to add a second plot for body mass vs. bill length:\n\n\n\n\n\n\n---\ntitle: \"Palmer Penguins Analysis\"\nauthor: \"Developer 2\"\ndate: \"2025-05-13\"\noutput: html_document\n---\n\n\n\n## Flipper Length vs. Bill Length\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(palmerpenguins::penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point() +\n  theme_minimal() +\n  ggtitle(\"Flipper Length vs. Bill Length\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range (`geom_point()`)."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#body-mass-vs.-bill-length",
    "href": "posts/share_R_code_via_docker/index.html#body-mass-vs.-bill-length",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "8 Body Mass vs. Bill Length",
    "text": "8 Body Mass vs. Bill Length\n\n\nCode\nggplot(palmerpenguins::penguins, aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point() +\n  theme_minimal() +\n  ggtitle(\"Body Mass vs. Bill Length\")\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range (`geom_point()`).\n\n\n\n\n\n\n\n\n\n:::\n\n**Step 5: Create Tests for New Analysis**\n\nDeveloper 2 adds a new test file `tests/testthat/test-body-mass-analysis.R`:\n\n```r\ncontext(\"Body Mass Analysis\")\n\ntest_that(\"body mass data is valid\", {\n  expect_true(all(palmerpenguins::penguins$body_mass_g &gt; 0, na.rm = TRUE))\n  expect_true(is.numeric(palmerpenguins::penguins$body_mass_g))\n})\n\ntest_that(\"body mass correlates with bill length\", {\n  # Calculate correlation coefficient\n  correlation &lt;- cor(\n    palmerpenguins::penguins$body_mass_g,\n    palmerpenguins::penguins$bill_length_mm,\n    use = \"complete.obs\"\n  )\n  \n  # Verify correlation is a numeric value (not NA)\n  expect_true(!is.na(correlation))\n  \n  # Test that the correlation is positive\n  expect_true(correlation &gt; 0)\n})\nStep 6: Run Tests to Verify Changes\nBefore committing, Developer 2 runs the tests to ensure that the new code doesn’t break existing functionality and that the new analyses are working correctly:\nR -e \"devtools::test()\"\nStep 7: Commit and Push Changes Back to GitHub\nAfter confirming all tests pass, Developer 2 commits and pushes the changes:\ngit add peng1.Rmd tests/testthat/test-body-mass-analysis.R\ngit commit -m \"Added body mass vs. bill length analysis with tests\"\ngit push origin body-mass-analysis\nStep 8: Create a Pull Request\nDeveloper 2 creates a pull request on GitHub from the body-mass-analysis branch to main, describing the changes made and noting that all tests pass.\nStep 9: Code Review and Merge\nDeveloper 1 reviews the changes, checks that the tests pass in the container environment, and merges the pull request if everything looks good:\ngit checkout main\ngit pull\ndocker run --rm -v \"$(pwd):/workspace\" -w /workspace username/penguins-analysis:v1 R -e \"devtools::test()\"\n\n8.1 Continuous Integration Extension\nTo further enhance the workflow, the team could set up GitHub Actions for continuous integration, which would automatically run tests in the Docker environment whenever changes are pushed:\n# .github/workflows/r-test.yml\nname: R Tests\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    container:\n      image: username/penguins-analysis:v1\n    \n    steps:\n    - uses: actions/checkout@v2\n    \n    - name: Run tests\n      run: |\n        R -e \"devtools::test()\"\n\n\n8.2 Key Benefits Demonstrated in This Example\nThis collaborative workflow demonstrates several advantages of the renv + Docker approach with integrated testing:\n\nDependency consistency: Both developers work with identical R package versions thanks to renv.\nEnvironment consistency: The Docker container ensures the same R version and system libraries.\nCode quality: Automated tests verify that the code works as expected and catches regressions.\nSeparation of concerns: The R Markdown document remains outside the Docker image, allowing for easier collaboration.\nWorkflow flexibility: Developer 2 can work in the container while editing files locally.\nFull reproducibility: The entire analysis environment is captured and shareable.\nContinuous integration: Automated testing ensures ongoing code quality."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#best-practices-and-considerations",
    "href": "posts/share_R_code_via_docker/index.html#best-practices-and-considerations",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "9 Best Practices and Considerations",
    "text": "9 Best Practices and Considerations\n\n9.1 When to Use This Approach\nThe renv + Docker approach with testing is particularly valuable for:\n\nLong-term research projects where reproducibility over time is crucial\nCollaborative analyses with multiple contributors on different systems\nProduction analytical pipelines that need to run consistently\nAcademic publications where methods must be reproducible\nTeaching and education to ensure consistent student experiences\nComplex analyses that require rigorous testing to validate results\n\n\n\n9.2 Tips for Efficient Implementation\n\nKeep Docker images minimal: Include only what’s necessary for reproducibility.\nUse specific version tags: For both R packages and Docker base images, specify exact versions.\nDocument system requirements: Include notes on RAM and storage requirements.\nLeverage bind mounts: Mount local directories to containers for easier development.\nWrite meaningful tests: Focus on validating both data integrity and analytical results.\nAutomate testing: Use CI/CD pipelines to automatically run tests on every change.\nConsider computational requirements: Particularly for resource-intensive analyses.\n\n\n\n9.3 Testing Strategies for R Analyses\n\nData Validation Tests: Ensure data has the expected structure, types, and values.\nFunction Tests: Verify that custom functions work as expected with known inputs and outputs.\nEdge Case Tests: Check how code handles missing values, outliers, or unexpected inputs.\nIntegration Tests: Confirm that different parts of the analysis work correctly together.\nRegression Tests: Make sure new changes don’t break existing functionality.\nOutput Validation: Verify that final results match expected patterns or benchmarks.\n\n\n\n9.4 Potential Challenges\nSome challenges to be aware of:\n\nDocker image size: Images with many packages can become large\nLearning curve: Docker, renv, and testing frameworks require some initial learning\nSystem-specific features: Some analyses may rely on hardware features\nPerformance considerations: Containers may have different performance characteristics\nTest maintenance: Tests need to be updated as the analysis evolves"
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#conclusion",
    "href": "posts/share_R_code_via_docker/index.html#conclusion",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "10 Conclusion",
    "text": "10 Conclusion\nAchieving full reproducibility in R requires addressing both package dependencies and system-level consistency, while ensuring code quality through testing. By combining renv for R package management, Docker for environment containerization, and automated testing for code validation, data scientists and researchers can create truly portable, reproducible, and reliable workflows.\nThe comprehensive approach presented in this white paper ensures that the common frustration of “it works on my machine” becomes a thing of the past. Instead, R Markdown projects become easy to share and fully reproducible. A collaborator or reviewer can launch the Docker container and get identical results, without worrying about package versions or system setup.\nThe case study demonstrates how two developers can effectively collaborate on an analysis while maintaining reproducibility and code quality throughout the project lifecycle. By integrating testing into the workflow, the team can be confident that their analysis is not only reproducible but also correct.\nThis strategy represents a best practice for long-term reproducibility in R, meeting the high standards required for professional data science and research documentation. By adopting this comprehensive approach, the R community can make significant strides toward the goal of fully reproducible and reliable research and analysis."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#references",
    "href": "posts/share_R_code_via_docker/index.html#references",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "11 References",
    "text": "11 References\n\nThomas, R.G. “Docker and renv strategy.”\n“Palmer Penguins Analysis.”\nThe Rocker Project. https://www.rocker-project.org/\nrenv documentation. https://rstudio.github.io/renv/\ntestthat documentation. https://testthat.r-lib.org/\n12 Horst, A.M., Hill, A.P., & Gorman, K.B. (2022). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R Journal."
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#prerequisites",
    "href": "posts/share_R_code_via_docker/index.html#prerequisites",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "13 Prerequisites",
    "text": "13 Prerequisites\nIn development"
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#step-by-step-implementation-1",
    "href": "posts/share_R_code_via_docker/index.html#step-by-step-implementation-1",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "14 Step-by-Step Implementation",
    "text": "14 Step-by-Step Implementation\nIn development"
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#key-takeaways",
    "href": "posts/share_R_code_via_docker/index.html#key-takeaways",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "15 Key Takeaways",
    "text": "15 Key Takeaways\nIn development"
  },
  {
    "objectID": "posts/share_R_code_via_docker/index.html#further-reading",
    "href": "posts/share_R_code_via_docker/index.html#further-reading",
    "title": "Simple Process for Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "16 Further Reading",
    "text": "16 Further Reading\nIn development"
  },
  {
    "objectID": "posts/dockerize_compose/index.html",
    "href": "posts/dockerize_compose/index.html",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "",
    "text": "Photo by Nathan Waters"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#hosting",
    "href": "posts/dockerize_compose/index.html#hosting",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "2.1 Hosting",
    "text": "2.1 Hosting\nHow to set up the hosting server? There are many ways to accomplish the hosting. Here we’ll describe a straightforward and efficient approach using mainstream cloud services and open source tools. In other words, we’ll describe how to ‘spin’ up a virtual server on Amazon Web Service EC2, and use Docker, R, Shiny, and Caddy to put in place a secure web app to share with our colleagues.\n\n\n\nData flow\n\n\nFigure 2 summarizes the flow of program and configuration files. In order to host power1_app online we’ll need to complete the following tasks:\nHosting List\n\nGenerate a virtual server with a firewall on EC2.\nObtain a static IPv4 address (to identify the server online)\nObtain a custom domain name (a name to associate with the static IP address) from a domain registration provider. E.g rgtlab.org\nInstall and configure a webserver on the virtual server ( a tool to interact with https protocol requests )\nObtain and install a TLS (transport layer security) security certificate (to allow encrypted communication between the server and other machines on the network).\nConfigure user authentication for the web site.\nconfigure a reverse proxy method (to translate https, port 443, requests to Shiny, port 3838, requests).\n\n\n\n“What Is An SSL/TLS Certificate?\nAn SSL/TLS certificate is a digital object that allows systems to verify the identity & subsequently establish an encrypted network connection to another system using the Secure Sockets Layer/Transport Layer Security (SSL/TLS) protocol. Certificates are used within a cryptographic system known as a public key infrastructure (PKI). PKI provides a way for one party to establish the identity of another party using certificates if they both trust a third-party - known as a certificate authority. SSL/TLS certificates thus act as digital identity cards to secure network communications, establish the identity of websites over the Internet as well as resources on private networks.”\n reference"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#select-a-hosting-service",
    "href": "posts/dockerize_compose/index.html#select-a-hosting-service",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "2.2 Select a hosting service",
    "text": "2.2 Select a hosting service\nIn this post we’ll describe the process using AWS EC2. Detailed instructions for setting up a server on EC2, both via the console and the command line interface are covered in earlier posts (here) and (here).\nIn brief, the process is as follows: To get started with AWS create an account or sign in to the AWS EC2 dashboard. Once on the dashboard set up an environment in which to host the virtual server.\nThe components of this environment are: a ssh key-pair, a firewall, a static IP, and a domain name.\nWith the hosting environment in place, select an instance (AMI, type and disk size), then generate and launch the server.\nOnce the server is available, connect via ssh, and login.\nThe only software necessary to install at this point is docker (assuming it wasn’t installed in the server setup process). Install docker with the following commands:\nsudo snap install docker.io\n\n\nNote: snap is a package management system pre-installed in Ubuntu servers. Not to be confused with the apt package management system.\nOnce the host is set up and docker is installed, we’ll have accomplished items 1, 2, and 3 from our hosting list above. i.e. a customized virtual server wtih a static IP address, a unique domain name and firewall in place."
  },
  {
    "objectID": "posts/dockerize_compose/index.html#docker",
    "href": "posts/dockerize_compose/index.html#docker",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "3.1 Docker",
    "text": "3.1 Docker\n\n\n  Photo by Ian Taylor on Unsplash \nWe’ll use docker to access R and Shiny, and docker-compose to access Caddy, our webserver. The first file is the dockerfile. Here is our minimal dockerfile located in the Shiny development directory:\n\nshow the Dockerfile code\nFROM rocker/shiny:4.2.0\nRUN rm -rf /srv/shiny-server\nCOPY /power1_shiny/* /srv/shiny-server/\nUSER shiny\nCMD [\"/usr/bin/shiny-server\"]\n\nThis configuration file instructs Docker to build a container based on a Rocker/Shiny image (constructed as a ubuntu image with R and Shiny installed), then copy the power1_shiny/app.R code into the container and finally launch Shiny on (default) port 3838.\nNote: We placed the power1_shiny/app.R code in the default location /srv/shiny-server so we only need to start the Shiny server and it will find the shiny program\nStart by building and pushing the image to the gitlab container registry.\n# login to gitlab\n\ncat gitlab_access_token | docker login \\\nregistry.gitlab.com -u rgt47 --password-stdin\n\ndocker build -t \\\nregistry.gitlab.com/rgt47/power1_app/power1_image:v1.0 \\\n        --platform linux/x86_64 .\ndocker push \\\nregistry.gitlab.com/rgt47/power1_app/power1_image:v1.0"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#web-server",
    "href": "posts/dockerize_compose/index.html#web-server",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "3.2 Web-server",
    "text": "3.2 Web-server\nOne of the most challenging parts of setting up a standalone server is installling and configuring the web server this is because we need our web server to perform several functions” that is 1) Provide a method for receiving and processing packets from the internet 2) Restrict access to https protocol packets. 3) host web-certificates, 4) provide authentication, and 5) forward 443 packets to 3838.\nA Caddy web server configuration file (default name Caddyfile)\nWe’ll use Caddy as our web server. Caddy is an open-source tool that has the very useful feature of automating the acquisition and installing of an SSL certificate. (An SSL cert is required by most browsers to use the encrypted communication protocol https.)\nWe use the caddy configuration file to specify three critical things.\n\nthe site domain name.\nthe ‘reverse proxy’ map that redirects requests to port 443 (ssl port) to port 3838 (Shiny port).\nadd login credentials for all users (e.g. bob/vanilla47):\n\nOur barebones Caddyfile looks like this:\n\nShow the Caddyfile code\n# use caddy auth tool to generate a password via the `bcrypt` algorithm.\n# &gt; caddy hash-password --plaintext hiccup\n\nrgtlab.org {\nbasicauth /power1/* {\n    Bob $2a$14$Zkx19XLiW6VYouLHR5NmfOFU0z2GTNmpkT/5qqR7hx4IjWJPDhjvG\n}\n    root * /srv\n    handle_path /power1/* {\n        reverse_proxy power1:3838\n    }\n    file_server\n}\n\nWe can accomplish what we need for items 4, 5, and 7 through the Caddyfile.\nNote:\n\nrgtlab.org is our domain name\nhandle_path maps all https requests to port 3838 where Shiny is listening.\n\nProviding our servers domain name, rgtlab.org is sufficient to initiate an exchange with the letsencrypt service to generate an SSL certificate."
  },
  {
    "objectID": "posts/dockerize_compose/index.html#docker-compose",
    "href": "posts/dockerize_compose/index.html#docker-compose",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "3.3 Docker Compose",
    "text": "3.3 Docker Compose\nAnd a third file is a config file for Docker Compose. Docker Compose is a Docker module that provides a framework for running multi-container applications. This docker compose YAML file instructs Docker to containerize our Shiny app, pull a caddy webserver image from Docker Hub and create a local network for the two containers to communicate in.\nA Docker-compose configuration file (default name docker-compose.yml).\nThe docker-compose.yml file:\n\ndocker-compose.yml. Show the code\nversion: \"3.7\"\n\nservices:\n  power1:\n    image: registry.gitlab.com/rgt47/power1_app/power1_image:v1.0\n    restart: unless-stopped\n    expose:\n      - \"3838\"\n  caddy:\n    image: caddy:2.6.4-alpine\n    restart: always\n    ports:\n      - \"443:443\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - $PWD/site:/srv\n      - caddy_data:/data\n      - caddy_config:/config\n    depends_on:\n      - power1\n    environment:\n      - HOST=\"rgtlab.org\"\n      - EMAIL=\"rgthomas@ucsd.edu\"\nvolumes:\n  caddy_data:\n  caddy_config:"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#landing-page",
    "href": "posts/dockerize_compose/index.html#landing-page",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "3.4 Landing Page",
    "text": "3.4 Landing Page\nLastly, we need an html file, index.html in a subdirectory named site that provides the landing page for our server.\n\nindex.html. Show the code\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;Power Calculators&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/bulma@0.9.0/css/bulma.min.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"app\"&gt;\n      &lt;section class=\"hero is-small\"&gt;\n        &lt;div class=\"hero-body\"&gt;\n          &lt;div class=\"container has-text-centered\"&gt;\n            &lt;h1 class=\"title\"&gt;RGT Lab Power Calculators&lt;/h1&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/section&gt;\n            &lt;hr&gt;\n\n            &lt;div class=\"columns\"&gt;\n              &lt;div class=\"column is-4 is-offset-1\"&gt;\n      &lt;img src=\"https://github.com/rgt47/power0/blob/master/power1.png?raw=true\"\n        width=\"200\" height=\"250\"  ”float: left; padding: 3px 3px 0px 3px;” &gt;\n              &lt;/div&gt;\n              &lt;div class=\"column is-6\"&gt;\n                &lt;h1 class=\"title\"&gt; Power1 App &lt;/h1&gt;\n                &lt;p&gt; Power for two-sample t-test &lt;/p&gt;\n                &lt;br&gt;\n                &lt;a href=\"./rebecca/\" class=\"button is-info\"&gt;Go to app&lt;/a&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\nAt this point our power1_app repo looks like this:\n.\n├── Caddyfile\n├── Dockerfile\n├── docker-compose.yml\n└── site\n    └── index.html"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#tip-1.-docker-on-m1-macbook.",
    "href": "posts/dockerize_compose/index.html#tip-1.-docker-on-m1-macbook.",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "5.1 Tip 1. Docker on M1 macbook.",
    "text": "5.1 Tip 1. Docker on M1 macbook.\nTo get docker functioning properly with rocker images on M1 Mac desktop use --platform option.\ndocker build -t power1_shiny --platform linux/x86_64 .\ndocker run -d -p 80:3838 --platform linux/x86_64 power1_shiny"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#tip-2-add-user-to-docker-group-on-server.",
    "href": "posts/dockerize_compose/index.html#tip-2-add-user-to-docker-group-on-server.",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "5.2 Tip 2 add user to docker group on server.",
    "text": "5.2 Tip 2 add user to docker group on server.\nAdd ubuntu to the docker group to allow docker to run without sudo.\nsudo usermod -aG docker ${USER}"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#tip-3-ssh-config-file.",
    "href": "posts/dockerize_compose/index.html#tip-3-ssh-config-file.",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "5.3 Tip 3 ssh config file.",
    "text": "5.3 Tip 3 ssh config file.\nFor convenience, construct a config file in ~/.ssh as:\n\n\n\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\nthen you can ssh into the new server with\nsh&gt; ssh rgtlab.org"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#prerequisites",
    "href": "posts/dockerize_compose/index.html#prerequisites",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "7.1 Prerequisites",
    "text": "7.1 Prerequisites\nIn development"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#step-by-step-implementation",
    "href": "posts/dockerize_compose/index.html#step-by-step-implementation",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "7.2 Step-by-Step Implementation",
    "text": "7.2 Step-by-Step Implementation\nIn development"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#key-takeaways",
    "href": "posts/dockerize_compose/index.html#key-takeaways",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "7.3 Key Takeaways",
    "text": "7.3 Key Takeaways\nIn development"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#further-reading",
    "href": "posts/dockerize_compose/index.html#further-reading",
    "title": "A Concise Strategy to get your Shiny App Online, Securely and Continuously Updated.",
    "section": "7.4 Further Reading",
    "text": "7.4 Further Reading\nIn development"
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html",
    "href": "posts/share_R_code_via_docker/claude_synth.html",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "",
    "text": "Reproducibility stands as a cornerstone of professional data analysis, yet in practice, achieving it consistently with R workflows remains challenging. R projects frequently break when transferred between computers due to mismatched R versions or package dependencies, leaving developers in what is colloquially known as “dependency hell.” This white paper presents a comprehensive approach to solving this problem by combining two powerful tools: renv for R package management and Docker for containerizing the computing environment. Together, these tools ensure that an R workflow runs identically across different systems with the same packages, R version, and system libraries as the original setup."
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#executive-summary",
    "href": "posts/share_R_code_via_docker/claude_synth.html#executive-summary",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "",
    "text": "Reproducibility stands as a cornerstone of professional data analysis, yet in practice, achieving it consistently with R workflows remains challenging. R projects frequently break when transferred between computers due to mismatched R versions or package dependencies, leaving developers in what is colloquially known as “dependency hell.” This white paper presents a comprehensive approach to solving this problem by combining two powerful tools: renv for R package management and Docker for containerizing the computing environment. Together, these tools ensure that an R workflow runs identically across different systems with the same packages, R version, and system libraries as the original setup."
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#introduction",
    "href": "posts/share_R_code_via_docker/claude_synth.html#introduction",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "2 Introduction",
    "text": "2 Introduction\n\n2.1 The Challenge of Reproducibility in R\nR has become a standard tool for data science and statistical analysis across numerous disciplines. However, as R projects grow in complexity, they often develop intricate webs of dependencies that can make sharing and reproducing analyses difficult. Some common challenges include:\n\nDifferent R versions across machines\nIncompatible package versions\nMissing system-level dependencies\nOperating system differences\nConflicts with other installed packages\n\nThese challenges often manifest as the frustrating “it works on my machine” problem, where analysis code runs perfectly for the original author but fails when others attempt to use it. This undermines the scientific and collaborative potential of R-based analyses.\n\n\n2.2 A Two-Level Solution\nTo address these challenges comprehensively, we need to tackle reproducibility at two distinct levels:\n\nPackage-level reproducibility: Ensuring exact package versions and dependencies are maintained\nSystem-level reproducibility: Guaranteeing consistent R versions, operating system, and system libraries\n\nThe strategy presented in this white paper leverages renv for package-level consistency and Docker for system-level consistency. When combined, they provide a robust framework for end-to-end reproducible R workflows."
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#renv-package-level-reproducibility",
    "href": "posts/share_R_code_via_docker/claude_synth.html#renv-package-level-reproducibility",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "3 renv: Package-Level Reproducibility",
    "text": "3 renv: Package-Level Reproducibility\n\n3.1 What is renv?\nrenv (Reproducible Environment) is an R package designed to create isolated, project-specific library environments. Instead of relying on a shared system-wide R library that might change over time, renv gives each project its own separate collection of packages with specific versions.\n\n\n3.2 Key Features of renv\n\nIsolated project library: renv creates a project-specific library (typically in renv/library) containing only the packages used by that project. This isolation ensures that updates or changes to packages in one project won’t affect others.\nLockfile for dependencies: When you finish installing or updating packages, renv::snapshot() produces a renv.lock file - a JSON document listing each package and its exact version and source. This lockfile is designed to be committed to version control and shared with collaborators.\nEnvironment restoration: On a new machine (or when reproducing past results), renv::restore() installs the exact versions of packages specified in the lockfile. This creates an R package environment identical to the one that created the lockfile, provided the same R version is available.\n\n\n\n3.3 Basic renv Workflow\nThe typical workflow with renv involves:\n# One-time installation of renv\ninstall.packages(\"renv\")\n\n# Initialize renv for the project\nrenv::init()  # Creates renv infrastructure\n\n# Install project-specific packages\n# ...\n\n# Save the package state to renv.lock\nrenv::snapshot()\n\n# Later or on another system...\nrenv::restore()  # Restore packages from renv.lock\nWhile renv effectively handles package dependencies, it does not address differences in R versions or system libraries. This limitation is where Docker becomes essential."
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#docker-system-level-reproducibility",
    "href": "posts/share_R_code_via_docker/claude_synth.html#docker-system-level-reproducibility",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "4 Docker: System-Level Reproducibility",
    "text": "4 Docker: System-Level Reproducibility\n\n4.1 What is Docker?\nDocker is a platform that allows you to package software into standardized units called containers. A Docker container is like a lightweight virtual machine that includes everything needed to run an application: the code, runtime, system tools, libraries, and settings.\n\n\n4.2 Docker’s Role in Reproducibility\nWhile renv handles R packages, Docker ensures consistency for:\n\nOperating system: The specific Linux distribution or OS version\nR interpreter: The exact R version\nSystem libraries: Required C/C++ libraries and other dependencies\nComputational environment: Memory limits, CPU configuration, etc.\n\nBy running an R Markdown project in Docker, you eliminate differences in OS or R installation as potential sources of irreproducibility. Any machine running Docker will execute the container in an identical environment.\n\n\n4.3 Docker Components for R Workflows\nFor R-based projects, a typical Docker approach involves:\n\nBase image: Starting from a pre-configured R image (e.g., from the Rocker project)\nDependencies: Adding system and R package dependencies\nConfiguration: Setting working directories and environment variables\nContent: Adding project files\nExecution: Defining how the project should run\n\nA simple Dockerfile for an R Markdown project might look like:\n# Use R 4.1.0 on Linux as base image\nFROM rocker/r-ver:4.1.0\n\n# Set the working directory inside the container\nWORKDIR /workspace\n\n# Install renv and restore dependencies\nRUN R -e \"install.packages('renv', repos='https://cloud.r-project.org')\"\n\n# Copy renv lockfile and infrastructure\nCOPY renv.lock renv/activate.R /workspace/\n\n# Restore the R package environment\nRUN R -e \"renv::restore()\"\n\n# Default command when container runs\nCMD [\"/bin/bash\"]\nThis Dockerfile creates a consistent environment with a specific R version and packages, regardless of the host system."
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#combining-renv-and-docker-a-comprehensive-approach",
    "href": "posts/share_R_code_via_docker/claude_synth.html#combining-renv-and-docker-a-comprehensive-approach",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "5 Combining renv and Docker: A Comprehensive Approach",
    "text": "5 Combining renv and Docker: A Comprehensive Approach\n\n5.1 Why Use Both?\nUsing renv or Docker alone improves reproducibility, but combining them provides the most comprehensive solution:\n\nDocker guarantees the OS and R version\nrenv guarantees the R packages and their versions\nTogether they achieve end-to-end reproducibility from operating system to package dependencies\n\nThis combined approach creates a fully portable analytical environment that can be shared and will produce identical results across different computers.\n\n\n5.2 Integration Strategy\nThe recommended workflow integrates renv and Docker in the following manner:\n\nDevelop locally with renv: Create your R project with renv to manage package dependencies.\nSnapshot dependencies: Use renv::snapshot() to create a lockfile.\nContainerize with Docker: Create a Dockerfile that uses a specific R version and incorporates the renv lockfile.\nShare both: Distribute both the code (with lockfile) and the Docker configuration.\nExecute consistently: Run analyses in the Docker container for guaranteed reproducibility.\n\nThis strategy ensures that your R Markdown documents and analyses will run identically for anyone who has access to your Docker container, regardless of their local setup."
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#practical-example-collaborative-r-markdown-development",
    "href": "posts/share_R_code_via_docker/claude_synth.html#practical-example-collaborative-r-markdown-development",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "6 Practical Example: Collaborative R Markdown Development",
    "text": "6 Practical Example: Collaborative R Markdown Development\nThe following case study demonstrates how two developers can collaborate on an R Markdown project using renv and Docker to ensure reproducibility.\n\n6.1 Project Scenario\nTwo data scientists are collaborating on an analysis of the Palmer Penguins dataset. Developer 1 will set up the initial project structure and create a basic analysis. Developer 2 will extend the analysis with additional visualizations. They’ll use GitHub for version control and DockerHub to share the containerized environment.\n\n\n6.2 Step-by-Step Implementation\n\n6.2.1 Developer 1: Project Setup and Initial Analysis\nStep 1: Create and Initialize the GitHub Repository\nDeveloper 1 creates a new GitHub repository called “penguins-analysis” and clones it locally:\ngit clone https://github.com/username/penguins-analysis.git\ncd penguins-analysis\nStep 2: Initialize renv for Dependency Management\ninstall.packages(\"renv\")  # If not already installed\nrenv::init()  # Initialize renv for the project\nThis creates the necessary renv infrastructure, including an initial renv.lock file.\nStep 3: Install Required R Packages\ninstall.packages(\"ggplot2\")\ninstall.packages(\"palmerpenguins\")\nrenv::snapshot()  # Save package versions to renv.lock\nStep 4: Create Initial R Markdown Analysis\nDeveloper 1 creates a file named peng1.Rmd with the following content:\n\n\npeng1.Rmd\n\n---\ntitle: \"Palmer Penguins Analysis\"\nauthor: \"Developer 1\"\ndate: \"`r Sys.Date()`\"\noutput: html_document\n---\n\n```r\n#| label: setup\n#| include: false\nlibrary(ggplot2)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#flipper-length-vs.-bill-length",
    "href": "posts/share_R_code_via_docker/claude_synth.html#flipper-length-vs.-bill-length",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "7 Flipper Length vs. Bill Length",
    "text": "7 Flipper Length vs. Bill Length\n#| label: flipper-bill-plot\nggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point() + \n  theme_minimal() + \n  ggtitle(\"Flipper Length vs. Bill Length\")\n\n**Step 5: Create a Dockerfile**\n\nDeveloper 1 creates a Dockerfile that deliberately excludes the R Markdown file to ensure that Developer 2's local files are used when running the container:\n\n```{.dockerfile filename=\"Dockerfile\"}\n# Use R 4.1.0 as base image\nFROM rocker/r-ver:4.1.0\n\n# Set the working directory inside the container\nWORKDIR /workspace\n\n# Install renv and restore dependencies\nRUN R -e \"install.packages('renv', repos='https://cloud.r-project.org')\"\n\n# Copy only the renv.lock and renv infrastructure\nCOPY renv.lock renv/activate.R /workspace/\n\n# Restore the R package environment\nRUN R -e \"renv::restore()\"\n\nCMD [\"/bin/bash\"]\nStep 6: Build and Push the Docker Image\ndocker build -t username/penguins-analysis:v1 .\ndocker login\ndocker push username/penguins-analysis:v1\nStep 7: Commit and Push to GitHub\nDeveloper 1 commits the project files (excluding the R Markdown document from the Docker image):\ngit add .\ngit commit -m \"Initial renv setup and Docker environment (without Rmd)\"\ngit push origin main\nStep 8: Communicate with Developer 2\nDeveloper 1 provides these instructions to Developer 2:\n\nClone the GitHub repository\nPull the prebuilt Docker image from DockerHub\nRun the container interactively, mounting the local repository\nExtend the analysis in the peng1.Rmd file\nPush changes back to GitHub\n\n\n7.0.1 Developer 2: Extending the Analysis\nStep 1: Clone the Repository and Pull the Docker Image\ngit clone https://github.com/username/penguins-analysis.git\ncd penguins-analysis\ndocker pull username/penguins-analysis:v1\nStep 2: Run Docker Interactively\nDeveloper 2 runs the container with the local repository mounted:\ndocker run --rm -it -v \"$(pwd):/workspace\" -w /workspace username/penguins-analysis:v1 /bin/bash\nThis approach: - Uses the renv-restored environment from the container - Allows Developer 2 to access and modify files directly from their local machine\nStep 3: Extend the Analysis\nDeveloper 2 modifies peng1.Rmd to add a second plot for body mass vs. bill length:\n\n\npeng1.Rmd (modified)\n\n---\ntitle: \"Palmer Penguins Analysis\"\nauthor: \"Developer 2\"\ndate: \"`r Sys.Date()`\"\noutput: html_document\n---\n\n```r\n#| label: setup\n#| include: false\nlibrary(ggplot2)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#flipper-length-vs.-bill-length-1",
    "href": "posts/share_R_code_via_docker/claude_synth.html#flipper-length-vs.-bill-length-1",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "8 Flipper Length vs. Bill Length",
    "text": "8 Flipper Length vs. Bill Length\n#| label: flipper-bill-plot\nggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point() + \n  theme_minimal() + \n  ggtitle(\"Flipper Length vs. Bill Length\")"
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#body-mass-vs.-bill-length",
    "href": "posts/share_R_code_via_docker/claude_synth.html#body-mass-vs.-bill-length",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "9 Body Mass vs. Bill Length",
    "text": "9 Body Mass vs. Bill Length\n#| label: mass-bill-plot\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point() + \n  theme_minimal() + \n  ggtitle(\"Body Mass vs. Bill Length\")\n\n**Step 4: Commit and Push Changes Back to GitHub**\n\n```bash\ngit add peng1.Rmd\ngit commit -m \"Added second plot: Body Mass vs. Bill Length\"\ngit push origin main\n\n9.1 Key Benefits Demonstrated in This Example\nThis collaborative workflow demonstrates several advantages of the renv + Docker approach:\n\nDependency consistency: Both developers work with identical R package versions thanks to renv.\nEnvironment consistency: The Docker container ensures the same R version and system libraries.\nSeparation of concerns: The R Markdown document remains outside the Docker image, allowing for easier collaboration.\nWorkflow flexibility: Developer 2 can work in the container while editing files locally.\nFull reproducibility: The entire analysis environment is captured and shareable."
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#best-practices-and-considerations",
    "href": "posts/share_R_code_via_docker/claude_synth.html#best-practices-and-considerations",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "10 Best Practices and Considerations",
    "text": "10 Best Practices and Considerations\n\n10.1 When to Use This Approach\nThe renv + Docker approach is particularly valuable for:\n\nLong-term research projects where reproducibility over time is crucial\nCollaborative analyses with multiple contributors on different systems\nProduction analytical pipelines that need to run consistently\nAcademic publications where methods must be reproducible\nTeaching and education to ensure consistent student experiences\n\n\n\n10.2 Tips for Efficient Implementation\n\nKeep Docker images minimal: Include only what’s necessary for reproducibility.\nUse specific version tags: For both R packages and Docker base images, specify exact versions.\nDocument system requirements: Include notes on RAM and storage requirements.\nLeverage bind mounts: Mount local directories to containers for easier development.\nConsider computational requirements: Particularly for resource-intensive analyses.\n\n\n\n10.3 Potential Challenges\nSome challenges to be aware of:\n\nDocker image size: Images with many packages can become large\nLearning curve: Both Docker and renv require some initial learning\nSystem-specific features: Some analyses may rely on hardware features\nPerformance considerations: Containers may have different performance characteristics"
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#conclusion",
    "href": "posts/share_R_code_via_docker/claude_synth.html#conclusion",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "11 Conclusion",
    "text": "11 Conclusion\nAchieving full reproducibility in R requires addressing both package dependencies and system-level consistency. By combining renv for R package management and Docker for environment containerization, data scientists and researchers can create truly portable and reproducible workflows.\nThis approach ensures that the common frustration of “it works on my machine” becomes a thing of the past. Instead, R Markdown projects become easy to share and fully reproducible. A collaborator or reviewer can launch the Docker container and get identical results, without worrying about package versions or system setup.\nThe case study presented demonstrates how two developers can effectively collaborate on an analysis while maintaining reproducibility throughout the project lifecycle. This strategy represents a best practice for long-term reproducibility in R, meeting the high standards required for professional data science and research documentation.\nBy adopting this two-tool approach, the R community can make significant strides toward the goal of fully reproducible research and analysis."
  },
  {
    "objectID": "posts/share_R_code_via_docker/claude_synth.html#references",
    "href": "posts/share_R_code_via_docker/claude_synth.html#references",
    "title": "Achieving Full Reproducibility in R: A Docker and renv Strategy",
    "section": "12 References",
    "text": "12 References\n\nThomas, R.G. “Docker and renv strategy.”\n“Palmer Penguins Analysis.” Developer 2.\nThe Rocker Project. https://www.rocker-project.org/\nrenv documentation. https://rstudio.github.io/renv/"
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "About Thomas Lab",
    "section": "",
    "text": "Twitter\n  \n  \n    \n     GitHub\n  \n  \n    \n     Email\n  \n\n  \n  \nThe Thomas Lab in the Herbert Wertheim School of Public Health and Human Longevity Science at UC San Diego focuses on developing data science methodology and educational materials. Our work spans statistical computing, reproducible research practices, and modern tools for data analysis."
  },
  {
    "objectID": "about/index.html#research-focus",
    "href": "about/index.html#research-focus",
    "title": "About Thomas Lab",
    "section": "1 Research Focus",
    "text": "1 Research Focus\nOur lab specializes in:\n\nStatistical methodologies for health research\nR package development for specialized analysis needs\nReproducible research workflows and best practices\nEducational materials for data science skills in public health\nApplications of machine learning in longitudinal studies"
  },
  {
    "objectID": "about/index.html#tools-expertise",
    "href": "about/index.html#tools-expertise",
    "title": "About Thomas Lab",
    "section": "2 Tools & Expertise",
    "text": "2 Tools & Expertise\n\n\n2.1 R Programming\n\nPackage development\nStatistical modeling\nData visualization\nReproducible reporting\n\n\n\n2.2 Research Computing\n\nDocker containerization\nCloud-based computing\nHigh-performance computing\nCollaborative workflows\n\n\n\n2.3 Education\n\nWorkshop development\nTutorial creation\nOpen educational resources\nMentoring and guidance"
  },
  {
    "objectID": "about/index.html#team",
    "href": "about/index.html#team",
    "title": "About Thomas Lab",
    "section": "3 Team",
    "text": "3 Team\nOur interdisciplinary team brings together expertise in statistics, computer science, and public health research to address complex challenges in health data analysis."
  },
  {
    "objectID": "about/index.html#collaborations",
    "href": "about/index.html#collaborations",
    "title": "About Thomas Lab",
    "section": "4 Collaborations",
    "text": "4 Collaborations\nWe actively collaborate with researchers across disciplines to apply novel methodological approaches to real-world health and longevity challenges. If you’re interested in working together, please get in touch!"
  },
  {
    "objectID": "about/index.html#publications",
    "href": "about/index.html#publications",
    "title": "About Thomas Lab",
    "section": "5 Publications",
    "text": "5 Publications\nSelected recent publications:\n\nAuthor A, Author B, Thomas RG (2024). Title of paper. Journal Name, Volume(Issue), pages.\nAuthor C, Author D, Thomas RG (2023). Title of paper. Journal Name, Volume(Issue), pages.\nAuthor E, Author F, Thomas RG (2023). Title of paper. Journal Name, Volume(Issue), pages."
  },
  {
    "objectID": "about/index.html#contact",
    "href": "about/index.html#contact",
    "title": "About Thomas Lab",
    "section": "6 Contact",
    "text": "6 Contact\nFor inquiries about collaboration, research opportunities, or educational resources, please reach out through the social media links above or email us directly."
  }
]