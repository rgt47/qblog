[
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "Thomas Lab",
    "section": "",
    "text": "twitter\n  \n  \n    \n     Github\n  \n\n      \nThe Thomas Lab in the the Herbert Wertheim School of Public Health and Human Longevity Science at UC San Diego focuses on developing data science methodology and educational materials."
  },
  {
    "objectID": "blog/dockerize_compose/index.html",
    "href": "blog/dockerize_compose/index.html",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "",
    "text": "Photo by Nathan Waters"
  },
  {
    "objectID": "blog/dockerize_compose/index.html#hosting",
    "href": "blog/dockerize_compose/index.html#hosting",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "2.1 Hosting",
    "text": "2.1 Hosting\n\n\n\n\n\nData flow\n\n\nFigure 2 illustrates the tools we’ll use and the flow of program and configuration files. In order to host power1_app online we’ll need to complete the following tasks:\n\nGenerate a virtual server (connected via ssh) with a firewall on EC2, either via the interactive EC2 console of by the AWS CLI command line tools.\nobtain a static IPv4 address (to identify the server online)\nobtain a custom domain name (name to associate with static IP address) from Route 53 or godaddy.com or another domain registration provider.\ninstall and configure a webserver (tool to interact with https protocol requests )\nconfigure authentication for web site\nobtain and install an TLS (transport layer security) security certificate (to allow encrypted communication between the server and other machines on the network)\nconfigure a reverse proxy method (translate https, port 443, requests to Shiny, port 3838 requests)\n\n\n\n“What Is An SSL/TLS Certificate?\nAn SSL/TLS certificate is a digital object that allows systems to verify the identity & subsequently establish an encrypted network connection to another system using the Secure Sockets Layer/Transport Layer Security (SSL/TLS) protocol. Certificates are used within a cryptographic system known as a public key infrastructure (PKI). PKI provides a way for one party to establish the identity of another party using certificates if they both trust a third-party - known as a certificate authority. SSL/TLS certificates thus act as digital identity cards to secure network communications, establish the identity of websites over the Internet as well as resources on private networks.”\n <a href=“https://aws.amazon.com/what-is/ssl-certificate/” \n\n“A reverse proxy is a server, app, or cloud service that sits in f”ront of one or more web servers to intercept and inspect incoming client requests before forwarding them to the web server and subsequently returning the server’s response to the client.”\n <a href=“https://www.zscaler.com/resources/security-terms-glossary/what-is-reverse-proxy” \n\nAt first glance these requirements can appear daunting, but on closer inspection all can be met with relative ease and minimal cost using a cloud-hosting service, e.g. Amazon’s EC2 or Digital Ocean, and a “leased” domain name from, e.g. GoDaddy, or Amazon’s Route 53, or no cost if you have your own server with IP address, and domain name."
  },
  {
    "objectID": "blog/dockerize_compose/index.html#select-a-hosting-service",
    "href": "blog/dockerize_compose/index.html#select-a-hosting-service",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "2.2 Select a hosting service",
    "text": "2.2 Select a hosting service\nThere are a number of cloud based server options: Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nAn overview of the process using AWS EC2 follows. Detailed instructions for setting up a server on EC2, both via the console and the command line interface are covered in an earlier post here and here.\nStep 0. Create an account or sign in. Step 1. Set up an interactive environment with AWS server. This entails: a. define ssh key-pair. b. configure firewall. c. obtain static IP. d. obtain domain name. e. select an instance (AMI, type and disk size), generate and launch server.\nOnce the server is available connect via ssh, and login,\nThe only software necessary to install is docker and git. Install both with the following commands:\nsudo apt install -y git\nsudo snap install docker.io\nOnce the host is set up and the requisite software installed, we’ll have a customized virtual server wtih a static IP address, with a unique domain name and firewall in place. In other words, items 1, 2, and 3 from our hosting list above will be taken care of."
  },
  {
    "objectID": "blog/dockerize_compose/index.html#website",
    "href": "blog/dockerize_compose/index.html#website",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "2.3 Website",
    "text": "2.3 Website\nTo configure the web server and containerize our app we need to add three files to the repo, to go along with our Shiny app.\nWe’ll use Gitlab as an intermediate repository between or workstation and the server in a slightly indirect route to create and place the necessary files on the server but this approach will allow us to do all our continuing development on our local workstation and have the web app be automatically continually undated. We’ll create the configuration files we need on our workstation and push them to Gitlab and from there they can be accessed from our server.\nThese three configuation files are:"
  },
  {
    "objectID": "blog/dockerize_compose/index.html#tip-1.-docker-on-m1-macbook.",
    "href": "blog/dockerize_compose/index.html#tip-1.-docker-on-m1-macbook.",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "8.1 Tip 1. Docker on M1 macbook.",
    "text": "8.1 Tip 1. Docker on M1 macbook.\nTo get docker functioning properly with rocker images on M1 Mac desktop use --platform option.\ndocker build -t power1_shiny --platform linux/x86_64 .\ndocker run -d -p 80:3838 --platform linux/x86_64 power1_shiny"
  },
  {
    "objectID": "blog/dockerize_compose/index.html#tip-2-add-user-to-docker-group-on-server.",
    "href": "blog/dockerize_compose/index.html#tip-2-add-user-to-docker-group-on-server.",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "8.2 Tip 2 add user to docker group on server.",
    "text": "8.2 Tip 2 add user to docker group on server.\nAdd ubuntu to the docker group to allow docker to run without sudo.\nsudo usermod -aG docker ${USER}"
  },
  {
    "objectID": "blog/dockerize_compose/index.html#tip-3-ssh-config-file.",
    "href": "blog/dockerize_compose/index.html#tip-3-ssh-config-file.",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "8.3 Tip 3 ssh config file.",
    "text": "8.3 Tip 3 ssh config file.\nFor convenience, construct a config file in ~/.ssh as:\n\n\n\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\nthen you can ssh into the new server with\nsh> ssh rgtlab.org"
  },
  {
    "objectID": "blog/dockerize_simple/index.html",
    "href": "blog/dockerize_simple/index.html",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "blog/dockerize_simple/index.html#pre-launch-tasks",
    "href": "blog/dockerize_simple/index.html#pre-launch-tasks",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.1 Pre-launch tasks",
    "text": "3.1 Pre-launch tasks\nSelect a hosting service\nThere are a number of cloud based server options: Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean and Hetzner to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nAn overview of the process with AWS EC2 follows. (Detailed instructions for setting up a virtual server on EC2 both through the EC2 console and the command line interface were described in an earlier post: here and here.\nPreface. create an AWS account or sign in and navigate to the EC2 dashboard.\nstep 1. Set up a working environment within EC2. That is:\n\ngenerate secure shell (ssh) key-pair\nconfigure a firewall.\nobtain a static IP.\nobtain a domain name.\n\nOnce the environment is set up\nstep 2. Config and launch the server\nConfiguration has two parts:\n\nselect an instance operating system (ubuntu) and\nselect an instance type (t2-micro)\n\nOnce the server is available connect via ssh.\nssh -i \"~/.ssh/power1_app_ssh.pem\"  ubuntu@rgtlab.org\nor using the config setup described in Tip 1 at the end of this post.\nssh rgtlab.org \nThe only software tools necessary to install are Docker and Caddy. If you followed the CLI or console based instructions to set up a virtual server here or here Docker and Caddy will be pre-installed.\nOtherwise you can install them with the following commands:\nsudo apt update\nsudo apt install docker.io -y\nsudo apt install -y curl debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | \\\nsudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | \\\nsudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy -y\nAt this point we have a customized virtual server with a static IP address, unique domain name and a firewall in place. In other words, items 1, 2, 3, and 4 from our ‘hosting’ list above are taken care of."
  },
  {
    "objectID": "blog/dockerize_simple/index.html#post-launch-steps-on-local-workstation",
    "href": "blog/dockerize_simple/index.html#post-launch-steps-on-local-workstation",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.2 Post-Launch steps on local workstation",
    "text": "3.2 Post-Launch steps on local workstation\nTo run and host our Shiny app online we need to add a few configuration files to our power1_app development directory.\nThe first configuation file is:"
  },
  {
    "objectID": "blog/dockerize_simple/index.html#docker",
    "href": "blog/dockerize_simple/index.html#docker",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.3 Docker",
    "text": "3.3 Docker\n\na Docker configuration file (default name Dockerfile)\n\n\n\n  Photo by Ian Taylor on Unsplash \nWe’ll use docker to access R and Shiny. Here is our minimal dockerfile:\n\nDockerfile: Show the code\nFROM rocker/shiny:4.2.0\n# there are a bunch of files in /srv/shiny-server. delete them\nRUN rm -rf /srv/shiny-server\nCOPY /power1_shiny/* /srv/shiny-server/\n# rocker/shiny adds a user named shiny\nUSER shiny\nCMD [\"/usr/bin/shiny-server\"]\n\nThis file in just a few lines instructs Docker to build a new container based on a Rocker/Shiny image (which is a ubuntu image with R and Shiny installed) and layered with the addition of our Shiny code launch Shiny server listening on (default) port 3838.\nNote: We placed the power1_shiny/app.R code in the default location /srv/shiny-server so we only need to start the Shiny server and it will find the shiny program\nWe’ll use Caddy as our web server. Caddy is an open-source tool that has the very useful feature of automating the acquiring and installing of an SSL certificate. (An SSL cert is required by most browsers to use the encrypted communication protocol https.)\nTo configure the web server we need to add a Caddy configuration file (default name Caddyfile) to the power1_app directory.\nThe Caddy configuration file specifies three critical things.\n\nthe site domain name.\nthe authentication pair login/hash-password, for each user and\nthe ‘reverse proxy’ map that redirects requests to port 443 (ssl port) onto port 3838 (Shiny port) in the docker container.\n\nOur barebones Caddyfile looks like this:\n\nCaddyfile: Show the code\nrgtlab.org {\n    basicauth * /power1_shiny/* {\n        bob $2a$14$pYWd5O7JqNeGLS4m4CKkzemM2pq5ezn9bcTDowofZTl5wRVl8NTJm\n    }\n    root * /var/www/html\n    handle_path /power1_shiny/* {\n            reverse_proxy 0.0.0.0:3838\n    }\n    file_server\n}\n\nWe can accomplish what we need for items 4, 5, 6 and 7 through the Caddyfile.\nNote:\n\nrgtlab.org is our domain name\nthe basicauth directive specifies login credentials for user bob (password: vanilla47)\nhandle_path maps all https requests to port 3838 where Shiny is listening.\nroot directive tells Caddy where to look for the index.html file.\n\nProviding our servers domain name, rgtlab.org is sufficient to initiate an exchange with the letsencrypt service to generate an SSL certificate.\nLastly, we need an index.html file to provide a launch page for the app.\n\nindex.html: Show the code\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Power1 app</h1>\n    <ul>\n      <li><a href=\"./power1_shiny/\">Power1 app</a></li>\n    </ul>\n  </body>\n</html> \n\nOnce the config files, the index.html file and the Shiny code directory are in place copy we the entire power1_app directory to the server rgtlab.org with the secure copy command:\nscp -i \"~/.ssh/power1_app.pem\" -r ~/prj/power1_app/  ubuntu@rgtlab.org:~"
  },
  {
    "objectID": "blog/dockerize_simple/index.html#post-launch-steps-on-remote-server",
    "href": "blog/dockerize_simple/index.html#post-launch-steps-on-remote-server",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.4 Post-Launch steps on remote server",
    "text": "3.4 Post-Launch steps on remote server\nUse ssh to login to the server and cd to power1_app directory\nBuild and run the Docker container (using the docker approach allows us to avoid installing both R and Shiny on the virtual server rgtlab.org).\ndocker build -t power1_image .\nrun container\ndocker run -d --name=power1_shiny -p 3838:3838 --restart=always power1_image\nNext copy the Caddyfile to the location caddy expects to find it in the /etc/caddy directory\nsudo cp ./Caddyfile /etc/caddy/\ncopy index.html to location Caddy expects to find it in the /var/www/html directory\ncp  ./index.html /var/www/html/\nLastly, run the following command to restart Caddy\nsudo systemctl reload caddy\nThe App launch page will now be available at https://rgtlab.org.\nand you’re good to go!"
  },
  {
    "objectID": "blog/dockerize_simple/index.html#tip-construct-ssh-config-file.",
    "href": "blog/dockerize_simple/index.html#tip-construct-ssh-config-file.",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.5 Tip construct ssh config file.",
    "text": "3.5 Tip construct ssh config file.\nFor convenience, construct a config file in ~/.ssh as:\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nStrictHostKeyChecking no  #avoid known host file error message\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\nthen you can ssh into the new server with\nsh> ssh rgtlab.org"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nMimicing the softmood reddit post\n\n\n\n\n\n\n\n\n\n\n\n\nAug 31, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up OBS for webcasting\n\n\n\n\n\n\n\n\n\n\n\n\nAug 29, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nWriting a simple R package in S3.\n\n\n\n\n\n\n\nAWS\n\n\n\n\nGetting started with S3 OO programming in R\n\n\n\n\n\n\nAug 28, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up git for (solo) data science workflow\n\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nInstall Linux Mint on a Macbook Pro\n\n\nA set of tips for installation and post install\n\n\n\n\nMint\n\n\nR\n\n\nPython\n\n\nJulia\n\n\n\n\nstep by step description of howto install and customize a Mint instance for data science workflow\n\n\n\n\n\n\nAug 21, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nA straightforward strategy to get your Shiny app online, securely and continuously updated.\n\n\ngitlab, Docker-compose, EC2 version\n\n\n\n\nDocker\n\n\nShiny\n\n\ndocker-compose\n\n\n\n\nThis is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.”\n\n\n\n\n\n\nAug 19, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up Quarto\n\n\n\n\n\n\n\n\n\n\n\n\nAug 17, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up a minimal neovim environment for data science code development\n\n\nA neovim IDE for R, Python, and Julia\n\n\nThis is the first in a series of posts offering suggested strategies for setting up key tools for data science code development\n\n\n\n\n\n\nAug 10, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nUsing the AWS command line interface to launch an EC2 server\n\n\n\n\n\n\n\nAWS\n\n\n\n\nA single batch program to setup virtual server to host shiny app\n\n\n\n\n\n\nAug 10, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSet up a virtual server on AWS (in anticipation of hosting Shiny apps)\n\n\n\n\n\n\n\nAWS\n\n\n\n\nDetailed steps for setting up a lightweight server on AWS.\n\n\n\n\n\n\nJul 18, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up Nvim-R, vimtex and Ultisnips in vim for data science\n\n\n\n\n\n\n\nvim\n\n\nR\n\n\nTex\n\n\nUltisnips\n\n\n\n\nDetailed configuration for optimal interaction and efficiency\n\n\n\n\n\n\nJul 18, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nA simple process to get your Shiny app online (securely).\n\n\n\n\n\n\n\nDocker\n\n\nShiny\n\n\n\n\nThis is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\n\n\n\n\n\n\nJul 18, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\nNo matching items\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Blog},\n  url = {https://focusonr.org/blog},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. “Blog.” https://focusonr.org/blog."
  },
  {
    "objectID": "blog/install_mint_on_macbook/index.html#install-mint-on-a-macbook-pro",
    "href": "blog/install_mint_on_macbook/index.html#install-mint-on-a-macbook-pro",
    "title": "Install Linux Mint on a Macbook Pro",
    "section": "1.1 Install Mint on a macbook pro",
    "text": "1.1 Install Mint on a macbook pro\nThe specific goal of this “DIY” project is to refurbish a seven year old macbook pro with a new operating system. The OS we’ll focus on for this post is Linux Mint. Why Mint? Well, as its been, “since the beginning” of the linux era (circa 1993) the main challenge to installing a linux distribution on almost any PC or mac is wrestling with the hardware drivers: notably video, audio, trackpad, power management drivers. The Mint distro provides the drivers needed for our target mac making the install much, much simpler.\nThe target machine is a 2016 13-inch MacBook with four Thunderbolt 3 Ports.\nTo start the process get an iso file from the Mint website. The current “Vera” version of Mint iso file is 3.03 GB in size. The Victoria download site is here. The download torrent file is here.\nOn a macbook pro running macos you can use one of a number of apps to download the iso via torrent. we suggest Transmission\nhere .\nOnce downloaded we can transfer the iso file to a USB drive using one of several methods. On macos we suggest using the app balanaEtcher. Download balanaEtcher here\nInsert the bootable USB flash drive into the target macbook and reboot. Hold the ALT key to allow booting from the external USB drive. Select the icon for the USB drive and a grub menu will appear. From the Grub menu choose Start Linux Mint 21.2 Cinnamon 64-bit. and the Mint install program will boot.\nA linux mint desktop will appear. There is one icon on the screen labeled “install Linux Mint”. Double click it.\nA setup dialog will start. Select in sequence\n\nLanguage (English for us),\nNetwork (suggest skip),\ncodexes (suggest skip),\noptions for a fresh install or “something else” (choose fresh to devote full hard drive to Mint).\nLocation (Pacific region for us),\nname a root user, a hostname, and assign a password.\n\nIf you have ethernet connectivity plug the cable directly into the target macbook and Mint should connect automatically. For wireless use a supported modem e.g. Panda Wireless modem for internet access. Panda is supported since Mint 21.2 has Ralink RT5372 drivers installed. (see appendix for Broadcom install instructions)\n\nAdd a second monitor if available via HDMI or use Cinema display 27” via a Thunderbolt adapter on older macbooks.\n\nThats it. Reboot and login."
  },
  {
    "objectID": "blog/server_setup_aws_cli/index.html",
    "href": "blog/server_setup_aws_cli/index.html",
    "title": "Using the AWS command line interface to launch an EC2 server",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "blog/server_setup_aws_cli/index.html#create-security-group-script",
    "href": "blog/server_setup_aws_cli/index.html#create-security-group-script",
    "title": "Using the AWS command line interface to launch an EC2 server",
    "section": "2.1 Create security group script",
    "text": "2.1 Create security group script\n#!/usr/bin/env bash\n# The script generates a new security group \n# the group name is \"max_restrict\"\n# only ports 22 and 443 are open. \n# to open other ports replicate the last paragraph and change the port number. \n# Will fail if group name \"max_restrict\" in already in use. \n# reads vpc_id from the environment variables set in .zshrc\n#\naws ec2 create-security-group \\\n    --group-name max_restrict \\\n    --description \"most restrictive: ports 22 and 443 only\" \\\n    --tag-specifications \\\n    'ResourceType=security-group,Tags=[{Key=Name,Value=max_restrict}]' \\\n    --vpc-id $vpc_id \nwait    \nexport security_grp=`aws ec2 describe-security-groups | \\\njq -r '.SecurityGroups[] | select(.GroupName==\"max_restrict\").GroupId'`\n\naws ec2 authorize-security-group-ingress \\\n    --group-id $security_grp \\\n    --protocol tcp \\\n    --port 22 \\\n    --cidr \"0.0.0.0/0\" \n\n\naws ec2 authorize-security-group-ingress \\\n    --group-id $security_grp \\\n    --protocol tcp \\\n    --port 443 \\\n    --cidr \"0.0.0.0/0\""
  },
  {
    "objectID": "blog/server_setup_aws_cli/index.html#create-new-key-pair-with-a-project-name-flag",
    "href": "blog/server_setup_aws_cli/index.html#create-new-key-pair-with-a-project-name-flag",
    "title": "Using the AWS command line interface to launch an EC2 server",
    "section": "2.2 Create new key pair with a project name flag",
    "text": "2.2 Create new key pair with a project name flag\n\n\n#!/usr/bin/env bash\nbase=`basename $PWD`\nif [ -z \"$1\" ]\nthen\n  key_pair_name=$base\nelse\n  key_pair_name=\"$1\"\nfi\n\necho \"key_pair_name is $key_pair_name\"\n\nread -p \"Continue (y/n)?\" CONT\nif [ \"$CONT\" = \"y\" ]; then\n  echo \"Here we go!\";\nelse\n  echo \"too bad. bye.\"; exit; \nfi\n\ncd ~/.ssh \nrm -f  ~/.ssh/$key_pair_name.pem\naws ec2 create-key-pair  --key-name  $key_pair_name \\\n   --query 'KeyMaterial' --output text > ~/.ssh/$key_pair_name.pem\n\nwait\nchmod 600 ~/.ssh/$key_pair_name.pem"
  },
  {
    "objectID": "blog/server_setup_aws_cli/index.html#generate-instance",
    "href": "blog/server_setup_aws_cli/index.html#generate-instance",
    "title": "Using the AWS command line interface to launch an EC2 server",
    "section": "2.3 Generate instance",
    "text": "2.3 Generate instance\nstart up script. aws_create_instance.sh\n\n\n#!/usr/bin/env bash\nwhile getopts s:t:k:p: flag\ndo\n    case \"${flag}\" in\n        s) size=${OPTARG};;\n        t) type=${OPTARG};;\n        k) key_name=${OPTARG};;\n        p) proj_name=${OPTARG};;\n    esac\ndone\nbase=`basename $PWD`\nif [ -z \"$proj_name\" ]\nthen\n  proj_name=$base\nfi\n\n\n\nif [ -z \"$type\" ]\nthen\n type=\"t2.micro\" \nfi\n\nif [ -z \"$size\" ]\nthen\n  size=30\nfi\n\necho \"Review parameters: \"\necho \"---\"\necho \"proj_name is $proj_name\"\necho \"key_name is $key_name\"\necho \"vpc_id: $vpc_id\";\necho \"subnet_id: $subnet_id\";\necho \"ami_id: $ami_id\";\necho \"security_grp: $security_grp\";\necho \"static_ip: $static_ip\";\necho \"type: $type\";\necho \"size: $size\";\n\nread -p \"Review Notes (y/n)?\" NOTES\nif [ \"$NOTES\" = \"y\" ]; then\necho \"Notes on currect parameters:\"\necho \"security group should be in place already. check on EC2. \nIf not, run ./awscli_create_security.sh. \nKey pair should be in place. check in ~/.ssh. \nIf not run ./create_keypair.sh. \nami id is for ubuntu linux 22.04 LTS. \nIf not what is desired check EC2 list of instances. \";\nelse\n  echo \"I guess you know what you're doing\"; \nfi\n\nread -p \"Continue (y/n)?\" CONT\nif [ \"$CONT\" = \"y\" ]; then\n  echo \"Here we go!\";\nelse\n  echo \"too bad. bye.\"; exit; \nfi\n\n\n\naws ec2 run-instances \\\n    --image-id $ami_id \\\n    --count 1 \\\n    --instance-type $type \\\n    --key-name $key_name \\\n    --security-group-ids $security_grp \\\n    --subnet-id $subnet_id \\\n    --block-device-mappings \"[{\\\"DeviceName\\\":\\\"/dev/sda1\\\",\\\"Ebs\\\":{\\\"VolumeSize\\\":$size}}]\" \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$proj_name}]\"  \\\n    --user-data file://~/Dropbox/prj/c060/aws_startup_code.sh\nwait\niid=`aws ec2 describe-instances --filters \"Name=tag:Name,Values=$proj_name\" | \\\n    jq -r '.Reservations[].Instances[].InstanceId'`\naws ec2 wait instance-running --instance-ids $iid\necho \"the generated instance has ID: $iid\"\nrunning=`aws ec2 describe-instance-status --instance-id $iid\necho \"the instance status is $running\"\naws ec2 associate-address --public-ip $static_ip --instance-id $iid`\n\naws_startup.sh\n\n#!/bin/bash\nsudo apt update\nsudo apt install docker.io -y\nsudo apt install -y curl debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | \\\nsudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | \\\nsudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy -y\n\n\n\n\n\n\nTip 1.\n\n\n\nFor convenience, construct a config file in ~/.ssh as:\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\nthen we can ssh into the new server with\nsh> ssh rgtlab.org\n\n\nChange the access permissions: sudo chmod 600 power1ssh.pem to be more restrictive."
  },
  {
    "objectID": "blog/server_setup_aws_cli/index.html#appendix-1",
    "href": "blog/server_setup_aws_cli/index.html#appendix-1",
    "title": "Using the AWS command line interface to launch an EC2 server",
    "section": "2.4 Appendix 1 Set up AWS IAM",
    "text": "2.4 Appendix 1 Set up AWS IAM\nTo initiate batch processing via the AWS cli app. Set up aws access via the aws configure program.\nTo get the needed credentials to configure command line aws use the AWS IAM service.\nDetails follow:\nLog into AWS console.\nSearch for IAM service. Navigate to IAM dashboard.\nSelect Users in left hand panel.\nThen select Add Users button (in upper right).\nThen enter a User name in the form. Click Next (lower right)\nThen Create User.\nClick on the user name\nIn the page that comes up. Select Security Credentials tab (center of page).\nUnder Access Keys panel click Create access key (right side or bottom of panel).\nClick Command Line Interface CLI\nand at the bottom of the page click the checkbox “I understand…”.\nFinally select Create access key and\nchoose Download .csv file (lower right).\nNavigate Download screen to local ~/.aws directory.\nClick Done\nNow in the terminal on your workstation, configure the aws cli app via the command.\n aws configure \nEnter info from the credentials file just downloaded. After entering the AWS Access Key ID and AWS Secret Access Key information you are asked for a Region, (my region is us-west-1), and an output format (suggested output format is JSON)."
  },
  {
    "objectID": "blog/server_setup_aws_console/index.html",
    "href": "blog/server_setup_aws_console/index.html",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "blog/server_setup_aws_console/index.html#select-a-hosting-service",
    "href": "blog/server_setup_aws_console/index.html#select-a-hosting-service",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "2.1 Select a hosting service",
    "text": "2.1 Select a hosting service\nThere are a number of cloud based server hosting options to choose from: for example Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean or Hetzner to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nIn this post we’ll provide a step-by-step description of a process using Amazon Web Services Elastic Compute Cloud (AWS EC2) infrastructure.\nAWS is, in our view, a reasonable choice for setting up a small custom server. Its not the cheapest option, but the system is well documented and, in our experience, reliable.\nThe first step is to get set up with AWS. To start, open the EC2 console by visiting the URL:\n   https://aws.amazon.com/console\n(see margin figure)\nIn the console window choose regional service. For us its “N. California”.\n\n\n\n\n\nAWS console\n\n\nNext create an account, or sign in, and once you’re logged in navigate to the EC2 dashboard. Its through this dashboard (aka console) that we’ll define the parameters for the type of server to launch and the mechanisms for communicating with it. We’ll refer to these as “Pre-Launch” tasks."
  },
  {
    "objectID": "blog/server_setup_aws_console/index.html#aws-working-environment",
    "href": "blog/server_setup_aws_console/index.html#aws-working-environment",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "2.2 AWS Working Environment",
    "text": "2.2 AWS Working Environment\nAlong with selecting a server we need to set up a working environment. We recommend setting up the working environment before launching the server, as it saves some back and forth with the console, but the order is not critical. The working environment consists of four main components:\n\nA secure shell (ssh) key-pair to allow remote and secure login to the virtual server once its launched.\nA firewall or security model which will restrict server access to only secure connections. The firewall closes off all incoming traffic except through those ports specifically named.\n\nA static IP address. A static IP is required for maintaining the link between the domain name and the server when rebooting. (The default is for the instance/server to be assigned a new IP address each time its rebooted). and\nA domain name, say rgtlab.org. A domain name is not required but will facilitate collaborator access by not needing to use the IP address directly.\n\nThese working environment components are not directly tied to any specific server. In fact, you can define multiple instances of each component. The only requirement is that you pick one of each to associate with each server.\n\n2.2.1 Ssh key pair\nIn order to securely communicate with the server we need to exchange an ssh key pair with AWS. The pair consists of a private key and a public key. We can identify an ssh key pair in one of two ways in EC2. Either, generate the pair locally, on our workstation and upload the public key to EC2, or have EC2 generate the key pair and download the private key.\nFor the first option we create a directory on our workstation to hold the keys and navigate to it, e.g. ~/.ssh. In the ~/.ssh directory generate the keys with the command\nssh-keygen -m PEM\n“PEM” defines the key format. More information on public key authentication can be found here. In the interactive dialog that follows name the key prefix something like power1_app. The dialog will ask for a passphrase. You can enter a phrase for an additional level of security, but its not required. The ssh-keygen program will generate two files: power1_app.pem and power1_app.pub\nTo complete the process return to the EC2 dashboard and select Actions and then Import key pair in the left panel. Enter the name power1_app and select the Browse button. Navigate to the file power1_app.pub in the directory ~/.ssh and and select the Import key pair button at the bottom of the page.\nFor the second approach select Create key pair button in the upper right of the console page. A form will appears and ask for a name. Enter something like power1_app. Select RSA for key pair type and .pem for key file format. The keys will be created and the private key power1_app.pem will be downloaded to our local machine to the and should be place in the~/.ssh directory. Lastly, change the access permissions for the private key with the following command:\nsudo chmod 600 power1_app.pem\n\n\n2.2.2 Firewall\nTo create a firewall click on Network and Security settings in the left hand panel. Choose Create security group and select Allow SSH traffic and Allow HTTPS traffic. This will create a firewall that leaves open only ports 22 and 443, for ssh and https incoming traffic respectively. Lastly, name the security group something like power1_firewall.\n\n\n2.2.3 Static IP address\nYou can use the elastic IP service to get a static IP. Navigate to Network and Security again and select Allocate Elastic IP. An IP will be assigned from the EC2 pool of available IPv4 IP addresses e.g. 13.57.139.31.\n\n\n2.2.4 Domain Name\nTo obtain a dedicated domain name leave the EC2 dashboard and go to Amazon route 53 service to select a domain name and associate it with our static IP.\nOnce a domain name is acquired, e.g. rgtlab.org, you can associate it with any IP address, static or dynamic. This can be done via the Route 53 service. For example, to associate domain name rgtlab.org with the elastic IP 13.57.139.31 do the following in Route 53:\n\nclick on hosted zones in the side panel\nclick on rgtlab.org in center panel\nclick on checkbox for rgtlab.org type=A line\nthen click on edit record in right panel\nchange IP address to the assigned static IP ."
  },
  {
    "objectID": "blog/server_setup_aws_console/index.html#select-and-launch-instance",
    "href": "blog/server_setup_aws_console/index.html#select-and-launch-instance",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "2.3 Select and launch instance",
    "text": "2.3 Select and launch instance\n\nFrom Quick Start in the EC2 dashboard select an operating system for the server. We recommend the Ubuntu OS. Ubuntu is a mature Linux distribution based on Debain Linux. Click the Ubuntu button. (see margin figure)\n\n\nName the server, say power1\n\n\nNext choose an instance type, e.g. t2-micro. Different instance types are combinations of number of processors, memory, storage capacity, and network performance.\nselect Configure Instance Details\nchoose a Key pair e.g. select power1_app from your environment.\nAdd security group, e.g. use power1_firewall from your environment.\nchoose a storage amount. e.g. enter 30 GB of EBS General Purpose (SSD) or     Magnetic storage. Thirty GBs is the maximum allowed in the ‘Free tier’ of servers on AWS. In our experience smaller disk sizes can lead to problems.\nclick Launch Instance\n\nto launch the server."
  },
  {
    "objectID": "blog/setup_nvim-R_vimtex_ultisnips/index.html",
    "href": "blog/setup_nvim-R_vimtex_ultisnips/index.html",
    "title": "Setting up R, vimtex and Ultisnips in vim on a Mac",
    "section": "",
    "text": "vim setup\n\n\n\n1 Introduction\nStart by installing vim (neovim), R, vimtex, and ultisnips\nSee post “Setting up a minimal neovim…” for details on installing plugins with Neovim.\nhttps://www.reddit.com/r/vim/comments/7c7wd9/vim_vimtex_zathura_on_macos/\nhttps://stackoverflow.com/questions/40077211/e185-cannot-find-color-scheme\nhttps://github.com/morhetz/gruvbox/issues/219\nhttps://github.com/junegunn/vim-plug/issues/325\nhttps://github.com/dylanaraps/pywal/wiki/Getting-Started\nhttps://github.com/dylanaraps/wal.vim\nhttps://github.com/dylanaraps/pywal/wiki/Customization\nhttps://github.com/lervag/vimtex/issues/1420\nhttps://latextools.readthedocs.io/en/latest/install/\nhttps://mg.readthedocs.io/latexmk.html\nhttps://gist.github.com/LucaCappelletti94/920186303d71c85e66e76ff989ea6b62\nhttps://github.com/lervag/vimtex/issues/1420\nhttps://latextools.readthedocs.io/en/latest/install/\nhttps://github.com/lervag/vimtex/issues/1420\nhttps://github.com/lervag/vimtex/issues/940\nhttps://github.com/lervag/vimtex/issues/663\nhttp://www.math.cmu.edu/~gautam/sj/blog/20140310-zathura-fsearch.html\nhttps://gitter.im/SirVer/ultisnips\nhttps://github.com/SirVer/ultisnips/issues/1107\nhttps://github.com/SirVer/ultisnips/issues/1022\nhttps://github.com/SirVer/ultisnips/issues/850\nhttps://superuser.com/questions/1115159/how-do-i-install-vim-on-osx-with-python-3-support\nhttps://jdhao.github.io/2020/01/05/ultisnips_python_interpolation/\nhttp://witkowskibartosz.com/blog/python_snippets_in_vim_with_ultisnips.html#.Xnw9gtP7TRY\nhttps://germaniumhq.com/2019/02/07/2019-02-07-Vim-Ultimate-Editing:-UltiSnips/\nhttp://vimcasts.org/episodes/ultisnips-python-interpolation/\nhttps://wraihan.com/posts/vimtex-and-zathura/\n\n\n2 .vimrc\n\nlet mapleader = \",\"\nlet maplocalleader = \" \"\nset nocompatible\nset encoding=utf-8\nsyntax enable\nset lazyredraw\nset autochdir\nset termguicolors\nset number relativenumber\nset clipboard=unnamed\nset textwidth=72\nset colorcolumn=80\nset cursorline\nset hlsearch   \nset splitright\nset hidden   \nset incsearch    \nset noswapfile\nset showmatch\nset ignorecase\nset smartcase\nset gdefault\nfiletype plugin on\n\"\ncall plug#begin()\n\"essential plugins\nPlug 'jpalardy/vim-slime'\nPlug 'dense-analysis/ale'\nPlug 'lervag/vimtex'\nPlug 'sirver/ultisnips'\n\"\n\"IDE like enhancements\nPlug 'vifm/vifm.vim'\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\nPlug 'junegunn/fzf.vim'\nPlug 'tpope/vim-unimpaired'\nPlug 'ervandew/supertab'\nPlug 'junegunn/vim-peekaboo'\nPlug 'justinmk/vim-sneak'\nPlug 'tpope/vim-surround'\nPlug 'tpope/vim-repeat'\nPlug 'tpope/vim-commentary'\nPlug 'machakann/vim-highlightedyank'\nPlug 'vim-airline/vim-airline'\ncall plug#end()\nlet g:clever_f_smart_case = 1\nlet g:tex_flavor='latex'\nlet g:sneak#s_next = 1\nlet g:sneak#use_ic_scs = 1\nlet g:vimtex_view_method='skim'\nlet g:vimtex_quickfix_mode=0\nlet g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips']\nlet g:UltiSnipsJumpForwardTrigger=\"<c-j>\"\nlet g:UltiSnipsJumpBackwardTrigger=\"<c-k>\"\nnnoremap <localleader><leader> <C-u>\nnnoremap <localleader><localleader> <C-d>\nnoremap ; :\nnoremap : ;\nnoremap - $\ntnoremap ZZ q('no')<C-\\><C-n>:q!<CR>\ntnoremap ZQ q('no')<C-\\><C-n>:q!<CR>\ntnoremap ZS style_dir()<CR>\ntnoremap ZX exit<CR>\nnnoremap <localleader>m vipgq\nnnoremap <leader>v :edit ~/.vimrc<cr>\nnnoremap <leader>a ggVG\nnnoremap <leader>t :tab split<cr>\nnnoremap <leader>u :UltiSnipsEdit<cr>\nnnoremap <leader>U <Cmd>call UltiSnips#RefreshSnippets()<CR>\nnnoremap <Leader>0 :ls!<CR>:b<localleader>\ntnoremap <leader>0 <C-w>:ls!<cr>:b<localleader>\ntnoremap <F1> <C-\\><C-n>\ninoremap <silent> <Esc> <Esc>`^\ntnoremap <leader><leader> <C-w>w\nnnoremap <leader><leader> <C-w>w\nnnoremap <leader>1 <C-w>:b1<cr>\nnnoremap <leader>2 <C-w>:b2<cr>\nnnoremap <leader>3 <C-w>:b3<cr>\ntnoremap <leader>1 <C-w>:b1<cr>\ntnoremap <leader>2 <C-w>:b2<cr>\ntnoremap <leader>3 <C-w>:b3<cr>\n\ninoremap <F12> <C-x><C-o>\ninoremap <F10> <C-x><C-k>\nif $TERM_PROGRAM =~ \"iTerm\"\n    let &t_SI = \"\\<Esc>]50;CursorShape=1\\x7\" \" Vertical bar in insert mode\n    let &t_EI = \"\\<Esc>]50;CursorShape=0\\x7\" \" Block in normal mode\nendif\n\" ref: https://hamberg.no/erlend/posts/2014-03-09-change-vim-cursor-in-iterm.html\nset completeopt+=longest,menuone,noselect\nlet g:airline#extensions#tabline#enabled = 1\nlet g:airline#extensions#fzf#enabled = 1\nlet g:SuperTabDefaultCompletionType = \"<C-X><C-O>\"\nset complete+=k\nset dictionary=/usr/share/dict/words\nnnoremap <Leader>b :Buffers<CR>\nnnoremap <leader>f :Files<CR>\nnnoremap <leader>d :EditVifm<cr>\nnnoremap <Leader>r :Rg<CR>\nnnoremap <Leader>/ :BLines<CR>\nnnoremap <Leader>' :Marks<CR>\nnnoremap <Leader>s :Snippets<CR>\nhighlight clear ALEErrorSign\nhighlight clear ALEWarningSign\nlet g:ale_sign_error = '●'\nlet g:ale_sign_warning = '.'\nlet g:ale_completion_enabled = 1\nhighlight Pmenu  guifg=Black guibg=cyan gui=bold\nhighlight PmenuSel  gui=bold guifg=White guibg=blue\nnnoremap <leader>n :ALENext<CR>\nlet g:slime_target = \"vimterminal\"\nlet g:slime_no_mappings = 1\nlet g:slime_vimterminal_config = { \"vertical\": 1 }\nlet g:slime_vimterminal_cmd = \"R\"\nlet g:slime_cell_delimiter = \"```\"\n:nnoremap <C-c><C-c> <Plug>SlimeParagraphSend\nautocmd FileType r,rmd nnoremap  <CR> V<Plug>SlimeRegionSend<CR>\nautocmd FileType r,rmd nnoremap <localleader>l <Plug>SlimeSendCell<CR>\nautocmd FileType r,rmd xnoremap  <CR> <Plug>SlimeRegionSend<CR>\nnnoremap Q @@\n\" maps for R and RMD, space + letter. def as macros. stored in \" ~/.viminfo\nnnoremap <space>j @j    \" j jump to next chunk\nnnoremap <space>h @h    \" h print head of object\n\nnnoremap <space>p @p    \" p print object\n\nnnoremap <space>d @d    \" d dim of object\nnnoremap <space>s @s    \" s structure of object\nnnoremap <space>g @g    \" g is <space>l then <space>j\n\n\n3 .zshrc\n\nexport ZSH=\"$HOME/.oh-my-zsh\"\nexport EDITOR=\"vim\"\nZSH_THEME=\"muse\"\n# Uncomment the following line to display red dots whilst waiting for completion.\n# You can also set it to another string to have that shown instead of the default red dots.\n# e.g. COMPLETION_WAITING_DOTS=\"%F{yellow}waiting...%f\"\n# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)\nCOMPLETION_WAITING_DOTS=\"true\"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\nDISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n\nplugins=(zsh-autosuggestions z jump git pass vi-mode scd common-aliases you-should-use)\n\nsource $ZSH/oh-my-zsh.sh\n\n Preferred editor for local and remote sessions\n if [[ -n $SSH_CONNECTION ]]; then\n   export EDITOR='vim'\n else\n   export EDITOR='mvim'\n fi\n\n Compilation flags\n export ARCHFLAGS=\"-arch x86_64\"\n\nbindkey -v\nalias py='python'\nalias nt='nvim'\nalias mm='mutt'\nalias sk='open -a Skim'\nalias vc='vim ~/.vimrc'\nalias nc='nvim-qt ~/.config/nvim/init.lua'\nalias vz='vim ~/.zshrc'\nalias sz='source ~/.zshrc'\nalias vm='vim ~/.muttrc'\nalias dt='cd ~/Dropbox/dotfiles'\nalias p2='enscript -C -2 -r -j --media=Letter'\nalias p1='enscript  -j --media=Letter'\nalias yr=\"yabai --restart-service\"\nalias lt='eza -lrFha -sold'\nalias rr='ranger'\nalias mvim=\"/Applications/MacVim.app/Contents/bin/mvim\"\nalias tp='trash-put -v'\nalias rm='echo \"This is not the command you are looking for.\"; false'\nalias s='scd'\nalias ZZ='exit'\ncdpath=($HOME/Dropbox/prj $HOME/Dropbox/sbx $HOME/Dropbox/work )\nexport PATH=\".:$PATH:$HOME/bin\"\nmma () { /Applications/Mathematica.app/Contents/MacOS/WolframKernel -script $1 }\nfunction gz() {\n    git add .\n    git commit -a -m \"$1\"\n    git push\n}\n\nexport TEXINPUTS='.:/Users/zenn/prj/images:/Users/zenn/prj:'\n\nexport PATH=\"/opt/homebrew/bin:$PATH\"\nexport PATH=\"/opt/homebrew/sbin:$PATH\"\n\nsetopt interactivecomments\n#source ~/.iterm2_shell_integration.zsh\n\nexport vpc_id=\"vpc-14814b73\"\nexport subnet_id=\"subnet-f02c90ab\"\nexport ami_id=\"ami-014d05e6b24240371\"\nexport key_name=\"power1_app\"\nexport instance_type=\"t2.micro\"\nexport storage_size=\"30\"\nexport ami_id=\"ami-014d05e6b24240371\"\nexport security_grp='sg-02fcdde25246d9fcd'\nexport static_ip='13.56.106.160'\nif type rg &> /dev/null; then\n  export FZF_DEFAULT_COMMAND='rg --hidden -l \"\"'\n  export FZF_DEFAULT_OPTS='-m --height 50% --border'\nfi\nZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=\"fg=011,bg=black,bold,underline\"\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {{Setting} up {R,} Vimtex and {Ultisnips} in Vim on a {Mac}},\n  date = {2023-09-23},\n  url = {https://focusonr.org/blog/setup_nvim-R_vimtex_ultisnips},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023.“ Setting up R, Vimtex and\nUltisnips in Vim on a Mac.” September 23, 2023. https://focusonr.org/blog/setup_nvim-R_vimtex_ultisnips."
  },
  {
    "objectID": "blog/setupneovim/index.html",
    "href": "blog/setupneovim/index.html",
    "title": "Setting up a minimal neovim environment for data science code development",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash \n\n1 Introduction\nNeovim (a fork of Vim) is a text editor that has several advantages for data science code development. One of the main attractions is that it is open source and has a number of useful plugins to facilitate working on R, python, and julia code. Also, its modal, keyboard-centric system allows text and code manipulation at potentially far greater speed than conventional, mouse-centric, systems.\nIn this post we describe both a minimal, yet functional setup, as well as a more extensive setup utilizing several of the newest neovim-only plugins, for neovim to allow IDE style code editing and REPL interaction for the three primary data science coding tools: R, Python, and Julia.\nOur presentation here is for a Macos environment. Appendix one contains required adjustments for a ubuntu linux environment.\n\n\n2 Install the latest stable version of neovim.\nWith minimal effort we can install both the terminal and GUI versions of neovim. The simplist approach is to use homebrew:\n> brew install neovim neovim-qt\nSet up convenience aliases in zsh.\n> alias ng = neovim-qt\n> alias nt = neovim\n(mnemonic: the t in nt is for terminal, the g in ng is for GUI)\n\n\n3 Configure neovim\nThe standard location for neovim configuration files on “unix-like” systems is ~/.config/nvim. The main config file is either init.vim (VimL) or init.lua (Lua). In this post we’ll focus on lua based configuration.\nSpecifically, the following code block creates an nvim subdirectory under ~/.config and initialize a configuration file init.lua.\nHere is the file hierarchy we’ll construct. In fact all the code could be bundled into the init.lua file, but this approach is clearer and cleaner.\n.\n|-- ginit.vim\n|-- init.lua\n|-- lazy-lock.json\n|-- lua\n|   |-- basics.lua\n|   |-- leap-config.lua\n|   |-- nvim-R-config.lua\n|   |-- nvim-cmp-config.lua\n|   |-- nvim-telescope-config.lua\n|   |-- nvim-tree-config.lua\n|   `-- treesitter-config.lua\n|-- my_snippets\n|   |-- all.snippets\n|   |-- giles.tex.snipppets\n|   |-- mail.snippets\n|   |-- r.snippets\n|   |-- rmd.snippets\n|   |-- snippets.snippets\n|   |-- tex.snippets\n|   |-- text.snippets\n|   `-- txt.snippets\n|-- spell\n|   |-- en.utf-8.add\n|   `-- en.utf-8.add.spl\nTo install the lazy plugin manager\ngit clone https://github.com/folke/lazy.nvim.git \\\n   ~/.local/share/nvim/lazy/lazy.nvim\nAdd the following code to init.lua list the plugins needed to be installed from github and “feed” them to Lazy for installation.\nNvim-R, Leap, UltiSnips, and vimtex need additional configuration. The required code is contained in bespoke files under the lua directory.\n\n\n\nvim.g.mapleader = \",\"\nvim.g.maplocalleader = \" \"\nvim.opt.rtp:prepend(\"~/.local/share/nvim/lazy/lazy.nvim\")\nrequire('plugins')\nrequire('basics')\nrequire('nvim-tree-config')\nrequire('nvim-R-config')\nrequire('nvim-telescope-config')\nrequire('leap').add_default_mappings()\nrequire('leap-config')\nrequire('lualine').setup()\nList of plugins\n\n\n\n\n\n\nrequire('lazy').setup({\n--\n--minimal data science setup\n--\n'jalvesaq/Nvim-R',\n'lervag/vimtex',\n'SirVer/ultisnips',\n'jalvesaq/vimcmdline',\n--\n--optional utilities\n--\n\"nvim-lualine/lualine.nvim\",\n\"bluz71/vim-moonfly-colors\",\n'junegunn/vim-peekaboo',\n'tpope/vim-commentary',\n'francoiscabrol/ranger.vim',\n'machakann/vim-highlightedyank',\n'tpope/vim-surround',\n'ggandor/leap.nvim',\n--\n--neovim specific\n'nvim-lua/plenary.nvim',\n'nvim-tree/nvim-web-devicons',\n'nvim-tree/nvim-tree.lua',\n'nvim-telescope/telescope.nvim',\n'nvim-treesitter/nvim-treesitter',\n'neovim/nvim-lspconfig',\n})\n\n\n\n4 plugin discussions\n\n\n# basics\n```sh\n\n\n\n\n\n\nlocal map = vim.keymap.set\nlocal opts = {noremap = true}\nvim.cmd([[\n\"    paste registers into terminal\ntnoremap <expr> <C-R> '<C-\\><C-N>\"'.nr2char(getchar()).'pi'\nset background=dark\ncolorscheme moonfly\nlet $FZF_DEFAULT_COMMAND = 'rg --files --hidden'\nset completeopt=menu,menuone,noinsert,noselect\nset number relativenumber\nset textwidth=80\nset cursorline\nset clipboard=unnamed\nset iskeyword-=_ \nset hlsearch   \nset splitright\nset hidden   \nset incsearch    \nset noswapfile\nset showmatch\nset ignorecase\nset smartcase\nset gdefault\nfiletype plugin on\nset encoding=utf-8\nset nobackup\nset nowritebackup\nset updatetime=300\nset signcolumn=yes\nset colorcolumn=80\nset timeoutlen=1000 ttimeoutlen=10\nlet g:UltiSnipsSnippetDirectories = ['~/.config/nvim/my_snippets']\nlet g:UltiSnipsExpandTrigger=\"<tab>\"\nlet g:UltiSnipsJumpForwardTrigger=\"<c-j>\"\nlet g:UltiSnipsJumpBackwardTrigger=\"<c-k>\"\nnnoremap <leader>U <Cmd>call UltiSnips#RefreshSnippets()<CR>\n\nautocmd BufWinEnter,WinEnter term://* startinsert\n\"autocmd TermOpen * exec \"normal! i\"\n]])\nmap('n', ':', ';', opts)\nmap('n', ';', ':', opts)\nmap('n', '<leader>u',':UltiSnipsEdit<cr>', opts)\nmap('n', '<leader>U','<Cmd>call UltiSnips#RefreshSnippets()<cr>', opts)\nmap('n', '<localleader><localleader>','<C-d>', opts)\nmap('n', '-','$', opts)\nmap('n', '<leader>w','vipgq', opts)\nmap('n', '<leader>v',':edit ~/.config/nvim/init.lua<cr>', opts)\nmap('n', '<leader>n',':edit ~/.config/nvim/lua/basics.lua<cr>', opts)\nmap('n', '<leader>a','ggVG', opts)\nmap('n', '<leader>t',':tab split<cr>', opts)\nmap('n', '<leader>y',':vert sb3<cr>', opts)\nmap('n', '<leader>0',':ls!<CR>:b<Space>', opts)\nmap('n', '<leader><leader>','<C-w>w', opts)\nmap('n', '<leader>1','<C-w>:b1<cr>', opts)\nmap('n', '<leader>2','<C-w>:b2<cr>', opts)\nmap('n', '<leader>3','<C-w>:b3<cr>', opts)\nmap('t',  'ZZ', \"q('yes')<CR>\", opts)\nmap('t',  'ZQ', \"q('no')<CR>\", opts)\nmap('v',  '-', '$', opts)\nmap('t',  '<leader>0','<C-\\\\><C-n><C-w>:ls!<cr>:b<Space>', opts)\nmap('t',  '<Escape>','<C-\\\\><C-n>', opts)\nmap('t',  ',,','<C-\\\\><C-n><C-w>w', opts)\nmap('i',  '<Esc>', '<Esc>`^', opts)\n\n\n\n5 Set up R\n\n\n\n\n\n\nvim.cmd([[\niabb <buffer> x %>%\niabb <buffer> z %in% \nlet R_auto_start = 2\nlet R_enable_comment = 1\nlet R_hl_term = 0\nlet R_clear_line = 1\nlet R_pdfviewer = \"zathura\" \nlet R_assign = 2\nlet R_latexcmd = ['xelatex']\naugroup rmarkdown\nautocmd!\nautocmd FileType rmd,r nnoremap <buffer> <CR>  :call SendLineToR(\"down\")<CR>\nautocmd FileType rmd,r nnoremap <buffer> <space>' :call RMakeRmd(\"default\")<cr>\nautocmd FileType rmd,r noremap <space>i :call RAction(\"dim\")<cr>\nautocmd FileType rmd,r noremap <space>h :call RAction(\"head\")<cr>\nautocmd FileType rmd,r noremap <space>p :call RAction(\"print\")<cr>\nautocmd FileType rmd,r noremap <space>q :call RAction(\"length\")<cr>\nautocmd FileType rmd,r noremap <space>n :call RAction(\"nvim.names\")<cr>\nautocmd FileType rmd,r vmap <buffer> <CR> <localleader>sd\nautocmd FileType rmd,r nmap <buffer> <space>j <localleader>gn\nautocmd FileType rmd,r nmap <buffer> <space>k <localleader>gN\nautocmd FileType rmd,r nmap <buffer> <space>l <localleader>cd\naugroup END\n]])\n\n\n\n\n\n\n\n\n6 Appendix Ubuntu tweaks\n\n\n7 Isolate configuration files\ngit clone https://github.com/LazyVim/starter ~/.config/LazyVim\nNVIM_APPNAME=LazyVim nvim\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Setting up a Minimal Neovim Environment for Data Science Code\n    Development},\n  date = {2023-08-10},\n  url = {https://focusonr.org/blog/setupneovim},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023. “Setting up a Minimal Neovim\nEnvironment for Data Science Code Development.” August 10, 2023.\nhttps://focusonr.org/blog/setupneovim."
  },
  {
    "objectID": "blog/setupobs/index.html",
    "href": "blog/setupobs/index.html",
    "title": "Setting up OBS for webcasting",
    "section": "",
    "text": "1 Introduction\nWebcasting for biostatistics is the challenge.\nLets take it one step at a time.\nStart with the open source project OBS.\nWelcome | OBS\nSteps to get started. Work with youtube video. (How to Use OBS Studio - Complete Tutorial for Beginners! - YouTube)[https://www.youtube.com/watch?v=-puA85ciDEM]\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Setting up {OBS} for Webcasting},\n  date = {2023-08-29},\n  url = {https://focusonr.org/blog/setupobs},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023. “Setting up OBS for\nWebcasting.” August 29, 2023. https://focusonr.org/blog/setupobs."
  },
  {
    "objectID": "blog/setupquarto/index.html",
    "href": "blog/setupquarto/index.html",
    "title": "Setting up Quarto",
    "section": "",
    "text": "Quarto is an extension of the Rmarkdown ecosystem. It leverages the power of Pandoc. From my perspective it provides a number of useful additional tools for literate programming and blogging.\nI’m using quarto for my lab’s home page with an embedded blog. rgtlab blog.\nRefererences:\nUseful archive:\nmcanouil/awesome-quarto: A curated list of Quarto talks, tools, examples & articles! Contributions welcome!\nConsider some ideas from\n\nRob Hyndman - Template of quarto website\nEric Ekholm - Modifying the Default Quarto Blog Structure\nAllison Hill - We don’t talk about Quarto\nNick Tierney - Notes on Changing from Rmarkdown/Bookdown to Quarto\n\nThis post will include some of the most useful and interesting quarto tools presented in the context of a Palmer Penguins data set analysis."
  },
  {
    "objectID": "blog/setupquarto/index.html#columns",
    "href": "blog/setupquarto/index.html#columns",
    "title": "Setting up Quarto",
    "section": "2.1 2 - Columns",
    "text": "2.1 2 - Columns\n\n\n\ngeom_density(\n  mapping = NULL,\n  data = NULL,\n  stat = \"density\",\n  position = \"identity\",\n  ...,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE,\n  outline.type = \"upper\"\n)\n\n\nstat_density(\n  mapping = NULL,\n  data = NULL,\n  geom = \"area\",\n  position = \"stack\",\n  ...,\n  bw = \"nrd0\",\n  adjust = 1,\n  kernel = \"gaussian\",\n  n = 512,\n  trim = FALSE,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE\n)"
  },
  {
    "objectID": "blog/setupquarto/index.html#margin-captions",
    "href": "blog/setupquarto/index.html#margin-captions",
    "title": "Setting up Quarto",
    "section": "2.2 2 - Margin captions",
    "text": "2.2 2 - Margin captions\n\nggplot(data = gapminder::gapminder, mapping = aes(x = lifeExp, fill = continent)) +\n  stat_density(position = \"identity\", alpha = 0.5)\n\n\n\n\nBla bla bla. This is a caption in the margin. Super cool isn’t it?\n\n\n\n\nStart with running quarto create-project at ~/prj level\n❯ quarto create-project qblog --type website:blog\n\nCreating project at /Users/zenn/Dropbox/prj/qblog:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created posts/welcome/index.qmd\n  - Created posts/post-with-code/index.qmd\n  - Created about.qmd\n  - Created styles.css\n  - Created posts/_metadata.yml\n-   cd to ~/qblog/posts/\n-   create a new directory, say setupquarto\n-   cd to ~/qblog/posts/setupquarto\n-   vim index.qmd\nTo create a minimal shell of a blog type:\n> quarto create-project minimal_blog --type website:blog\nThis creates the following file structure:\n> tree --charset unicode\n.\n|-- _quarto.yml\n|-- about.qmd\n|-- index.qmd\n|-- posts\n|   |-- _metadata.yml\n|   |-- post-with-code\n|   |   |-- image.jpg\n|   |   `-- index.qmd\n|   `-- welcome\n|       |-- index.qmd\n|       `-- thumbnail.jpg\n|-- profile.jpg\n`-- styles.css\nContrast to Rob Heyneman’s template blog:\n~/Dropbox/prj/qblog/blog/setupquarto/robh_blog (main ✔)✭ ᐅ tree -L 1 --charset unicode\n.\n|-- _quarto.yml\n|-- _site\n|-- about\n|-- blog\n|-- header.html\n|-- index.qmd\n|-- mariecurie.png\n|-- publications\n|-- quartoweb.Rproj\n|-- software\n|-- styles.css\n|-- talks\n`-- teaching"
  },
  {
    "objectID": "blog/simpleS3/index.html",
    "href": "blog/simpleS3/index.html",
    "title": "Writing a simple R package in S3.",
    "section": "",
    "text": "S3 OOP in R"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Thomas lab",
    "section": "",
    "text": "Director: Professor Ronald G. Thomas School of Public Health UC, San Diego La Jolla, California\nFocused on new and interesting data science technologies."
  },
  {
    "objectID": "posts/dockerize_compose/index.html",
    "href": "posts/dockerize_compose/index.html",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#hosting",
    "href": "posts/dockerize_compose/index.html#hosting",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "2.1 Hosting",
    "text": "2.1 Hosting\n\n\n\n\n\nData flow \n\n\nFigure 2 illustrates the tools we’ll use and the flow of program and configuration files. In order to host power1 online we’ll need to complete the following tasks:\n\ncreate a virtual server (connected via ssh) with a firewall\nobtain a static IP address (to identify the server online)\nobtain a domain name (name for IP address)\ninstall and configure a webserver (tool to interact with https protocol requests and respond)\nobtain and install an SSL certificate (to allow encrypted communication)\nsetup an authentication method (password protection)\nconfigure a reverse proxy method (translate https, port 443, requests to Shiny, port 3838)\n\nAt first glance these 7 requirements can appear daunting, but on closer inspection all can be met with relative ease and minimal cost ( using a cloud-hosting service, e.g. Amazon’s EC2 or Digital Ocean, and a “leased” domain name from, e.g. GoDaddy, or Amazon’s Route 53) or no cost( if you have your own server with IP address, and domain name)"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#select-a-hosting-service",
    "href": "posts/dockerize_compose/index.html#select-a-hosting-service",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "2.2 Select a hosting service",
    "text": "2.2 Select a hosting service\nThere are a number of cloud based server options: Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nAn overview of the process with EC2 follows. Detailed instructions for AWS EC2 are covered in an earlier post here.\n\nCreate an account or sign in.\nSet up an interactive environment with AWS server.\n\ndefine ssh key-pair.\nconfigure firewall.\nrequest static IP.\nobtain domain name.\nselect an instance and launch server.\n\n\nOnce the server is available connect via ssh, and login,\nThe only necessary software to install is docker and git. Install both with the following commands:\nsudo apt install -y git\nsudo snap install docker.io\nOnce the host is set up and the requisite software installed we’ll have a customized virtual server wtih a static IP address, and a unique domain name and firewall in place. In other words, items 1, 2, and 3 from our hosting list above will be taken care of."
  },
  {
    "objectID": "posts/dockerize_compose/index.html#website",
    "href": "posts/dockerize_compose/index.html#website",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "2.3 Website",
    "text": "2.3 Website\nTo configure the web server and containerize our app we need to add three files to the repo, to go along with our Shiny app.\nWe’ll use a slightly indirect route to create and place the necessary files on the server but this approach will allow to do all our countinuing development on our local workstation and have the web app be automatically continually undated. We’ll create the configuration files we need on our workstation and push them gitlab and from there they can be accessed from our server.\nThese three configuation files are:"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#tip-1.-docker-on-m1-macbook.",
    "href": "posts/dockerize_compose/index.html#tip-1.-docker-on-m1-macbook.",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "7.1 Tip 1. Docker on M1 macbook.",
    "text": "7.1 Tip 1. Docker on M1 macbook.\nTo get docker functioning properly with rocker images on M1 Mac desktop use --platform option.\ndocker build -t power1_shiny --platform linux/x86_64 .\ndocker run -d -p 80:3838 --platform linux/x86_64 power1_shiny"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#tip-2-add-user-to-docker-group-on-server.",
    "href": "posts/dockerize_compose/index.html#tip-2-add-user-to-docker-group-on-server.",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "7.2 Tip 2 add user to docker group on server.",
    "text": "7.2 Tip 2 add user to docker group on server.\nAdd ubuntu to the docker group to allow docker to run without sudo.\nsudo usermod -aG docker ${USER}"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#tip-3-ssh-config-file.",
    "href": "posts/dockerize_compose/index.html#tip-3-ssh-config-file.",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "7.3 Tip 3 ssh config file.",
    "text": "7.3 Tip 3 ssh config file.\nFor convenience, construct a config file in ~/.ssh as:\n\n\n\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\nthen you can ssh into the new server with\nsh> ssh rgtlab.org"
  },
  {
    "objectID": "posts/dockerize_simple/index.html",
    "href": "posts/dockerize_simple/index.html",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "posts/dockerize_simple/index.html#pre-launch-tasks",
    "href": "posts/dockerize_simple/index.html#pre-launch-tasks",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.1 Pre-launch tasks",
    "text": "3.1 Pre-launch tasks\nSelect a hosting service\nThere are a number of cloud based server options: Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean and Hetzner to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nAn overview of the process with AWS EC2 follows. (Detailed instructions for setting up a virtual server on EC2 both through the EC2 console and the command line interface were described in an earlier post: here and here.\nPreface. create an AWS account or sign in and navigate to the EC2 dashboard.\nstep 1. Set up a working environment within EC2. That is:\n\ngenerate secure shell (ssh) key-pair\nconfigure a firewall.\nobtain a static IP.\nobtain a domain name.\n\nOnce the environment is set up\nstep 2. Config and launch the server\nConfiguration has two parts:\n\nselect an instance operating system (ubuntu) and\nselect an instance type (t2-micro)\n\nOnce the server is available connect via ssh.\nssh -i \"~/.ssh/power1_app_ssh.pem\"  ubuntu@rgtlab.org\nor using the config setup described in Tip 1 at the end of this post.\nssh rgtlab.org \nThe only software tools necessary to install are Docker and Caddy. If you followed the CLI or console based instructions to set up a virtual server here or here Docker and Caddy will be pre-installed.\nOtherwise you can install them with the following commands:\nsudo apt update\nsudo apt install docker.io -y\nsudo apt install -y curl debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | \\\nsudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | \\\nsudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy -y\nAt this point we have a customized virtual server with a static IP address, unique domain name and a firewall in place. In other words, items 1, 2, 3, and 4 from our ‘hosting’ list above are taken care of."
  },
  {
    "objectID": "posts/dockerize_simple/index.html#post-launch-steps-on-local-workstation",
    "href": "posts/dockerize_simple/index.html#post-launch-steps-on-local-workstation",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.2 Post-Launch steps on local workstation",
    "text": "3.2 Post-Launch steps on local workstation\nTo run and host our Shiny app online we need to add a few configuration files to our power1_app development directory.\nThe first configuation file is:"
  },
  {
    "objectID": "posts/dockerize_simple/index.html#docker",
    "href": "posts/dockerize_simple/index.html#docker",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.3 Docker",
    "text": "3.3 Docker\n\na Docker configuration file (default name Dockerfile)\n\n\n\n  Photo by Ian Taylor on Unsplash \nWe’ll use docker to access R and Shiny. Here is our minimal dockerfile:\n\nDockerfile: Show the code\nFROM rocker/shiny:4.2.0\n# there are a bunch of files in /srv/shiny-server. delete them\nRUN rm -rf /srv/shiny-server\nCOPY /power1_shiny/* /srv/shiny-server/\n# rocker/shiny adds a user named shiny\nUSER shiny\nCMD [\"/usr/bin/shiny-server\"]\n\nThis file in just a few lines instructs Docker to build a new container based on a Rocker/Shiny image (which is a ubuntu image with R and Shiny installed) and layered with the addition of our Shiny code launch Shiny server listening on (default) port 3838.\nNote: We placed the power1_shiny/app.R code in the default location /srv/shiny-server so we only need to start the Shiny server and it will find the shiny program\nWe’ll use Caddy as our web server. Caddy is an open-source tool that has the very useful feature of automating the acquiring and installing of an SSL certificate. (An SSL cert is required by most browsers to use the encrypted communication protocol https.)\nTo configure the web server we need to add a Caddy configuration file (default name Caddyfile) to the power1_app directory.\nThe Caddy configuration file specifies three critical things.\n\nthe site domain name.\nthe authentication pair login/hash-password, for each user and\nthe ‘reverse proxy’ map that redirects requests to port 443 (ssl port) onto port 3838 (Shiny port) in the docker container.\n\nOur barebones Caddyfile looks like this:\n\nCaddyfile: Show the code\nrgtlab.org {\n    basicauth * /power1_shiny/* {\n        bob $2a$14$pYWd5O7JqNeGLS4m4CKkzemM2pq5ezn9bcTDowofZTl5wRVl8NTJm\n    }\n    root * /var/www/html\n    handle_path /power1_shiny/* {\n            reverse_proxy 0.0.0.0:3838\n    }\n    file_server\n}\n\nWe can accomplish what we need for items 4, 5, 6 and 7 through the Caddyfile.\nNote:\n\nrgtlab.org is our domain name\nthe basicauth directive specifies login credentials for user bob (password: vanilla47)\nhandle_path maps all https requests to port 3838 where Shiny is listening.\nroot directive tells Caddy where to look for the index.html file.\n\nProviding our servers domain name, rgtlab.org is sufficient to initiate an exchange with the letsencrypt service to generate an SSL certificate.\nLastly, we need an index.html file to provide a launch page for the app.\n\nindex.html: Show the code\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Power1 app</h1>\n    <ul>\n      <li><a href=\"./power1_shiny/\">Power1 app</a></li>\n    </ul>\n  </body>\n</html> \n\nOnce the config files, the index.html file and the Shiny code directory are in place copy we the entire power1_app directory to the server rgtlab.org with the secure copy command:\nscp -i \"~/.ssh/power1_app.pem\" -r ~/prj/power1_app/  ubuntu@rgtlab.org:~"
  },
  {
    "objectID": "posts/dockerize_simple/index.html#post-launch-steps-on-remote-server",
    "href": "posts/dockerize_simple/index.html#post-launch-steps-on-remote-server",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.4 Post-Launch steps on remote server",
    "text": "3.4 Post-Launch steps on remote server\nUse ssh to login to the server and cd to power1_app directory\nBuild and run the Docker container (using the docker approach allows us to avoid installing both R and Shiny on the virtual server rgtlab.org).\ndocker build -t power1_image .\nrun container\ndocker run -d --name=power1_shiny -p 3838:3838 --restart=always power1_image\nNext copy the Caddyfile to the location caddy expects to find it in the /etc/caddy directory\nsudo cp ./Caddyfile /etc/caddy/\ncopy index.html to location Caddy expects to find it in the /var/www/html directory\ncp  ./index.html /var/www/html/\nLastly, run the following command to restart Caddy\nsudo systemctl reload caddy\nThe App launch page will now be available at https://rgtlab.org.\nand you’re good to go!"
  },
  {
    "objectID": "posts/dockerize_simple/index.html#tip-construct-ssh-config-file.",
    "href": "posts/dockerize_simple/index.html#tip-construct-ssh-config-file.",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.5 Tip construct ssh config file.",
    "text": "3.5 Tip construct ssh config file.\nFor convenience, construct a config file in ~/.ssh as:\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nStrictHostKeyChecking no  #avoid known host file error message\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\nthen you can ssh into the new server with\nsh> ssh rgtlab.org"
  },
  {
    "objectID": "posts/install_mint_on_macbook/index.html#install-mint-on-a-macbook-pro",
    "href": "posts/install_mint_on_macbook/index.html#install-mint-on-a-macbook-pro",
    "title": "Install Linux Mint on macbook Pro",
    "section": "1.1 Install Mint on a macbook pro",
    "text": "1.1 Install Mint on a macbook pro\nThe goal is to refurbish a seven year old macbook pro with a new operating system. The OS we’ll focus on for this post is Linux Mint. Why Mint? As its been “since the beginning” the main challenge of installing a linux distribution on almost any PC or mac is wrestling with the hardware drivers: notably video, audio, trackpad, power. The Mint developers have successfully included the drivers needed for our target mac.\nThe target machine is a 2016 13-inch MacBook with four Thunderbolt 3 Ports.\nTo start the process get an iso file from the Mint website. The current “Vera” version of Mint iso file is 3.03 GB in size. The Victoria download site is here. The download torrent file is here.\nOn a macbook pro running macos you can use one of a number of apps to download the iso via torrent. we suggest Transmission.\nOnce downloaded we can transfer the iso file to a USB drive using one of several methods. On macos we suggest using the app balanaEtcher. Download balanaEtcher here\nInsert the bootable USB flash drive into the target macbook and reboot. Hold the ALT key to allow booting from the external USB drive. Select the icon for the USB drive and a grub menu will appear. From the Grub menu choose Start Linux Mint 21.2 Cinnamon 64-bit. and the Mint install program will boot.\nA linux mint desktop will appear. There is one icon on the screen labeled “install Linux Mint”. Double click it.\nA setup dialog will start. Select in sequence\n\nLanguage (English for us),\nNetwork (suggest skip),\ncodexes (suggest skip),\noptions for a fresh install or “something else” (choose fresh to devote full hard drive to Mint).\nLocation (Pacific region for us),\nname a root user, a hostname, and assign a password.\n\nThats it. Reboot and login.\nAt a minimum use a Panda Wireless modem for internet access since Mint 21.2 has Ralink RT5372 drivers installed. (see appendix for Broadcom install instructions)\nAdd a second monitor via HDMI or use Cinema display 27” via Thunderbolt adapter on older macbooks.\nOpen Display menu. Select 2560x1440 as the resolution for both monitors. Set Monitor scale at 150%.\nTurn on Timeshift to provide hourly snapshots.\nSet keyboard and trackpad preferences:\n\nOpen Mouse and Touchpad in settings. Turn on Tap to click and Reverse scroll.\nOpen Keyboard > Layouts > Options > Caps Lock behavior and select Swap Esc and Caps-Lock\n\nUpdate base software. (NB upgrade may be an issue with 2013 macbook)\nsudo apt-get update ; sudo apt-get upgrade"
  },
  {
    "objectID": "posts/server_setup_aws_cli/index.html",
    "href": "posts/server_setup_aws_cli/index.html",
    "title": "Using the AWS command line interface to launch an EC2 server",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "posts/server_setup_aws_cli/index.html#create-security-group-script",
    "href": "posts/server_setup_aws_cli/index.html#create-security-group-script",
    "title": "Using the AWS command line interface to launch an EC2 server",
    "section": "2.1 Create security group script",
    "text": "2.1 Create security group script\n#!/usr/bin/env bash\n# The script generates a new security group \n# the group name is \"max_restrict\"\n# only ports 22 and 443 are open. \n# to open other ports replicate the last paragraph and change the port number. \n# Will fail if group name \"max_restrict\" in already in use. \n# reads vpc_id from the environment variables set in .zshrc\n#\naws ec2 create-security-group \\\n    --group-name max_restrict \\\n    --description \"most restrictive: ports 22 and 443 only\" \\\n    --tag-specifications \\\n    'ResourceType=security-group,Tags=[{Key=Name,Value=max_restrict}]' \\\n    --vpc-id $vpc_id \nwait    \nexport security_grp=`aws ec2 describe-security-groups | \\\njq -r '.SecurityGroups[] | select(.GroupName==\"max_restrict\").GroupId'`\n\naws ec2 authorize-security-group-ingress \\\n    --group-id $security_grp \\\n    --protocol tcp \\\n    --port 22 \\\n    --cidr \"0.0.0.0/0\" \n\n\naws ec2 authorize-security-group-ingress \\\n    --group-id $security_grp \\\n    --protocol tcp \\\n    --port 443 \\\n    --cidr \"0.0.0.0/0\""
  },
  {
    "objectID": "posts/server_setup_aws_cli/index.html#create-new-key-pair-with-a-project-name-flag",
    "href": "posts/server_setup_aws_cli/index.html#create-new-key-pair-with-a-project-name-flag",
    "title": "Using the AWS command line interface to launch an EC2 server",
    "section": "2.2 Create new key pair with a project name flag",
    "text": "2.2 Create new key pair with a project name flag\n\n\n#!/usr/bin/env bash\nbase=`basename $PWD`\nif [ -z \"$1\" ]\nthen\n  key_pair_name=$base\nelse\n  key_pair_name=\"$1\"\nfi\n\necho \"key_pair_name is $key_pair_name\"\n\nread -p \"Continue (y/n)?\" CONT\nif [ \"$CONT\" = \"y\" ]; then\n  echo \"Here we go!\";\nelse\n  echo \"too bad. bye.\"; exit; \nfi\n\ncd ~/.ssh \nrm -f  ~/.ssh/$key_pair_name.pem\naws ec2 create-key-pair  --key-name  $key_pair_name \\\n   --query 'KeyMaterial' --output text > ~/.ssh/$key_pair_name.pem\n\nwait\nchmod 600 ~/.ssh/$key_pair_name.pem"
  },
  {
    "objectID": "posts/server_setup_aws_cli/index.html#generate-instance",
    "href": "posts/server_setup_aws_cli/index.html#generate-instance",
    "title": "Using the AWS command line interface to launch an EC2 server",
    "section": "2.3 Generate instance",
    "text": "2.3 Generate instance\nstart up script. aws_create_instance.sh\n\n\n#!/usr/bin/env bash\nwhile getopts s:t:k:p: flag\ndo\n    case \"${flag}\" in\n        s) size=${OPTARG};;\n        t) type=${OPTARG};;\n        k) key_name=${OPTARG};;\n        p) proj_name=${OPTARG};;\n    esac\ndone\nbase=`basename $PWD`\nif [ -z \"$proj_name\" ]\nthen\n  proj_name=$base\nfi\n\n\n\nif [ -z \"$type\" ]\nthen\n type=\"t2.micro\" \nfi\n\nif [ -z \"$size\" ]\nthen\n  size=30\nfi\n\necho \"Review parameters: \"\necho \"---\"\necho \"proj_name is $proj_name\"\necho \"key_name is $key_name\"\necho \"vpc_id: $vpc_id\";\necho \"subnet_id: $subnet_id\";\necho \"ami_id: $ami_id\";\necho \"security_grp: $security_grp\";\necho \"static_ip: $static_ip\";\necho \"type: $type\";\necho \"size: $size\";\n\nread -p \"Review Notes (y/n)?\" NOTES\nif [ \"$NOTES\" = \"y\" ]; then\necho \"Notes on currect parameters:\"\necho \"security group should be in place already. check on EC2. \nIf not, run ./awscli_create_security.sh. \nKey pair should be in place. check in ~/.ssh. \nIf not run ./create_keypair.sh. \nami id is for ubuntu linux 22.04 LTS. \nIf not what is desired check EC2 list of instances. \";\nelse\n  echo \"I guess you know what you're doing\"; \nfi\n\nread -p \"Continue (y/n)?\" CONT\nif [ \"$CONT\" = \"y\" ]; then\n  echo \"Here we go!\";\nelse\n  echo \"too bad. bye.\"; exit; \nfi\n\n\n\naws ec2 run-instances \\\n    --image-id $ami_id \\\n    --count 1 \\\n    --instance-type $type \\\n    --key-name $key_name \\\n    --security-group-ids $security_grp \\\n    --subnet-id $subnet_id \\\n    --block-device-mappings \"[{\\\"DeviceName\\\":\\\"/dev/sda1\\\",\\\"Ebs\\\":{\\\"VolumeSize\\\":$size}}]\" \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$proj_name}]\"  \\\n    --user-data file://~/Dropbox/prj/c060/aws_startup_code.sh\nwait\niid=`aws ec2 describe-instances --filters \"Name=tag:Name,Values=$proj_name\" | \\\n    jq -r '.Reservations[].Instances[].InstanceId'`\naws ec2 wait instance-running --instance-ids $iid\necho \"the generated instance has ID: $iid\"\nrunning=`aws ec2 describe-instance-status --instance-id $iid\necho \"the instance status is $running\"\naws ec2 associate-address --public-ip $static_ip --instance-id $iid`\n\naws_startup.sh\n\n#!/bin/bash\nsudo apt update\nsudo apt install docker.io -y\nsudo apt install -y curl debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | \\\nsudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | \\\nsudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy -y\n\n\n\n\n\n\nTip 1.\n\n\n\nFor convenience, construct a config file in ~/.ssh as:\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\nthen we can ssh into the new server with\nsh> ssh rgtlab.org\n\n\nChange the access permissions: sudo chmod 600 power1ssh.pem to be more restrictive."
  },
  {
    "objectID": "posts/server_setup_aws_cli/index.html#appendix-1",
    "href": "posts/server_setup_aws_cli/index.html#appendix-1",
    "title": "Using the AWS command line interface to launch an EC2 server",
    "section": "2.4 Appendix 1 Set up AWS IAM",
    "text": "2.4 Appendix 1 Set up AWS IAM\nTo initiate batch processing via the AWS cli app. Set up aws access via the aws configure program.\nTo get the needed credentials to configure command line aws use the AWS IAM service.\nDetails follow:\nLog into AWS console.\nSearch for IAM service. Navigate to IAM dashboard.\nSelect Users in left hand panel.\nThen select Add Users button (in upper right).\nThen enter a User name in the form. Click Next (lower right)\nThen Create User.\nClick on the user name\nIn the page that comes up. Select Security Credentials tab (center of page).\nUnder Access Keys panel click Create access key (right side or bottom of panel).\nClick Command Line Interface CLI\nand at the bottom of the page click the checkbox “I understand…”.\nFinally select Create access key and\nchoose Download .csv file (lower right).\nNavigate Download screen to local ~/.aws directory.\nClick Done\nNow in the terminal on your workstation, configure the aws cli app via the command.\n aws configure \nEnter info from the credentials file just downloaded. After entering the AWS Access Key ID and AWS Secret Access Key information you are asked for a Region, (my region is us-west-1), and an output format (suggested output format is JSON)."
  },
  {
    "objectID": "posts/server_setup_aws_console/index.html",
    "href": "posts/server_setup_aws_console/index.html",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "posts/server_setup_aws_console/index.html#select-a-hosting-service",
    "href": "posts/server_setup_aws_console/index.html#select-a-hosting-service",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "2.1 Select a hosting service",
    "text": "2.1 Select a hosting service\nThere are a number of cloud based server hosting options to choose from: for example Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean or Hetzner to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nIn this post we’ll provide a step-by-step description of a process using Amazon Web Services Elastic Compute Cloud (AWS EC2) infrastructure.\nAWS is, in our view, a reasonable choice for setting up a small custom server. Its not the cheapest option, but the system is well documented and, in our experience, reliable.\nThe first step is to get set up with AWS. To start, open the EC2 console by visiting the URL:\n   https://aws.amazon.com/console\n(see margin figure)\nIn the console window choose regional service. For us its “N. California”.\n\n\n\n\n\nAWS console\n\n\nNext create an account, or sign in, and once you’re logged in navigate to the EC2 dashboard. Its through this dashboard (aka console) that we’ll define the parameters for the type of server to launch and the mechanisms for communicating with it. We’ll refer to these as “Pre-Launch” tasks."
  },
  {
    "objectID": "posts/server_setup_aws_console/index.html#aws-working-environment",
    "href": "posts/server_setup_aws_console/index.html#aws-working-environment",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "2.2 AWS Working Environment",
    "text": "2.2 AWS Working Environment\nAlong with selecting a server we need to set up a working environment. We recommend setting up the working environment before launching the server, as it saves some back and forth with the console, but the order is not critical. The working environment consists of four main components:\n\nA secure shell (ssh) key-pair to allow remote and secure login to the virtual server once its launched.\nA firewall or security model which will restrict server access to only secure connections. The firewall closes off all incoming traffic except through those ports specifically named.\n\nA static IP address. A static IP is required for maintaining the link between the domain name and the server when rebooting. (The default is for the instance/server to be assigned a new IP address each time its rebooted). and\nA domain name, say rgtlab.org. A domain name is not required but will facilitate collaborator access by not needing to use the IP address directly.\n\nThese working environment components are not directly tied to any specific server. In fact, you can define multiple instances of each component. The only requirement is that you pick one of each to associate with each server.\n\n2.2.1 Ssh key pair\nIn order to securely communicate with the server we need to exchange an ssh key pair with AWS. The pair consists of a private key and a public key. We can identify an ssh key pair in one of two ways in EC2. Either, generate the pair locally, on our workstation and upload the public key to EC2, or have EC2 generate the key pair and download the private key.\nFor the first option we create a directory on our workstation to hold the keys and navigate to it, e.g. ~/.ssh. In the ~/.ssh directory generate the keys with the command\nssh-keygen -m PEM\n“PEM” defines the key format. More information on public key authentication can be found here. In the interactive dialog that follows name the key prefix something like power1_app. The dialog will ask for a passphrase. You can enter a phrase for an additional level of security, but its not required. The ssh-keygen program will generate two files: power1_app.pem and power1_app.pub\nTo complete the process return to the EC2 dashboard and select Actions and then Import key pair in the left panel. Enter the name power1_app and select the Browse button. Navigate to the file power1_app.pub in the directory ~/.ssh and and select the Import key pair button at the bottom of the page.\nFor the second approach select Create key pair button in the upper right of the console page. A form will appears and ask for a name. Enter something like power1_app. Select RSA for key pair type and .pem for key file format. The keys will be created and the private key power1_app.pem will be downloaded to our local machine to the and should be place in the~/.ssh directory. Lastly, change the access permissions for the private key with the following command:\nsudo chmod 600 power1_app.pem\n\n\n2.2.2 Firewall\nTo create a firewall click on Network and Security settings in the left hand panel. Choose Create security group and select Allow SSH traffic and Allow HTTPS traffic. This will create a firewall that leaves open only ports 22 and 443, for ssh and https incoming traffic respectively. Lastly, name the security group something like power1_firewall.\n\n\n2.2.3 Static IP address\nYou can use the elastic IP service to get a static IP. Navigate to Network and Security again and select Allocate Elastic IP. An IP will be assigned from the EC2 pool of available IPv4 IP addresses e.g. 13.57.139.31.\n\n\n2.2.4 Domain Name\nTo obtain a dedicated domain name leave the EC2 dashboard and go to Amazon route 53 service to select a domain name and associate it with our static IP.\nOnce a domain name is acquired, e.g. rgtlab.org, you can associate it with any IP address, static or dynamic. This can be done via the Route 53 service. For example, to associate domain name rgtlab.org with the elastic IP 13.57.139.31 do the following in Route 53:\n\nclick on hosted zones in the side panel\nclick on rgtlab.org in center panel\nclick on checkbox for rgtlab.org type=A line\nthen click on edit record in right panel\nchange IP address to the assigned static IP ."
  },
  {
    "objectID": "posts/server_setup_aws_console/index.html#select-and-launch-instance",
    "href": "posts/server_setup_aws_console/index.html#select-and-launch-instance",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "2.3 Select and launch instance",
    "text": "2.3 Select and launch instance\n\nFrom Quick Start in the EC2 dashboard select an operating system for the server. We recommend the Ubuntu OS. Ubuntu is a mature Linux distribution based on Debain Linux. Click the Ubuntu button. (see margin figure)\n\n\nName the server, say power1\n\n\nNext choose an instance type, e.g. t2-micro. Different instance types are combinations of number of processors, memory, storage capacity, and network performance.\nselect Configure Instance Details\nchoose a Key pair e.g. select power1_app from your environment.\nAdd security group, e.g. use power1_firewall from your environment.\nchoose a storage amount. e.g. enter 30 GB of EBS General Purpose (SSD) or     Magnetic storage. Thirty GBs is the maximum allowed in the ‘Free tier’ of servers on AWS. In our experience smaller disk sizes can lead to problems.\nclick Launch Instance\n\nto launch the server."
  },
  {
    "objectID": "posts/setup_nvim-R_vimtex_ultisnips/index.html",
    "href": "posts/setup_nvim-R_vimtex_ultisnips/index.html",
    "title": "Setting up Nvim-R, vimtex and Ultisnips in vim for data science",
    "section": "",
    "text": "vim setup\n\n\n\n1 Introduction\nStart with installing Nvim-R, vimtex, and ultisnips.\nSee post “Setting up a minimal neovim…” for details on installing plugins with Neovim.\nhttps://www.reddit.com/r/vim/comments/7c7wd9/vim_vimtex_zathura_on_macos/\nhttps://stackoverflow.com/questions/40077211/e185-cannot-find-color-scheme\nhttps://github.com/morhetz/gruvbox/issues/219\nhttps://github.com/junegunn/vim-plug/issues/325\nhttps://github.com/dylanaraps/pywal/wiki/Getting-Started\nhttps://github.com/dylanaraps/wal.vim\nhttps://github.com/dylanaraps/pywal/wiki/Customization\nhttps://github.com/lervag/vimtex/issues/1420\nhttps://latextools.readthedocs.io/en/latest/install/\nhttps://mg.readthedocs.io/latexmk.html\nhttps://gist.github.com/LucaCappelletti94/920186303d71c85e66e76ff989ea6b62\nhttps://github.com/lervag/vimtex/issues/1420\nhttps://latextools.readthedocs.io/en/latest/install/\nhttps://github.com/lervag/vimtex/issues/1420\nhttps://github.com/lervag/vimtex/issues/940\nhttps://github.com/lervag/vimtex/issues/663\nhttp://www.math.cmu.edu/~gautam/sj/blog/20140310-zathura-fsearch.html\nhttps://gitter.im/SirVer/ultisnips\nhttps://github.com/SirVer/ultisnips/issues/1107\nhttps://github.com/SirVer/ultisnips/issues/1022\nhttps://github.com/SirVer/ultisnips/issues/850\nhttps://superuser.com/questions/1115159/how-do-i-install-vim-on-osx-with-python-3-support\nhttps://jdhao.github.io/2020/01/05/ultisnips_python_interpolation/\nhttp://witkowskibartosz.com/blog/python_snippets_in_vim_with_ultisnips.html#.Xnw9gtP7TRY\nhttps://germaniumhq.com/2019/02/07/2019-02-07-Vim-Ultimate-Editing:-UltiSnips/\nhttp://vimcasts.org/episodes/ultisnips-python-interpolation/\nhttps://wraihan.com/posts/vimtex-and-zathura/\n\n\n2 Nvim-R\nThis plugin is developed by\nJakson A. Aquino jalvesaq@gmail.com and Jose Claudio Faria joseclaudio.faria@gmail.com\nThe latest version is 0.9.17\nRequire either Neovim 0.5.0 or Vim 8.2.84.\nNew options:\n\nR_set_omnifunc\nR_auto_omni\nR_rmarkdown_args\nR_objbr_auto_start\nR_quarto_render_args\nand R_quarto_preview_args\nR_debug_center\nR_term_title.\nDelete options: R_omni_tmp_file and R_omni_size.\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {{Setting} up {Nvim-R,} Vimtex and {Ultisnips} in Vim for Data\n    Science},\n  date = {2023-07-18},\n  url = {https://focusonr.org/posts/setup_nvim-R_vimtex_ultisnips},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023.“ Setting up Nvim-R, Vimtex and\nUltisnips in Vim for Data Science.” July 18, 2023. https://focusonr.org/posts/setup_nvim-R_vimtex_ultisnips."
  },
  {
    "objectID": "posts/setupneovim/index.html",
    "href": "posts/setupneovim/index.html",
    "title": "Setting up a minimal neovim environment for data science code development",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash \n\n1 Introduction\nNeovim (a fork of Vim) is a text editor that has several advantages for data science code development. One of the main attractions is that it is open source and has a number of useful plugins to facilitate working on R, python, and julia code. Also, its modal, keyboard-centric system allows text and code manipulation at potentially far greater speed than conventional, mouse-centric, systems.\nIn this post we describe both a minimal, yet functional setup, as well as a more extensive setup utilizing several of the newest neovim-only plugins, for neovim to allow IDE style code editing and REPL interaction for the three primary data science coding tools: R, Python, and Julia.\nOur presentation here is for a Macos environment. Appendix one contains required adjustments for a ubuntu linux environment.\n\n\n2 Install the latest stable version of neovim.\nWith minimal effort we can install both the terminal and GUI versions of neovim. The simplist approach is to use homebrew:\n> brew install neovim neovim-qt\nSet up convenience aliases in zsh.\n> alias ng = neovim-qt\n> alias nt = neovim\n(mnemonic: the t in nt is for terminal, the g in ng is for GUI)\n\n\n3 Configure neovim\nThe standard location for neovim configuration files on “unix-like” systems is ~/.config/nvim. The main config file is either init.vim (VimL) or init.lua (Lua). In this post we’ll focus on lua based configuration.\nSpecifically, the following code block creates an nvim subdirectory under ~/.config and initialize a configuration file init.lua.\nHere is the file hierarchy we’ll construct. In fact all the code could be bundled into the init.lua file, but this approach is clearer and cleaner.\n.\n|-- ginit.vim\n|-- init.lua\n|-- lazy-lock.json\n|-- lua\n|   |-- basics.lua\n|   |-- leap-config.lua\n|   |-- nvim-R-config.lua\n|   |-- nvim-cmp-config.lua\n|   |-- nvim-telescope-config.lua\n|   |-- nvim-tree-config.lua\n|   `-- treesitter-config.lua\n|-- my_snippets\n|   |-- all.snippets\n|   |-- giles.tex.snipppets\n|   |-- mail.snippets\n|   |-- r.snippets\n|   |-- rmd.snippets\n|   |-- snippets.snippets\n|   |-- tex.snippets\n|   |-- text.snippets\n|   `-- txt.snippets\n|-- spell\n|   |-- en.utf-8.add\n|   `-- en.utf-8.add.spl\nTo install the lazy plugin manager\ngit clone https://github.com/folke/lazy.nvim.git \\\n   ~/.local/share/nvim/lazy/lazy.nvim\nAdd the following code to init.lua list the plugins needed to be installed from github and “feed” them to Lazy for installation.\nNvim-R, Leap, UltiSnips, and vimtex need additional configuration. The required code is contained in bespoke files under the lua directory.\n\n\n\nvim.g.mapleader = \",\"\nvim.g.maplocalleader = \" \"\nvim.opt.rtp:prepend(\"~/.local/share/nvim/lazy/lazy.nvim\")\nrequire('plugins')\nrequire('basics')\nrequire('nvim-tree-config')\nrequire('nvim-R-config')\nrequire('nvim-telescope-config')\nrequire('leap').add_default_mappings()\nrequire('leap-config')\nrequire('lualine').setup()\nList of plugins\n\n\n\n\n\n\nrequire('lazy').setup({\n--\n--minimal data science setup\n--\n'jalvesaq/Nvim-R',\n'lervag/vimtex',\n'SirVer/ultisnips',\n'jalvesaq/vimcmdline',\n--\n--optional utilities\n--\n\"nvim-lualine/lualine.nvim\",\n\"bluz71/vim-moonfly-colors\",\n'junegunn/vim-peekaboo',\n'tpope/vim-commentary',\n'francoiscabrol/ranger.vim',\n'machakann/vim-highlightedyank',\n'tpope/vim-surround',\n'ggandor/leap.nvim',\n--\n--neovim specific\n'nvim-lua/plenary.nvim',\n'nvim-tree/nvim-web-devicons',\n'nvim-tree/nvim-tree.lua',\n'nvim-telescope/telescope.nvim',\n'nvim-treesitter/nvim-treesitter',\n'neovim/nvim-lspconfig',\n})\n\n\n\n4 plugin discussions\n\n\n# basics\n```sh\n\n\n\n\n\n\nlocal map = vim.keymap.set\nlocal opts = {noremap = true}\nvim.cmd([[\n\"    paste registers into terminal\ntnoremap <expr> <C-R> '<C-\\><C-N>\"'.nr2char(getchar()).'pi'\nset background=dark\ncolorscheme moonfly\nlet $FZF_DEFAULT_COMMAND = 'rg --files --hidden'\nset completeopt=menu,menuone,noinsert,noselect\nset number relativenumber\nset textwidth=80\nset cursorline\nset clipboard=unnamed\nset iskeyword-=_ \nset hlsearch   \nset splitright\nset hidden   \nset incsearch    \nset noswapfile\nset showmatch\nset ignorecase\nset smartcase\nset gdefault\nfiletype plugin on\nset encoding=utf-8\nset nobackup\nset nowritebackup\nset updatetime=300\nset signcolumn=yes\nset colorcolumn=80\nset timeoutlen=1000 ttimeoutlen=10\nlet g:UltiSnipsSnippetDirectories = ['~/.config/nvim/my_snippets']\nlet g:UltiSnipsExpandTrigger=\"<tab>\"\nlet g:UltiSnipsJumpForwardTrigger=\"<c-j>\"\nlet g:UltiSnipsJumpBackwardTrigger=\"<c-k>\"\nnnoremap <leader>U <Cmd>call UltiSnips#RefreshSnippets()<CR>\n\nautocmd BufWinEnter,WinEnter term://* startinsert\n\"autocmd TermOpen * exec \"normal! i\"\n]])\nmap('n', ':', ';', opts)\nmap('n', ';', ':', opts)\nmap('n', '<leader>u',':UltiSnipsEdit<cr>', opts)\nmap('n', '<leader>U','<Cmd>call UltiSnips#RefreshSnippets()<cr>', opts)\nmap('n', '<localleader><localleader>','<C-d>', opts)\nmap('n', '-','$', opts)\nmap('n', '<leader>w','vipgq', opts)\nmap('n', '<leader>v',':edit ~/.config/nvim/init.lua<cr>', opts)\nmap('n', '<leader>n',':edit ~/.config/nvim/lua/basics.lua<cr>', opts)\nmap('n', '<leader>a','ggVG', opts)\nmap('n', '<leader>t',':tab split<cr>', opts)\nmap('n', '<leader>y',':vert sb3<cr>', opts)\nmap('n', '<leader>0',':ls!<CR>:b<Space>', opts)\nmap('n', '<leader><leader>','<C-w>w', opts)\nmap('n', '<leader>1','<C-w>:b1<cr>', opts)\nmap('n', '<leader>2','<C-w>:b2<cr>', opts)\nmap('n', '<leader>3','<C-w>:b3<cr>', opts)\nmap('t',  'ZZ', \"q('yes')<CR>\", opts)\nmap('t',  'ZQ', \"q('no')<CR>\", opts)\nmap('v',  '-', '$', opts)\nmap('t',  '<leader>0','<C-\\\\><C-n><C-w>:ls!<cr>:b<Space>', opts)\nmap('t',  '<Escape>','<C-\\\\><C-n>', opts)\nmap('t',  ',,','<C-\\\\><C-n><C-w>w', opts)\nmap('i',  '<Esc>', '<Esc>`^', opts)\n\n\n\n5 Set up R\n\n\n\n\n\n\nvim.cmd([[\niabb <buffer> x %>%\niabb <buffer> z %in% \nlet R_auto_start = 2\nlet R_enable_comment = 1\nlet R_hl_term = 0\nlet R_clear_line = 1\nlet R_pdfviewer = \"zathura\" \nlet R_assign = 2\nlet R_latexcmd = ['xelatex']\naugroup rmarkdown\nautocmd!\nautocmd FileType rmd,r nnoremap <buffer> <CR>  :call SendLineToR(\"down\")<CR>\nautocmd FileType rmd,r nnoremap <buffer> <space>' :call RMakeRmd(\"default\")<cr>\nautocmd FileType rmd,r noremap <space>i :call RAction(\"dim\")<cr>\nautocmd FileType rmd,r noremap <space>h :call RAction(\"head\")<cr>\nautocmd FileType rmd,r noremap <space>p :call RAction(\"print\")<cr>\nautocmd FileType rmd,r noremap <space>q :call RAction(\"length\")<cr>\nautocmd FileType rmd,r noremap <space>n :call RAction(\"nvim.names\")<cr>\nautocmd FileType rmd,r vmap <buffer> <CR> <localleader>sd\nautocmd FileType rmd,r nmap <buffer> <space>j <localleader>gn\nautocmd FileType rmd,r nmap <buffer> <space>k <localleader>gN\nautocmd FileType rmd,r nmap <buffer> <space>l <localleader>cd\naugroup END\n]])\n\n\n\n\n\n\n\n\n6 Appendix Ubuntu tweaks\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Setting up a Minimal Neovim Environment for Data Science Code\n    Development},\n  date = {2023-07-18},\n  url = {https://focusonr.org/posts/setupneovim},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023. “Setting up a Minimal Neovim\nEnvironment for Data Science Code Development.” July 18, 2023. https://focusonr.org/posts/setupneovim."
  },
  {
    "objectID": "posts/setupobs/index.html",
    "href": "posts/setupobs/index.html",
    "title": "Setting up OBS for webcasting",
    "section": "",
    "text": "1 Introduction\nWebcasting for biostatistics is the challenge.\nLets take it one step at a time.\nStart with the open source project OBS.\nWelcome | OBS\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Setting up {OBS} for Webcasting},\n  date = {2023-07-18},\n  url = {https://focusonr.org/posts/setupobs},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023. “Setting up OBS for\nWebcasting.” July 18, 2023. https://focusonr.org/posts/setupobs."
  },
  {
    "objectID": "posts/setupquarto/index.html",
    "href": "posts/setupquarto/index.html",
    "title": "Setting up Quarto",
    "section": "",
    "text": "Quarto is an extension of the Rstudio app. From my perspective it provides a number of useful additional tools for literate programming and blogging.\nConsider some ideas from Rob Hyndman\nGitHub - robjhyndman/quarto_website_template: Template of quarto website\nand\nEric Ekholm - Modifying the Default Quarto Blog Structure\ncloned to sbx"
  },
  {
    "objectID": "posts/setupquarto/index.html#columns",
    "href": "posts/setupquarto/index.html#columns",
    "title": "Setting up Quarto",
    "section": "2.1 2 - Columns",
    "text": "2.1 2 - Columns\n\n\n\ngeom_density(\n  mapping = NULL,\n  data = NULL,\n  stat = \"density\",\n  position = \"identity\",\n  ...,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE,\n  outline.type = \"upper\"\n)\n\n\nstat_density(\n  mapping = NULL,\n  data = NULL,\n  geom = \"area\",\n  position = \"stack\",\n  ...,\n  bw = \"nrd0\",\n  adjust = 1,\n  kernel = \"gaussian\",\n  n = 512,\n  trim = FALSE,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE\n)"
  },
  {
    "objectID": "posts/setupquarto/index.html#margin-captions",
    "href": "posts/setupquarto/index.html#margin-captions",
    "title": "Setting up Quarto",
    "section": "2.2 2 - Margin captions",
    "text": "2.2 2 - Margin captions\n\nggplot(data = gapminder::gapminder, mapping = aes(x = lifeExp, fill = continent)) +\n  stat_density(position = \"identity\", alpha = 0.5)\n\n\n\n\nBla bla bla. This is a caption in the margin. Super cool isn’t it?\n\n\n\n\nStart with running quarto create-project at ~/prj level\n❯ quarto create-project qblog --type website:blog\n\nCreating project at /Users/zenn/Dropbox/prj/qblog:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created posts/welcome/index.qmd\n  - Created posts/post-with-code/index.qmd\n  - Created about.qmd\n  - Created styles.css\n  - Created posts/_metadata.yml\n\ncd to ~/qblog/posts/\ncreate a new directory, say setupquarto\ncd to ~/qblog/posts/setupquarto\nvim index.qmd"
  },
  {
    "objectID": "posts/simpleS3/index.html",
    "href": "posts/simpleS3/index.html",
    "title": "Writing a simple R package in S3.",
    "section": "",
    "text": "S3 OOP in R\n\n\n\n1 Introduction\nIf you, like me, feel its time to expand your R programming armamentarium to include S3 methods. This blog may help. Where to start?\nIn this post we’ll walk through an example of a simple “table 1” function using S3 methods.\nWe’ll start with the ‘raw’ data from a sample of the Penguins data set and return a dataframe with summary measures.\nLet’s begin by reading the relevant chapters in Advanced R (add reference).\nAlso useful other references:\nIntroduction to Scientific Programming and Simulation using R. Jomes. Maillardet, Robinson.\n[1608.07161] A Simple Guide to S3 Methods https://arxiv.org/abs/1608.07161\nWhy your S3 method isn’t working | R-bloggers\nDealing with S3 methods in R with a simple example | R-bloggers\nVideo on S3 Classes in R by Dr Andrew Robinson | R-bloggers\nUnexported S3 Methods and R Packages | R-bloggers\nSimple Guide to S3 Methods | R-bloggers\nThe S3 OOP system | R-bloggers\nS3 methods allow coders to write functions that perform differently for different classes of objects.\nIn our project we want to build a function that creates a row in the ‘Table 1’ table for each factor in the formula regardless of the mode of the factor.\n7/1/23 Now reading Nick Tierney R journal paper.\n\nsource(\"~/shr/zz.tools.R\")\nlibrary(pacman)\np_load(tidyverse, dplyr, gapminder, thematic, palmerpenguins, tidyverse, knitr, lubridate, readxl)\nknitr::opts_chunk$set(collapse = T)\nset.seed(101)\ndat <- palmerpenguins::penguins %>% \n  filter(!is.na(sex))  \ndat1  <- slice_sample(dat, n=10) |> \nsel(species, island, bill_length_mm)\n\n\ntable1  <- function (df, form, ...) {\nUseMethod(\"table1\") \n} \n\nrow_name  <- function (x, nm, ...) {\nUseMethod(\"row_name\")   \n}\n\nrow_name.character <- function (x, nm, annot=TRUE, annot_cat_text=\"-- no. (%)\", ... ) {\nif (annot) nm = paste(nm, annot_cat_text)\nreturn(c(nm, unique(x)) )\n}\n\nrow_name.numeric <- function (x, nm, ...) {\n    return(nm)\n}\nrow_summary  <- function (x) {\nUseMethod(\"row_summary\")    \n}\nrow_summary.character <- function (x) {\ndf = data.frame(x = x, y = dep)\nt1 = df |> tabyl(x, y) |>     \nadorn_percentages(\"col\") |>    \nadorn_pct_formatting(digits = 0)|>\nadorn_ns(position = \"front\")    |>\nselect(-x)\nt1= as_tibble(t1)\n t2 = table(df$x,df$y) |> as.data.frame.matrix() \nrbind(NA, t1)\n}\n\nrow_summary.numeric <- function (x) {\nsp = split(x, dep) \nnms = names(sp)\nmm = sp |> map_vec(mean) |> round(2)  |> as.character() |> matrix(1)\nss = sp |> map_vec(sd) |> round(2)|> paste0(\"(\",x = _ ,\")\") |>  matrix(1)\nbb = paste(unlist(mm), unlist(ss)) |>    matrix( nrow = nrow(mm)) \ncolnames(bb) = nms\nbb = bb |> as_tibble()\nbb\n}\nrow_pv  <- function (x) {\nUseMethod(\"row_pv\") \n}\nrow_pv.character <- function (x) {\n    df = data.frame(x = x, y = dep)\ntab =  table(df[,1], df[,2])\npv  <- ifelse((nrow(tab) >=2 & ncol(tab) >=2), \n       stats::fisher.test(tab,simulate.p.value=T)$p.value, NA) \nreturn(c(pv, rep(NA, nrow(tab))))\n}\nrow_pv.numeric <- function (x) {\n    df = data.frame(x = x, y = dep)\npv = tidy(anova(lm(x~y, data = df)))$p.value[1]\nreturn(pv)\n}\n\ntable1.data.frame  <- function (df, form, ...) {\nif (!require(\"pacman\")) install.packages(\"pacman\", repo=\"cran.rstudio.com\")\np_load(janitor, broom, tibble, dplyr, purrr) \nvars  <- all.vars(form)\ndep  <<- df[[vars[1]]]\nindep  <- df[vars[-1]] \ncol_left = indep |> \nimap(row_name, ...) |>\nunlist() |> \nenframe(name=NULL)|>\nsetNames(\"variable\")\ncol_right = indep |> \nmap(row_pv) |>\nunlist() |> \nenframe(name=NULL)|> \nsetNames(\"p-value\")\ncol_mid = indep |> \nmap_dfr(row_summary) |>\nidentity()\ncol_mid = bind_rows(col_mid)\nbind_cols(col_left, col_mid, col_right)\n}\n\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {{Writing} a Simple {R} Package in {S3.}},\n  date = {2023-07-18},\n  url = {https://focusonr.org/posts/simpleS3},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023.“Writing a Simple R Package in S3.\n.” July 18, 2023. https://focusonr.org/posts/simpleS3."
  },
  {
    "objectID": "publications/index.html",
    "href": "publications/index.html",
    "title": "Thomas Lab home page",
    "section": "",
    "text": "1 Publications\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n  \n    Sano, Mary and Ernesto, Christopher and Thomas, Ronald G and Klauber, Melville R and Schafer, Kimberly and Grundman, Michael and Woodbury, Peter and Growdon, John and Cotman, Carl W and Pfeiffer, Eric and others (1997) A controlled trial of selegiline, alpha-tocopherol, or both as treatment for Alzheimer's disease.  New England Journal of Medicine, , 336, 17, 1216--1222.\n  \n\n\n\nNo matching items"
  },
  {
    "objectID": "software/index.html",
    "href": "software/index.html",
    "title": "Thomas Lab home page",
    "section": "",
    "text": "1 Selected R packages I’ve coauthored"
  },
  {
    "objectID": "talks/index.html",
    "href": "talks/index.html",
    "title": "Thomas Lab home page",
    "section": "",
    "text": "1 Talks I’ve given\n\n\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nVenue\n\n\n\n\n\n\n30 Jun 2025\n\n\nAdventures with Data Science\n\n\nFrench Academy, Paris\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "talks/talk1.html",
    "href": "talks/talk1.html",
    "title": "Adventures with Data Science",
    "section": "",
    "text": "Abstract here\n\n1 Slides\nembed html or pdf slides here\n\n\n2 Video"
  },
  {
    "objectID": "teaching/index.html",
    "href": "teaching/index.html",
    "title": "Thomas Lab home page",
    "section": "",
    "text": "1 In development\n\n\n\n2 Also in development\nDon’t forget to bring your laptops."
  },
  {
    "objectID": "publications/sanoetalMEJM.html",
    "href": "publications/sanoetalMEJM.html",
    "title": "A controlled trial of selegiline, alpha-tocopherol, or both as treatment for Alzheimer’s disease",
    "section": "",
    "text": "There is evidence that medications or vitamins that increase the levels of brain catecholamines and protect against oxidative damage may reduce the neuronal damage and slow the progression of Alzheimer’s disease.\n\n\n\nWe conducted a double-blind, placebo-controlled, randomized, multicenter trial in patients with Alzheimer’s disease of moderate severity. A total of 341 patients received the selective monoamine oxidase inhibitor selegiline (10 mg a day), alpha-tocopherol (vitamin E, 2000 IU a day), both selegiline and alpha-tocopherol, or placebo for two years. The primary outcome was the time to the occurrence of any of the following: death, institutionalization, loss of the ability to perform basic activities of daily living, or severe dementia (defined as a Clinical Dementia Rating of 3).\n\n\n\nDespite random assignment, the base-line score on the Mini–Mental State Examination was higher in the placebo group than in the other three groups, and this variable was highly predictive of the primary outcome (P<0.001). In the unadjusted analyses, there was no statistically significant difference in the outcomes among the four groups. In analyses that included the base-line score on the Mini–Mental State Examination as a covariate, there were significant delays in the time to the primary outcome for the patients treated with selegiline (median time, 655 days; P = 0.012), alpha-tocopherol (670 days, P = 0.001), or combination therapy (585 days, P = 0.049), as compared with the placebo group (440 days).\n\n\n\nIn patients with moderately severe impairment from Alzheimer’s disease, treatment with selegiline or alpha-tocopherol slows the progression of disease."
  },
  {
    "objectID": "blog/simpleS3/index.html#notes",
    "href": "blog/simpleS3/index.html#notes",
    "title": "Writing a simple R package in S3.",
    "section": "1.1 Notes",
    "text": "1.1 Notes\n2023-08-03 17:37:04\n\ncan’t handle logical variables yet\ncategorical values should be indented\nadd option to change continuous summary to median IQR\nreview atable, furniture, and tableone for features.\nmaybe a “style” option for NEJM, JAMA, lancet"
  },
  {
    "objectID": "blog/setupgit/index.html",
    "href": "blog/setupgit/index.html",
    "title": "Setting up git for (solo) data science workflow",
    "section": "",
    "text": "1 Introduction\nVersion Control for biostatistics is the challenge.\nLets take it one step at a time.\nScenario 1: rgt47 has been working on a data analysis for some ADNI data. Its moderately complex and uses lots of packages. He’s ready to have his team join the analysis process. What are the first steps to do that? Start by adding git user rgt4748 to the team….\n\n\n2 Methods\ncreate a branch:\ncreate new branch for testing\ngit checkout -b test; git pull origin master; git push origin test; git checkout master; git pull origin test\n\n#merging branch back into master\n\ngit checkout test\ngit pull origin master\ngit checkout master\ngit merge test\ngit push origin master\n\n\n#to delete branch\ngit branch -d test\ngit push origin –delete test\n\nDraft ….\nGIT for nitwits\ngit init\ngit add fname\ngit status #see what happens on commit git commit -am “commit message”\ngit push\ngit branch work\ngit checkout work\n… make changes … git add * git commit -m “something”\ngit checkout master\ngit merge work\ngit branch -d work\ngit log #see all commits\ngit checkout HASH #Restore old branch\nConsider editing ./.git/config\nView file in master branch. git show master:a101.Rmd | mvim -\nCopy file from other branch (master) git checkout master uw.png\nTroubleshooting git pull –allow-unrelated-histories\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Setting up Git for (Solo) Data Science Workflow},\n  date = {2023-08-28},\n  url = {https://focusonr.org/blog/setupgit},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023. “Setting up Git for (Solo) Data\nScience Workflow.” August 28, 2023. https://focusonr.org/blog/setupgit."
  },
  {
    "objectID": "blog/mimicsoftmood/index.html",
    "href": "blog/mimicsoftmood/index.html",
    "title": "Mimicing the softmood reddit post",
    "section": "",
    "text": "1 Introduction\nVery impressed with the reddit post of ykonstant\n[Cinnamon] Soft mood and latex workflow : r/unixporn\nThis project is an attempt to mimic the various elements of the post, particularly the ultisnips portion.\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Mimicing the Softmood Reddit Post},\n  date = {2023-08-31},\n  url = {https://focusonr.org/blog/mimicsoftmood},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023. “Mimicing the Softmood Reddit\nPost.” August 31, 2023. https://focusonr.org/blog/mimicsoftmood."
  },
  {
    "objectID": "blog/setupquarto/minimal_blog/about.html",
    "href": "blog/setupquarto/minimal_blog/about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {About},\n  url = {https://focusonr.org/blog/setupquarto/about.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. “About.” https://focusonr.org/blog/setupquarto/about.html."
  },
  {
    "objectID": "blog/setupquarto/minimal_blog/index.html",
    "href": "blog/setupquarto/minimal_blog/index.html",
    "title": "minimal_blog",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2023\n\n\nRonald (Ryy) Glenn Thomas, Harlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2023\n\n\nRonald (Ryy) Glenn Thomas, Tristan O’Malley\n\n\n\n\n\n\nNo matching items\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Minimal\\_blog},\n  url = {https://focusonr.org/blog/setupquarto/minimal_blog},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. “Minimal_blog.” https://focusonr.org/blog/setupquarto/minimal_blog."
  },
  {
    "objectID": "blog/setupquarto/minimal_blog/posts/post-with-code/index.html",
    "href": "blog/setupquarto/minimal_blog/posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas and Harlow Malloc},\n  title = {Post {With} {Code}},\n  date = {2023-10-17},\n  url = {https://focusonr.org/blog/setupquarto/minimal_blog/posts/post-with-code},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas, and Harlow Malloc. 2023. “Post With\nCode.” October 17, 2023. https://focusonr.org/blog/setupquarto/minimal_blog/posts/post-with-code."
  },
  {
    "objectID": "blog/setupquarto/minimal_blog/posts/welcome/index.html",
    "href": "blog/setupquarto/minimal_blog/posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts.\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas and Tristan O’Malley},\n  title = {Welcome {To} {My} {Blog}},\n  date = {2023-10-14},\n  url = {https://focusonr.org/blog/setupquarto/minimal_blog/posts/welcome},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas, and Tristan O’Malley. 2023. “Welcome To\nMy Blog.” October 14, 2023. https://focusonr.org/blog/setupquarto/minimal_blog/posts/welcome."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/about/index.html",
    "href": "blog/setupquarto/robh_blog/about/index.html",
    "title": "Thomas Lab home page",
    "section": "",
    "text": "1 About me\nSome more detail about who I am and what I do.\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  url = {https://focusonr.org/blog/setupquarto/robh_blog/about},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. https://focusonr.org/blog/setupquarto/robh_blog/about."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/blog/index.html",
    "href": "blog/setupquarto/robh_blog/blog/index.html",
    "title": "My blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nMy xray experiments\n\n\n\n\n\n\n\nphysics\n\n\nchemistry\n\n\nradiation\n\n\n\n\n\n\n\n\n\n\n\nSep 7, 1902\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\nNo matching items\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {My Blog},\n  url = {https://focusonr.org/blog/setupquarto/robh_blog/blog},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. “My Blog.” https://focusonr.org/blog/setupquarto/robh_blog/blog."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/blog/radioactivity.html",
    "href": "blog/setupquarto/robh_blog/blog/radioactivity.html",
    "title": "My xray experiments",
    "section": "",
    "text": "I’ve been playing with uranium rays …\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2002,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {My Xray Experiments},\n  date = {2002-09-07},\n  url = {https://focusonr.org/blog/setupquarto/radioactivity.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2002. “My Xray Experiments.”\nSeptember 7, 2002. https://focusonr.org/blog/setupquarto/radioactivity.html."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/index.html",
    "href": "blog/setupquarto/robh_blog/index.html",
    "title": "Thomas Lab home page",
    "section": "",
    "text": "Professor Marie Skłodowska-Curie School of Physics & Chemistry École Normale Supérieure Paris, France\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  url = {https://focusonr.org/blog/setupquarto/robh_blog},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. https://focusonr.org/blog/setupquarto/robh_blog."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/publications/index.html",
    "href": "blog/setupquarto/robh_blog/publications/index.html",
    "title": "Thomas Lab home page",
    "section": "",
    "text": "1 Publications\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n  \n    Ronald (Ryy) Glenn Thomas, Marie S (1900) Test 2 Sur la pénétration des rayons de Becquerel non déviables par le champ magnétique. CR Acad Sci, 130, 76-79..\n  \n  \n    Ronald (Ryy) Glenn Thomas, Marie Skłodowska-Curie (1900) Sur la pénétration des rayons de Becquerel non déviables par le champ magnétique. CR Acad Sci, 130, 76-79..\n  \n\n\n\nNo matching items\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  url = {https://focusonr.org/blog/setupquarto/robh_blog/publications},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. https://focusonr.org/blog/setupquarto/robh_blog/publications."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/software/index.html",
    "href": "blog/setupquarto/robh_blog/software/index.html",
    "title": "Thomas Lab home page",
    "section": "",
    "text": "1 Selected R packages I’ve coauthored\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  url = {https://focusonr.org/blog/setupquarto/robh_blog/software},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. https://focusonr.org/blog/setupquarto/robh_blog/software."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/talks/french_academy_1901.html",
    "href": "blog/setupquarto/robh_blog/talks/french_academy_1901.html",
    "title": "Adventures with Uranium Rays",
    "section": "",
    "text": "Abstract here\n\n1 Slides\nembed html or pdf slides here\n\n\n2 Video\n\n\n\n\n\n  \n  \n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2001,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Adventures with {Uranium} {Rays}},\n  date = {2001-06-30},\n  url = {https://focusonr.org/blog/setupquarto/french_academy_1901.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2001. “Adventures with Uranium\nRays.” June 30, 2001. https://focusonr.org/blog/setupquarto/french_academy_1901.html."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/talks/index.html",
    "href": "blog/setupquarto/robh_blog/talks/index.html",
    "title": "Thomas Lab home page",
    "section": "",
    "text": "1 Talks I’ve given\n\n\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nVenue\n\n\n\n\n\n\n30 Jun 1901\n\n\nAdventures with Uranium Rays\n\n\nFrench Academy, Paris\n\n\n\n\n\n\nNo matching items\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  url = {https://focusonr.org/blog/setupquarto/robh_blog/talks},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. https://focusonr.org/blog/setupquarto/robh_blog/talks."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/teaching/index.html",
    "href": "blog/setupquarto/robh_blog/teaching/index.html",
    "title": "Thomas Lab home page",
    "section": "",
    "text": "1 Advanced Chemistry\nBlah blah\n\n\n\n2 Advanced Physics\nDon’t forget to bring your lab coats\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas,\n  author = {Ronald (Ryy) Glenn Thomas},\n  url = {https://focusonr.org/blog/setupquarto/robh_blog/teaching},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. n.d. https://focusonr.org/blog/setupquarto/robh_blog/teaching."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/publications/ur2.html",
    "href": "blog/setupquarto/robh_blog/publications/ur2.html",
    "title": "Test 2 Sur la pénétration des rayons de Becquerel non déviables par le champ magnétique",
    "section": "",
    "text": "Abstract goes here\nPlus any other information such as supplementary materials.\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2000,\n  author = {Ronald (Ryy) Glenn Thomas and Marie S},\n  title = {Test 2 {Sur} La Pénétration Des Rayons de {Becquerel} Non\n    Déviables Par Le Champ Magnétique},\n  date = {2000-03-04},\n  url = {https://focusonr.org/blog/setupquarto/ur2.html},\n  doi = {10.1111/cras.404950},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas, and Marie S. 2000. “Test 2 Sur La\nPénétration Des Rayons de Becquerel Non Déviables Par Le Champ\nMagnétique.” March 4, 2000. https://doi.org/10.1111/cras.404950."
  },
  {
    "objectID": "blog/setupquarto/robh_blog/publications/uranium.html",
    "href": "blog/setupquarto/robh_blog/publications/uranium.html",
    "title": "Sur la pénétration des rayons de Becquerel non déviables par le champ magnétique",
    "section": "",
    "text": "Abstract goes here\nPlus any other information such as supplementary materials.\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2000,\n  author = {Ronald (Ryy) Glenn Thomas and Marie Skłodowska-Curie},\n  title = {Sur La Pénétration Des Rayons de {Becquerel} Non Déviables\n    Par Le Champ Magnétique},\n  date = {2000-03-04},\n  url = {https://focusonr.org/blog/setupquarto/uranium.html},\n  doi = {10.1111/cras.304950},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas, and Marie Skłodowska-Curie. 2000. “Sur\nLa Pénétration Des Rayons de Becquerel Non Déviables Par Le Champ\nMagnétique.” March 4, 2000. https://doi.org/10.1111/cras.304950."
  }
]