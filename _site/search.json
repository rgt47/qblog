[
  {
    "objectID": "posts/simpleS3/index.html",
    "href": "posts/simpleS3/index.html",
    "title": "Writing a simple R package in S3.",
    "section": "",
    "text": "S3 OOP in R\n\n\n\n1 Introduction\nIf you, like me, feel its time to expand your R programming armamentarium to include S3 methods. This blog may help. Where to start?\nLet’s begin by reading the relevant chapters in Advanced R (add reference).\nAlso useful other references:\nIntroduction to Scientific Programming and Simulation using R. Jomes. Maillardet, Robinson.\n[1608.07161] A Simple Guide to S3 Methods https://arxiv.org/abs/1608.07161\nWhy your S3 method isn’t working | R-bloggers\nDealing with S3 methods in R with a simple example | R-bloggers\nVideo on S3 Classes in R by Dr Andrew Robinson | R-bloggers\nUnexported S3 Methods and R Packages | R-bloggers\nSimple Guide to S3 Methods | R-bloggers\nThe S3 OOP system | R-bloggers\n\n\n2 Appendix zz.table1.c\n\nzz.table1.c = function(df, form, pv=TRUE, totl=TRUE, grps=TRUE) {\nif (!require(\"pacman\")) install.packages(\"pacman\", repo=\"cran.rstudio.com\")\npacman::p_load(janitor )\nprep =  function(df, form) {\ndfr = df %>%  \n    ungroup %>% \n    sel(all.vars(form[[3]])) \ndf_list = dfr %>%  split( df_grp) %>%  \nlist_merge(., \"Total\" = dfr) %>%  \npurrr::transpose()\n}\nprocess1 = function(x){\npv_chr = data.frame(x[[\"Total\"]],df_grp) %>%\npvalue_chr \nll = x[[length(x)]]%>%  as.factor %>% levels \nll_indent = paste(\"\\\\hspace{5mm}   \",ll)\nsum_chr = x %>% \n    lapply(function(x) factor(x, levels=ll)) %>%    \n    map(categ)   %>% as_tibble  %>% \n    cbind(variable=ll_indent, ., 'p-value'=NA) %>% \n    mut(variable=as.character(variable)) %>% \n    rbind(NA, .) \nsum_chr[1,ncol(sum_chr)]=pv_chr\n# browser()\nreturn(sum_chr)\n}\nprocess2 = function(x){\npv_num = data.frame(x[[\"Total\"]],df_grp) %>%    \n   pvalue_num\nsum_num = x %>% \n   map_chr(contin)  %>% \n   bind_rows  %>%  \n   cbind(variable=NA,., 'p-value'=pv_num)    %>%  \n   mut(variable=as.character(variable)) \nreturn(sum_num)\n}\ncontin= function(x) {\ns1 = zz.sum.min(x)\npaste0(s1['Mean'],\"$\\\\pm$\", s1['SD'], \" ({\\\\scriptsize $\",s1['N'],\"$})\") }\ncateg = function(x) {\nprps = table(x) %>% prop.table  %>%  round(2)*100\ncnts_prps =  table(x)%>% \npaste0(.,\" ({\\\\scriptsize $\",prps,\"$})\")\n} \npvalue_num = function(df) {\ntidy(anova(lm(as.formula(paste(names(df),  collapse=\"~\")), data = df)))$p.value[1]\n}\npvalue_chr = function(df) {\ntab =  table(df[,1], df[,2])\nifelse((nrow(tab) >=2 & ncol(tab) >=2), \n       stats::fisher.test(tab,simulate.p.value=T)$p.value, NA) \n}\nfieldclass =sapply(df, class)%>%  enframe %>%  \nslice(match(all.vars(form[[3]]),name))\ngroupclass =sapply(df, class)%>%  enframe %>%  \nslice(match(all.vars(form[[2]]),name))\ndf_grp<- df %>%  pull(groupclass$name)\ndf2 = prep(df, form)\nout = df2 %>%  \n  map_if(fieldclass$value==\"numeric\" | fieldclass$value==\"integer\", function(x){process2(x)}) %>%  \n       map_if(fieldclass$value==\"character\", function(x){process1(x)})   %>%  \nimap(function(x,y) {\n         y2 = ifelse(fieldclass$value[fieldclass$name == y]==\"character\", \n             paste(y, \"-- {\\\\scriptsize no. (\\\\%)}\"), y)\n     x[1,1]=y2\n#  browser()\n     x\n       }) %>%  \n   bind_rows()\non= names(out)\nnn = tabyl(df_grp)%>% \n    adorn_totals() %>% \n    pull(n) \nnames(out) = paste(rep(\"{\\\\bf\",length(on)),on, c(\"\",paste0(\"\\\\scriptsize(n=\",nn,\")\"),\"\"),rep(\"}\",length(on)))\nif (!grps) out = out %>%  sel(contains(\"variable\"),contains(\"Total\"),contains(\"p-value\"))\nif (!pv) {\n    out = out %>%  sel(-contains(\"p-value\"))}\nif (!totl) out = out %>%  sel(-contains(\"Total\"))\nreturn(out)\n}\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {{Writing} a Simple {R} Package in {S3.}},\n  date = {2023-06-13},\n  url = {https://focusonr.org/posts/simpleS3},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023.“Writing a Simple R Package in S3.\n.” June 13, 2023. https://focusonr.org/posts/simpleS3."
  },
  {
    "objectID": "posts/install_mint_on_macbook/index.html",
    "href": "posts/install_mint_on_macbook/index.html",
    "title": "Install Linux Mint on macbook Pro",
    "section": "",
    "text": "The target MacBook is a 13-inch, 2016, Four Thunderbolt 3 Ports.\nGet an iso file from the Mint website\nISO file is 2.5 GB in size.\nThe Linux Mint 21.1 Vera download site is here\nDownload torrent file from website here\nUse app on macbook pro running macos, say Transmission to open torrent file and download. Takes about 6 minutes via ethernet connection.\nTransfer iso file to USB drive, “burn”. use balanaEtcher. Download here\nInsert the USB flash drive into the target mac and reboot. Hold the ALT key to allow booting from the external USB drive.\nFrom the Grub menu choose “Start Linux Mint 21.1 Cinnamon 64-bit”\nA linux mint desktop will appear. There is one icon on the screen lfbeled “install Linux Mint”. Double click it.\nA setup dialog will start.\n\nFirst Language,\nthen Network,\nthen codexes,\nthen options for a fresh install or “something else”.\nnext Location,\nthen name a root user and assign a password.\n\nThats it. Reboot and login.\nUse Panda Wireless modem for internet access. Mint 21.1 has Ralink RT5372 drivers installed.\nAdd second monitor. Cinema display 27”.\nOpen Display menu. Select 2560x1440 for resolution for both monitors. Monitor scale 150%.\nTurn on Timeshift to provide hourly snapshots\nTurn on “Tap to click” and “Reverse scroll”. Open “Mouse and Touchpad”.\nsudo apt-get update ; sudo apt-get upgrade"
  },
  {
    "objectID": "posts/dockerize_simple/index.html",
    "href": "posts/dockerize_simple/index.html",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "posts/dockerize_simple/index.html#select-a-hosting-service",
    "href": "posts/dockerize_simple/index.html#select-a-hosting-service",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.1 Select a hosting service",
    "text": "3.1 Select a hosting service\nThere are a number of cloud based server options: Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nAn overview of the process with EC2 follows. (Detailed instructions for AWS EC2 were described in an earlier post: https://focusonr.org/posts/setupaws/)\nstep 0. Create an AWS account or sign in and navigate to the EC2 dashboard. step 1. Set up an working environment with AWS server. a. define secure shell (ssh) key-pair b. configure firewall. c. obtain static IP. d. obtain domain name.\nOnce the environment is set up\nstep 2. a. select instance operating system (ubuntu) and type (t2-micro) b. launch server\nOnce the server is available connect via ssh.\nssh -i \"~/.ssh/power1_app_ssh.pem\"  ubuntu@rgtlab.org\nor using the config setup described in Tip 1.\nssh rgtlab.org \nThe only necessary software to install is Docker and Caddy. If you followed the cli or console based instructions to set up a virtual server here the docker and caddy will be pre-installed.\nOtherwise you can install them with the following commands:\nsudo apt update\nsudo apt install docker.io -y\nsudo apt install -y curl debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | \\\nsudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | \\\nsudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy -y\nAt this point we have a customized virtual server with a static IP address, unique domain name and firewall in place. In other words, items 1, 2, and 3 from our ‘hosting’ list above are taken care of."
  },
  {
    "objectID": "posts/dockerize_simple/index.html#website",
    "href": "posts/dockerize_simple/index.html#website",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.2 Website",
    "text": "3.2 Website\nTo containerize our Shiny app we need a Dockerfile to the power1_app directory.\nThe three configuation files are:\n\na Docker configuration file (default name Dockerfile)\n\n\n\n  Photo by Ian Taylor on Unsplash \nWe’ll use docker to access R/Shiny. Here is our minimal dockerfile:\n\nDockerfile: Show the code\nFROM rocker/shiny:4.2.0\nCOPY /power1_shiny/* /srv/shiny-server/\nCMD [\"/usr/bin/shiny-server\"]\n\nThis file instructs Docker to build a container based on a Rocker/Shiny image (which is a ubuntu image with R and Shiny installed) then copy into the container the power1_shiny directory containing the shiny code and finally launch Shiny server listening on (default) port 3838. We placed the power1_shiny/app.R code in the default location /srv/shiny-server so we only need to start the server and it will find the shiny program.\nTo configure the web server we need to add a Caddy configuration file (default name Caddyfile) to the power1_app directory.\nWe’ll use Caddy as our web server. Caddy is an open-source tool that has the very useful feature of automating the acquiring and installing of an SSL certificate. (An SSL cert is required by most browsers to use the encrypted communication protocol https.)\nCaddy is configured with a file named Caddyfile. We use the caddy configuration file to specify three critical things.\n\nthe site domain name.\nthe authentication pair login/hash-password, for each user and\nthe ‘reverse proxy’ map that redirects requests to port 443 (ssl port) onto port 3838 (Shiny port) in the docker container.\n\nOur barebones Caddyfile looks like this:\n\nCaddyfile: Show the code\nrgtlab.org {\n    basicauth * /power1_shiny/* {\n        bob $2a$14$pYWd5O7JqNeGLS4m4CKkzemM2pq5ezn9bcTDowofZTl5wRVl8NTJm\n    }\n    root * /var/www/html\n    handle_path /power1_shiny/* {\n            reverse_proxy 0.0.0.0:3838\n    }\n    file_server\n}\n\nWe can accomplish what we need for items 4, 5, 6 and 7 through the Caddyfile.\nNote:\n\nrgtlab.org is our domain name\nthe basicauth directive specifies login credentials for bob (password: vanilla47)\nhandle_path maps all https requests to port 3838 where Shiny is listening.\nroot directive tells Caddy where to look for the index.html file.\n\nProviding our servers domain name, rgtlab.org is sufficient to initiate an exchange with the letsencrypt service to generates an SSL certificate.\nLastly, we need a index.html file to provide a launch page for the app. and move all files to the server.\n\nindex.html: Show the code\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Power1 app</h1>\n    <ul>\n      <li><a href=\"./power1_shiny/\">Power1 app</a></li>\n    </ul>\n  </body>\n</html> \n\nOnce the config files and the index.html file and the Shiny code directory are in place copy the power1_app directory to the server rgtlab.org with the secure copy command:\nscp -i \"~/.ssh/power1_app.pem\" -r ~/prj/power1_app/  ubuntu@rgtlab.org:~\nLastly, ssh to the server and cd to power1_app directory\nBuild and run the Docker containerand run. Using the docker approach allows us to avoid installing both R and Shiny on the virtual server rgtlab.org\ndocker build -t power1_image .\ncreate container and run\ndocker run -d --name=power1_shiny -p 3838:3838 --restart=always power1_image\ncopy Caddyfile to location caddy expects in /etc/caddy directory\nsudo cp ./Caddyfile /etc/caddy/Caddyfile \ncopy index.html to location caddy expects in /var/www/html directory\ncp  ./index.html /var/www/html/index.html \nand run the following command to\nrestart Caddy\nsudo systemctl reload caddy\nApp launch page is now available at https://rgtlab.org.\nand you’re good to go!"
  },
  {
    "objectID": "posts/dockerize_simple/index.html#tip-construct-ssh-config-file.",
    "href": "posts/dockerize_simple/index.html#tip-construct-ssh-config-file.",
    "title": "A simple process to get your Shiny app online (securely).",
    "section": "3.3 Tip construct ssh config file.",
    "text": "3.3 Tip construct ssh config file.\nFor convenience, construct a config file in ~/.ssh as:\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nStrictHostKeyChecking no  #avoid known host file error message\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\nthen you can ssh into the new server with\nsh> ssh rgtlab.org"
  },
  {
    "objectID": "posts/setupquarto/index.html",
    "href": "posts/setupquarto/index.html",
    "title": "Setting up Quarto",
    "section": "",
    "text": "Quarto is an expansion of the Rstudio app. From muy perspective it provides a number of useful additional tools for literate programming and blogging.\nConsider some ideas from Rob Hyndman\nGitHub - robjhyndman/quarto_website_template: Template of quarto website\nand\nEric Ekholm - Modifying the Default Quarto Blog Structure https://www.ericekholm.com/posts/demo-quarto-site/\ncloned to sbx"
  },
  {
    "objectID": "posts/setupquarto/index.html#columns",
    "href": "posts/setupquarto/index.html#columns",
    "title": "Setting up Quarto",
    "section": "2.1 2 - Columns",
    "text": "2.1 2 - Columns\n\n\n\ngeom_density(\n  mapping = NULL,\n  data = NULL,\n  stat = \"density\",\n  position = \"identity\",\n  ...,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE,\n  outline.type = \"upper\"\n)\n\n\nstat_density(\n  mapping = NULL,\n  data = NULL,\n  geom = \"area\",\n  position = \"stack\",\n  ...,\n  bw = \"nrd0\",\n  adjust = 1,\n  kernel = \"gaussian\",\n  n = 512,\n  trim = FALSE,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE\n)"
  },
  {
    "objectID": "posts/setupquarto/index.html#margin-captions",
    "href": "posts/setupquarto/index.html#margin-captions",
    "title": "Setting up Quarto",
    "section": "2.2 2 - Margin captions",
    "text": "2.2 2 - Margin captions\n\nggplot(data = gapminder::gapminder, mapping = aes(x = lifeExp, fill = continent)) +\n  stat_density(position = \"identity\", alpha = 0.5)\n\n\n\n\nBla bla bla. This is a caption in the margin. Super cool isn’t it?\n\n\n\n\nStart with running quarto create-project at ~/prj level\n❯ quarto create-project qblog --type website:blog\nCreating project at /Users/zenn/Dropbox/prj/qblog: - Created _quarto.yml - Created index.qmd - Created posts/welcome/index.qmd - Created posts/post-with-code/index.qmd - Created about.qmd - Created styles.css - Created posts/_metadata.yml ```\n\ncd to ~/qblog/posts/\ncreate a new directory, say setupquarto\ncd to ~/qblog/posts/setupquarto\nvim index.qmd"
  },
  {
    "objectID": "posts/setupobs/index.html",
    "href": "posts/setupobs/index.html",
    "title": "Setting up OBS for webcasting",
    "section": "",
    "text": "1 Introduction\nWebcasting for biostatistics is the challenge.\nLets take it one step at a time.\nStart with the open source project OBS.\nWelcome | OBS\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy)glennthomas2023,\n  author = {Ronald (Ryy) Glenn Thomas},\n  title = {Setting up {OBS} for Webcasting},\n  date = {2023-06-11},\n  url = {https://focusonr.org/posts/setupobs},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nRonald (Ryy) Glenn Thomas. 2023. “Setting up OBS for\nWebcasting.” June 11, 2023. https://focusonr.org/posts/setupobs."
  },
  {
    "objectID": "posts/server_setup_aws_console/index.html",
    "href": "posts/server_setup_aws_console/index.html",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "posts/server_setup_aws_console/index.html#select-a-hosting-service",
    "href": "posts/server_setup_aws_console/index.html#select-a-hosting-service",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "2.1 Select a hosting service",
    "text": "2.1 Select a hosting service\nThere are a number of cloud based server options to choose from: Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nIn this post we’ll provide a step-by-step description of the process with Amazon Web Services Elastic Compute Cloud (AWS EC2).\nAWS is a reasonable choice for setting up a small custom server. Its not the cheapest option, but the system is very well documented and, in our experience, reliable.\nTo start, open the EC2 console by visiting the URL:\n   https://aws.amazon.com/console\n(see margin figure)\nIn the console window choose regional service. For me its “N. California”.\n\n\n\n\n\nAWS console\n\n\nNext create an account, or sign in, and once you’re logged in navigate to the EC2 dashboard. Its by way of the dashboard that we’ll define the parameters for the type of server to launch and the mechanisms for communicating with it."
  },
  {
    "objectID": "posts/server_setup_aws_console/index.html#aws-working-environment",
    "href": "posts/server_setup_aws_console/index.html#aws-working-environment",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "2.2 AWS Working Environment",
    "text": "2.2 AWS Working Environment\nAlong with selecting a server we’ll need to set up a working environment. We recommend setting up the working environment before launching the server, as it saves some back and forth. The working environment consists of four main components:\n\nA secure shell (ssh) key-pair to allow us to remotely and securely login to the virtual server once its launched.\nA firewall which will restrict server access to only secure connections. The firewall closes off all incoming traffic except through those ports specifically named.\n\nA static IP address. This is required for maintaining the link between the domain name and the server when rebooting. (The default is for the instance/server to be assigned a new IP address each time its rebooted).\n\nand 4. A domain name, say rgtlab.org. A domain name is not required but will facilitate collaborator access by not needing to use the IP address directly.\n\n2.2.1 Ssh key pair\nThe first time we create an AWS account we need to exchange an ssh key pair with AWS. The pairs consist of a private and a public key. The pair of keys will allow us to login securely to any server we launch on EC2. We can generate an ssh key pair in one of two ways in EC2. Either, locally, on our workstation and upload the public key to EC2, or have EC2 generate the key pair and download the private key.\nFor the first option we create a directory on our workstation to hold the keys and navigate to it. e.g. ~/.ssh. Generate the keys with the command\nssh-keygen -m PEM\n“PEM” defines the key format. More information on public key authentication can be found here. In the interactive dialog name the key prefix something like power1_app.pem. The dialog will ask for a passphrase. Enter one for an additional level of security, but its not required. The ssh-keygen program will generate two files: power1_app.pem.pub and power1_app.pub\nTo complete the process return to the EC2 dashboard select Actions and then Import key pairin the left panel. Enter the name power1_app and select the Browse button. Navigate to the file power1_app.pem.pub in the directory ~/.sshand and select the Import key pair button at the bottom of the page.\nFor the second approach select Create key pair botton in the upper right of the page.\nA form appears and asks for a name. Enter something like power1_app. Select RSA for key pair type and .pem for key file format.\nGive the pair a name, say power1_app, and the keys will be created and the private key power1_app.pem will be downloaded to our local machine to the ~/.ssh directory. Change the access permissions for the private key with the following command:\nsudo chmod 600 power1_app.pem\n\n\n2.2.2 Firewall\nTo create a firewall click on Network settings in the left hand panel. Choose Create security group and select Allow SSH traffic and Allow HTTPS traffic. This will create a firewall that leaves open only ports 22 and 443, for ssh and https incoming traffic respectively. The default name for the firewall will be something like launch-wizard-6. name the security group power1_firewall.\n\n\n2.2.3 Static IP address\nThe next step is to use the elastic IP service to get a static IP that can be assigned to the server. Navigate to Network and Security again and select Allocate Elastic IP. An IP will be assigned from the EC2 pool of available IPv4 IP addresses.\n\n\n2.2.4 Domain Name\nTo obtain a dedicated domain name go to Amazon route 53 to select a domain name and associate it with our static IP.\nOnce a domain name is acquired, e.g. rgtlab.org, associate it with our static IP address. This can be done via the Route 53 service. To associate domain name rgtlab.org with elastic IP do the following in Route 53:\n\nclick on hosted zones in side panel\nclick on rgtlab.org in center panel\nclick on checkbox for rgtlab.org type=A line\nthen click on edit record in right panel\nchange IP address to the static IP (e.g. 13.57.139.31)."
  },
  {
    "objectID": "posts/server_setup_aws_console/index.html#select-and-launch-instance",
    "href": "posts/server_setup_aws_console/index.html#select-and-launch-instance",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "2.3 Select and launch instance",
    "text": "2.3 Select and launch instance\n\nFrom “Quick Start” in the EC2 dashboard select an operating system for the server. Our recommendation is the Ubuntu OS. Ubuntu is based on linux. Click the Ubuntu button.\n\n\nName the server, say power1\n\n\nNext choose an instance type, e.g. “t2-micro”. Different instance types are combinations of, processors, memory, storage capacity, and network performance.\nclick Configure Instance Details\nchoose a Key pair (use power1_app.rsa from your environment) .\nAdd security group, e.g. ‘power1_firewall’ from your environment.\nchoose 30 GB of EBS General Purpose (SSD) or Magnetic storage. Thirty GBs is the maximum allowed in the ‘Free tier’ of servers on AWS. In our experience smaller disk sizes can lead to problems.\nclick Launch Instance\n\nto Launch the Instance."
  },
  {
    "objectID": "posts/setup_nvim-R_vimtex_ultisnips/index.html",
    "href": "posts/setup_nvim-R_vimtex_ultisnips/index.html",
    "title": "Setting up Nvim-R, vimtex and Ultisnips in vim for data science",
    "section": "",
    "text": "vim setup"
  },
  {
    "objectID": "posts/setup_nvim-R_vimtex_ultisnips/index.html#links-section-docs-and-solved-issues-w-answers-from-which-this-readme-has-been-compiled",
    "href": "posts/setup_nvim-R_vimtex_ultisnips/index.html#links-section-docs-and-solved-issues-w-answers-from-which-this-readme-has-been-compiled",
    "title": "Setting up Nvim-R, vimtex and Ultisnips in vim for data science",
    "section": "1.1 Links Section (docs and solved issues w/ answers, from which this readme has been compiled)",
    "text": "1.1 Links Section (docs and solved issues w/ answers, from which this readme has been compiled)\nback to header\nhttps://www.reddit.com/r/vim/comments/7c7wd9/vim_vimtex_zathura_on_macos/\nhttps://stackoverflow.com/questions/40077211/e185-cannot-find-color-scheme\nhttps://github.com/morhetz/gruvbox/issues/219\nhttps://github.com/junegunn/vim-plug/issues/325\nhttps://github.com/dylanaraps/pywal/wiki/Getting-Started\nhttps://github.com/dylanaraps/wal.vim\nhttps://github.com/dylanaraps/pywal/wiki/Customization\nhttps://github.com/lervag/vimtex/issues/1420\nhttps://latextools.readthedocs.io/en/latest/install/\nhttps://mg.readthedocs.io/latexmk.html\nhttps://gist.github.com/LucaCappelletti94/920186303d71c85e66e76ff989ea6b62\nhttps://github.com/lervag/vimtex/issues/1420\nhttps://latextools.readthedocs.io/en/latest/install/\nhttps://github.com/lervag/vimtex/issues/1420\nhttps://github.com/lervag/vimtex/issues/940\nhttps://github.com/lervag/vimtex/issues/663\nhttp://www.math.cmu.edu/~gautam/sj/blog/20140310-zathura-fsearch.html\nhttps://gitter.im/SirVer/ultisnips\nhttps://github.com/SirVer/ultisnips/issues/1107\nhttps://github.com/SirVer/ultisnips/issues/1022\nhttps://github.com/SirVer/ultisnips/issues/850\nhttps://superuser.com/questions/1115159/how-do-i-install-vim-on-osx-with-python-3-support\nhttps://jdhao.github.io/2020/01/05/ultisnips_python_interpolation/\nhttp://witkowskibartosz.com/blog/python_snippets_in_vim_with_ultisnips.html#.Xnw9gtP7TRY\nhttps://germaniumhq.com/2019/02/07/2019-02-07-Vim-Ultimate-Editing:-UltiSnips/\nhttp://vimcasts.org/episodes/ultisnips-python-interpolation/\nhttps://wraihan.com/posts/vimtex-and-zathura/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Focus on R blog",
    "section": "",
    "text": "A straightforward strategy to get your Shiny app online, securely and continuously updated.\n\n\nGithub, Docker-compose, EC2 version\n\n\n\n\nDocker\n\n\nShiny\n\n\ndocker-compose\n\n\n\n\nThis is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\n\n\n\n\n\n\nJun 14, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nA simple process to get your Shiny app online (securely).\n\n\n\n\n\n\n\nDocker\n\n\nShiny\n\n\n\n\nThis is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\n\n\n\n\n\n\nJun 13, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nInstall Linux Mint on macbook Pro\n\n\nA set of tips for installation and post install\n\n\n\n\nMint\n\n\nR\n\n\nPython\n\n\nJulia\n\n\n\n\nstep by step description of howto install and customize a Mint instance for data science workflow\n\n\n\n\n\n\nJun 13, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up Quarto\n\n\n\n\n\n\n\n\n\n\n\n\nJun 13, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nWriting a simple R package in S3.\n\n\n\n\n\n\n\nAWS\n\n\n\n\nGetting started with S3 OO programming in R\n\n\n\n\n\n\nJun 13, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up OBS for webcasting\n\n\n\n\n\n\n\n\n\n\n\n\nJun 11, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up Nvim-R, vimtex and Ultisnips in vim for data science\n\n\n\n\n\n\n\nvim\n\n\n\n\nDetailed configuration for optimal interaction and efficiency\n\n\n\n\n\n\nJun 11, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSet up a virtual server on AWS (in anticipation of hosting Shiny apps)\n\n\n\n\n\n\n\nAWS\n\n\n\n\nDetailed steps for setting up a lightweight server on AWS.\n\n\n\n\n\n\nJun 7, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nUsing the AWS command line interface to launch an EC2 server\n\n\n\n\n\n\n\nAWS\n\n\n\n\nA single batch program to setup virtual server to host shiny app\n\n\n\n\n\n\nMay 31, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up a minimal neovim environment for data science code development\n\n\nA neovim IDE for R, Python, and Julia\n\n\nThis is the first in a series of posts offering suggested strategies for setting up key tools for data science code development\n\n\n\n\n\n\nMay 15, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Focused on new and interesting data science technologies."
  }
]