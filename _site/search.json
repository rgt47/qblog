[
  {
    "objectID": "posts/simpleS3/index.html",
    "href": "posts/simpleS3/index.html",
    "title": "Writing a simple R package in S3.",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "posts/simpleS3/index.html#aws-working-environment",
    "href": "posts/simpleS3/index.html#aws-working-environment",
    "title": "Writing a simple R package in S3.",
    "section": "AWS Working Environment",
    "text": "AWS Working Environment\nThat is, along with selecting a server we’ll need to set up a working environment. We recommend setting up the working environment before launching the server, as it saves some back and forth. This working environment consists of four main components:\n\nA secure shell (ssh) key-pair to allow we to remotely and securely login to the virtual server once its launched.\nA firewall to restrict access to only secure connections. The firewall closes off all incoming traffic except through those ports specifically named.\n\nA static IP address. This is required for maintaining the link between the domain name and the server when rebooting. (The default is for the instance/server to be assigned a new IP each time its rebooted.) and\nA domain name, say rgtlab.org. A domain name is not required but will facilitate collaborator access by not needing to use the IP address directly."
  },
  {
    "objectID": "posts/simpleS3/index.html#ssh-key-pair",
    "href": "posts/simpleS3/index.html#ssh-key-pair",
    "title": "Writing a simple R package in S3.",
    "section": "Ssh key pair",
    "text": "Ssh key pair\nThe first time we create an AWS account we need to exchange an ssh key pair with AWS. The pairs consist of a private and a public key. The pair of keys will allow us to login securely to any server we launch on EC2. We can generate an ssh key pair in one of two ways in EC2. Either, locally, on our workstation and upload the public key to EC2, or have EC2 generate the key pair and download the private key.\nFor the first option we create a directory on our workstation to hold the keys and navigate to it. e.g. ~/.ssh. Generate the keys with the command\nssh-keygen -m PEM\n“PEM” defines the key format. More information on public key authentication can be found here. In the interactive dialog name the key prefix something like power1_app_ssh. The dialog will ask for a passphrase. Enter one for an additional level of security, but its not required. The ssh-keygen program will generate two files: power1_app_ssh and power1_app_ssh.pub\nTo complete the process return to the EC2 dashboard select Keys Pairs in the left panel. The select Create key pair botton in the upper right of the page.\nA form appears and asks for a name. Enter something like power1_app_ssh. Select RSA for key pair type and .pem for key file format to match the ssh-keygen process we went through on our workstation.\nasks for the location of the public key. Browse to the ~/.ssh directory on wer workstation and import the public key power1_app_ssh.pub.\nGive the pair a name, say power1_app_ssh, and the keys will be created and the private key power1_app_ssh.pem will be downloaded to our local machine to the ~/.ssh directory. Change the access permissions for the private key with the following command:\nsudo chmod 600 power1_app_ssh.pem"
  },
  {
    "objectID": "posts/simpleS3/index.html#firewall",
    "href": "posts/simpleS3/index.html#firewall",
    "title": "Writing a simple R package in S3.",
    "section": "Firewall",
    "text": "Firewall\nTo create a firewall click on Network settings in the left hand panel. Choose Create security group and select Allow SSH traffic and Allow HTTPS traffic. This will create a firewall that leaves open only ports 22 and 443, for ssh and https incoming traffic respectively. The default name for the firewall will be something like launch-wizard-6. name the security group power1_firewall."
  },
  {
    "objectID": "posts/simpleS3/index.html#static-ip-address",
    "href": "posts/simpleS3/index.html#static-ip-address",
    "title": "Writing a simple R package in S3.",
    "section": "Static IP address",
    "text": "Static IP address\nThe next step is to use the elastic IP service to get a static IP that can be assigned to the server. Navigate to Network and Security again and select Allocate Elastic IP. An IP will be assigned from the EC2 pool of available IPv4 IP addresses."
  },
  {
    "objectID": "posts/simpleS3/index.html#domain-name",
    "href": "posts/simpleS3/index.html#domain-name",
    "title": "Writing a simple R package in S3.",
    "section": "Domain Name",
    "text": "Domain Name\nTo obtain a dedicated domain name go to Amazon route 53 to select a domain name and associate it with our static IP.\nOnce a domain name is acquired, e.g. rgtlab.org, associate it with our static IP address. This can be done via the Route 53 service. To associate domain name rgtlab.org with elastic IP do the following in Route 53:\n\nclick on hosted zones in side panel\nclick on rgtlab.org in center panel\nclick on checkbox for rgtlab.org type=A line\nthen click on edit record in right panel\nchange IP address to the static IP (e.g. 13.57.139.31)."
  },
  {
    "objectID": "posts/simpleS3/index.html#access-server",
    "href": "posts/simpleS3/index.html#access-server",
    "title": "Writing a simple R package in S3.",
    "section": "Access server",
    "text": "Access server\nOn wer laptop log into server with\nssh -i \"~/.ssh/power1_app_ssh.pem\" ubuntu@rgtlab.org"
  },
  {
    "objectID": "posts/awscli_approach/index.html",
    "href": "posts/awscli_approach/index.html",
    "title": "Using the AWS command line interface to launch a EC2 server and docker compose",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "posts/awscli_approach/index.html#appendix-1",
    "href": "posts/awscli_approach/index.html#appendix-1",
    "title": "Using the AWS command line interface to launch a EC2 server and docker compose",
    "section": "Appendix 1 Set up AWS IAM",
    "text": "Appendix 1 Set up AWS IAM\nSet up aws access via the aws configure program. To get the needed credentials use the AWS IAM service.\nDetails follow:\nLog into AWS console.\nSearch for IAM service. Navigate to IAM dashboard.\nSelect Users in left hand panel.\nThen select Add Users button (in upper right).\nThen enter a User name in the form. Click Next (lower right)\nThen Create User.\nClick on the user name\nIn the page that comes up. Select Security Credentials tab (center of page).\nUnder Access Keys panel click Create access key (right side or bottom of panel).\nClick Command Line Interface CLI)\nand at the bottom of the page click the checkbox “I understand…”.\nFinally select Create access key and\nchoose Download .csv file (lower right).\nNavigate Download screen to local ~/.aws directory.\nClick Done\nNow in the terminal on your workstation, configure the aws cli app via the command.\n aws configure \nEnter info from the credentials file just downloaded. After entering the AWS Access Key ID and AWS Secret Access Key information you are asked for a Region, (My region is us-west-1), and an output format suggested output format is JSON."
  },
  {
    "objectID": "posts/setupaws/index.html",
    "href": "posts/setupaws/index.html",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "posts/setupaws/index.html#select-a-hosting-service",
    "href": "posts/setupaws/index.html#select-a-hosting-service",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "Select a hosting service",
    "text": "Select a hosting service\nThere are a number of cloud based server options to choose from: Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nIn this post we’ll provide a step-by-step description of the process with AWS EC2.\nAWS is a reasonable choice for setting up a small custom server. Its not the cheapest option, but the system is very well documented and, in our experience, reliable.\nTo start open the EC2 console visit the URL:\n   https://aws.amazon.com/console\nNext choose regional service. For me its “N. California”.\n\n\n\nNext create an account or sign in and navigate to the EC2 dashboard. Its through the dashboard that we’ll define the parameters for the type of server to launch and the mechanisms for communicating with it."
  },
  {
    "objectID": "posts/setupaws/index.html#aws-working-environment",
    "href": "posts/setupaws/index.html#aws-working-environment",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "AWS Working Environment",
    "text": "AWS Working Environment\nAlong with selecting a server we’ll need to set up a working environment. We recommend setting up the working environment before launching the server, as it saves some back and forth. The working environment consists of four main components:\n\nA secure shell (ssh) key-pair to allow us to remotely and securely login to the virtual server once its launched.\nA firewall which will restrict server access to only secure connections. The firewall closes off all incoming traffic except through those ports specifically named.\n\nA static IP address. This is required for maintaining the link between the domain name and the server when rebooting. (The default is for the instance/server to be assigned a new IP address each time its rebooted).\n\nand 4. A domain name, say rgtlab.org. A domain name is not required but will facilitate collaborator access by not needing to use the IP address directly."
  },
  {
    "objectID": "posts/setupaws/index.html#ssh-key-pair",
    "href": "posts/setupaws/index.html#ssh-key-pair",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "Ssh key pair",
    "text": "Ssh key pair\nThe first time we create an AWS account we need to exchange an ssh key pair with AWS. The pairs consist of a private and a public key. The pair of keys will allow us to login securely to any server we launch on EC2. We can generate an ssh key pair in one of two ways in EC2. Either, locally, on our workstation and upload the public key to EC2, or have EC2 generate the key pair and download the private key.\nFor the first option we create a directory on our workstation to hold the keys and navigate to it. e.g. ~/.ssh. Generate the keys with the command\nssh-keygen -m PEM\n“PEM” defines the key format. More information on public key authentication can be found here. In the interactive dialog name the key prefix something like power1_app.pem. The dialog will ask for a passphrase. Enter one for an additional level of security, but its not required. The ssh-keygen program will generate two files: power1_app.pem.pub and power1_app.pub\nTo complete the process return to the EC2 dashboard select Actions and then Import key pairin the left panel. Enter the name power1_app and select the Browse button. Navigate to the file power1_app.pem.pub in the directory ~/.sshand and select the Import key pair button at the bottom of the page.\nFor the second approach select Create key pair botton in the upper right of the page.\nA form appears and asks for a name. Enter something like power1_app. Select RSA for key pair type and .pem for key file format.\nGive the pair a name, say power1_app, and the keys will be created and the private key power1_app.pem will be downloaded to our local machine to the ~/.ssh directory. Change the access permissions for the private key with the following command:\nsudo chmod 600 power1_app_ssh.pem"
  },
  {
    "objectID": "posts/setupaws/index.html#firewall",
    "href": "posts/setupaws/index.html#firewall",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "Firewall",
    "text": "Firewall\nTo create a firewall click on Network settings in the left hand panel. Choose Create security group and select Allow SSH traffic and Allow HTTPS traffic. This will create a firewall that leaves open only ports 22 and 443, for ssh and https incoming traffic respectively. The default name for the firewall will be something like launch-wizard-6. name the security group power1_firewall."
  },
  {
    "objectID": "posts/setupaws/index.html#static-ip-address",
    "href": "posts/setupaws/index.html#static-ip-address",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "Static IP address",
    "text": "Static IP address\nThe next step is to use the elastic IP service to get a static IP that can be assigned to the server. Navigate to Network and Security again and select Allocate Elastic IP. An IP will be assigned from the EC2 pool of available IPv4 IP addresses."
  },
  {
    "objectID": "posts/setupaws/index.html#domain-name",
    "href": "posts/setupaws/index.html#domain-name",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "Domain Name",
    "text": "Domain Name\nTo obtain a dedicated domain name go to Amazon route 53 to select a domain name and associate it with our static IP.\nOnce a domain name is acquired, e.g. rgtlab.org, associate it with our static IP address. This can be done via the Route 53 service. To associate domain name rgtlab.org with elastic IP do the following in Route 53:\n\nclick on hosted zones in side panel\nclick on rgtlab.org in center panel\nclick on checkbox for rgtlab.org type=A line\nthen click on edit record in right panel\nchange IP address to the static IP (e.g. 13.57.139.31)."
  },
  {
    "objectID": "posts/setupaws/index.html#access-server",
    "href": "posts/setupaws/index.html#access-server",
    "title": "Set up a virtual server on AWS (in anticipation of hosting Shiny apps)",
    "section": "Access server",
    "text": "Access server\nOn your laptop log into server with\nssh -i \"~/.ssh/power1_app_ssh.pem\" ubuntu@rgtlab.org"
  },
  {
    "objectID": "posts/setupquarto/index.html",
    "href": "posts/setupquarto/index.html",
    "title": "Setting up Quarto",
    "section": "",
    "text": "This is inline code plus a small code chunk.\n\nlibrary(tidyverse)\n\nggplot(mpg) +\n  geom_jitter(aes(cty, hwy), size = 4, alpha = 0.5) \n\n\n\n\n\n\n\nTransforming OLS estimatesMaximizing likelihood\n\n\n\n\nCode\npreds_lm %&gt;% \n  ggplot(aes(body_mass_g, bill_length_mm, col = correct)) +\n  geom_jitter(size = 4, alpha = 0.6) +\n  facet_wrap(vars(species)) +\n  scale_color_manual(values = c('grey60', thematic::okabe_ito(3)[3])) +\n  scale_x_continuous(breaks = seq(3000, 6000, 1000)) +\n  theme_minimal(base_size = 12) +\n  theme(\n    legend.position = 'top', \n    panel.background = element_rect(color = 'black'),\n    panel.grid.minor = element_blank()\n  ) +\n  labs(\n    x = 'Body mass (in g)',\n    y = 'Bill length (in mm)'\n  )\n\n\n\n\n\n\n\n\n\nCode\nglm.mod &lt;- glm(sex ~ body_mass_g + bill_length_mm + species, family = binomial, data = dat)\n\npreds &lt;- dat %&gt;% \n  mutate(\n    prob.fit = glm.mod$fitted.values,\n    prediction = if_else(prob.fit &gt; 0.5, 'male', 'female'),\n    correct = if_else(sex == prediction, 'correct', 'incorrect')\n  )\n\n\npreds %&gt;% \n  ggplot(aes(body_mass_g, bill_length_mm, col = correct)) +\n  geom_jitter(size = 4, alpha = 0.6) +\n  facet_wrap(vars(species)) +\n  scale_x_continuous(breaks = seq(3000, 6000, 1000)) +\n  scale_color_manual(values = c('grey60', thematic::okabe_ito(3)[3])) +\n  theme_minimal(base_size = 10) +\n  theme(\n    legend.position = 'top', \n    panel.background = element_rect(color = 'black'),\n    panel.grid.minor = element_blank()\n  ) +\n  labs(\n    x = 'Body mass (in g)',\n    y = 'Bill length (in mm)'\n  )\n\n\n\n\n\n\n\n\n\n\n\\[\n\\int_0^1 f(x) \\ dx\n\\]\n\n\n\n\n\n\n\ngeom_density(\n  mapping = NULL,\n  data = NULL,\n  stat = \"density\",\n  position = \"identity\",\n  ...,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE,\n  outline.type = \"upper\"\n)\n\n\nstat_density(\n  mapping = NULL,\n  data = NULL,\n  geom = \"area\",\n  position = \"stack\",\n  ...,\n  bw = \"nrd0\",\n  adjust = 1,\n  kernel = \"gaussian\",\n  n = 512,\n  trim = FALSE,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE\n)\n\n\n\n\n\n\n\nggplot(data = gapminder::gapminder, mapping = aes(x = lifeExp, fill = continent)) +\n  stat_density(position = \"identity\", alpha = 0.5)\n\n\n\n\nBla bla bla. This is a caption in the margin. Super cool isn’t it?\n\n\n\n\nStart with running quarto create-project at ~/prj level\n~/Dropbox/prj via 📐 v4.2.1\n❯ quarto create-project qblog --type website:blog\nCreating project at /Users/zenn/Dropbox/prj/qblog:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created posts/welcome/index.qmd\n  - Created posts/post-with-code/index.qmd\n  - Created about.qmd\n  - Created styles.css\n  - Created posts/_metadata.yml\n\ncd to ~/qblog/posts/\ncreate a new directory, say setupquarto\ncd to ~/qblog/posts/setupquarto\ntouch setupquarto.qmd\nv setupquarto.qmd"
  },
  {
    "objectID": "posts/setupquarto/index.html#columns",
    "href": "posts/setupquarto/index.html#columns",
    "title": "Setting up Quarto",
    "section": "",
    "text": "geom_density(\n  mapping = NULL,\n  data = NULL,\n  stat = \"density\",\n  position = \"identity\",\n  ...,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE,\n  outline.type = \"upper\"\n)\n\n\nstat_density(\n  mapping = NULL,\n  data = NULL,\n  geom = \"area\",\n  position = \"stack\",\n  ...,\n  bw = \"nrd0\",\n  adjust = 1,\n  kernel = \"gaussian\",\n  n = 512,\n  trim = FALSE,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE\n)"
  },
  {
    "objectID": "posts/setupquarto/index.html#margin-captions",
    "href": "posts/setupquarto/index.html#margin-captions",
    "title": "Setting up Quarto",
    "section": "",
    "text": "ggplot(data = gapminder::gapminder, mapping = aes(x = lifeExp, fill = continent)) +\n  stat_density(position = \"identity\", alpha = 0.5)\n\n\n\n\nBla bla bla. This is a caption in the margin. Super cool isn’t it?\n\n\n\n\nStart with running quarto create-project at ~/prj level\n~/Dropbox/prj via 📐 v4.2.1\n❯ quarto create-project qblog --type website:blog\nCreating project at /Users/zenn/Dropbox/prj/qblog:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created posts/welcome/index.qmd\n  - Created posts/post-with-code/index.qmd\n  - Created about.qmd\n  - Created styles.css\n  - Created posts/_metadata.yml\n\ncd to ~/qblog/posts/\ncreate a new directory, say setupquarto\ncd to ~/qblog/posts/setupquarto\ntouch setupquarto.qmd\nv setupquarto.qmd"
  },
  {
    "objectID": "posts/setupneovim/TODO.html",
    "href": "posts/setupneovim/TODO.html",
    "title": "Focus on R: a new qblog",
    "section": "",
    "text": "Reusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy) glenn thomas,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  url = {https://focusonr.org/posts/setupneovim/TODO.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. n.d. https://focusonr.org/posts/setupneovim/TODO.html."
  },
  {
    "objectID": "posts/setupubuntu/index.html",
    "href": "posts/setupubuntu/index.html",
    "title": "Setup Ubuntu on parallels",
    "section": "",
    "text": "Introduction\nCould I use Docker?\nThis seems like genius:\n alias nvim=\"docker run -it -v `pwd`:/mnt/volume --workdir=/mnt/volume anatolelucet/neovim:stable\"\nalias nvim=\"docker run -it -v `pwd`:/mnt/volume --workdir=/mnt/volume anatolelucet/neovim:nightly\"\n\nstep one set up parallels tools. Use “Actions” menu to select “install parallels tools. This will point CD/DVD device at the iso image. Open the DVD in”Files”. Open install parallel tool-gui.\nmacbook harddrive will be available under share\nFirefox is installed. Add vinium-ff extension.\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{(ryy) glenn thomas2022,\n  author = {(Ryy) Glenn Thomas, Ronald},\n  title = {Setup {Ubuntu} on Parallels},\n  date = {2022-09-10},\n  url = {https://focusonr.org/posts/setupubuntu},\n  langid = {en}\n}\nFor attribution, please cite this work as:\n(Ryy) Glenn Thomas, Ronald. 2022. “Setup Ubuntu on\nParallels.” September 10, 2022. https://focusonr.org/posts/setupubuntu."
  },
  {
    "objectID": "posts/dockerize_compose/index.html",
    "href": "posts/dockerize_compose/index.html",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "",
    "text": "Photo by Nathan Waters on Unsplash"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#hosting",
    "href": "posts/dockerize_compose/index.html#hosting",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "Hosting",
    "text": "Hosting\n\n\n\n\n\nData flow \n\n\nFigure 2 illustrates the tools we’ll use and the flow of program and configuration files. In order to host power1 online we’ll need to complete the following tasks:\n\ncreate a virtual server (connected via ssh) with a firewall\nobtain a static IP address (to identify the server online)\nobtain a domain name (name for IP address)\ninstall and configure a webserver (tool to interact with https protocol requests and respond)\nobtain and install an SSL certificate (to allow encrypted communication)\nsetup an authentication method (password protection)\nconfigure a reverse proxy method (translate https, port 443, requests to Shiny, port 3838)\n\nAt first glance these 7 requirements can appear daunting, but on closer inspection all can be met with relative ease and minimal cost ( using a cloud-hosting service, e.g. Amazon’s EC2 or Digital Ocean, and a “leased” domain name from, e.g. GoDaddy, or Amazon’s Route 53) or no cost( if you have your own server with IP address, and domain name)"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#select-a-hosting-service",
    "href": "posts/dockerize_compose/index.html#select-a-hosting-service",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "Select a hosting service",
    "text": "Select a hosting service\nThere are a number of cloud based server options: Microsoft Azure, Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each has their own approach to setting up a custom virtual server. Several have free or low-cost service tiers available.\nAn overview of the process with EC2 follows. Detailed instructions for AWS EC2 are covered in an earlier post here.\n\nCreate an account or sign in.\nSet up an interactive environment with AWS server.\n\ndefine ssh key-pair.\nconfigure firewall.\nrequest static IP.\nobtain domain name.\nselect an instance and launch server.\n\n\nOnce the server is available connect via ssh, and login,\nThe only necessary software to install is docker and git. Install both with the following commands:\nsudo apt install -y git\nsudo snap install docker.io\nOnce the host is set up and the requisite software installed we’ll have a customized virtual server wtih a static IP address, and a unique domain name and firewall in place. In other words, items 1, 2, and 3 from our hosting list above will be taken care of."
  },
  {
    "objectID": "posts/dockerize_compose/index.html#website",
    "href": "posts/dockerize_compose/index.html#website",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "Website",
    "text": "Website\nTo configure the web server and containerize our app we need to add three files to the repo, to go along with our Shiny app.\nWe’ll use a slightly indirect route to create and place the necessary files on the server but this approach will allow to do all our countinuing development on our local workstation and have the web app be automatically continually undated. We’ll create the configuration files we need on our workstation and push them github and from there they can be accessed from our server.\nThese three configuation files are:\n\na Docker configuration file (default name Dockerfile)\n\n\n\n  Photo by Ian Taylor on Unsplash \nWe’ll use docker to access R/Shiny, and docker-compose to access Caddy, our webserver. The first file is the dockerfile. Here is our minimal dockerfile with comments:\n\nshow the Dockerfile code\nfrom rocker/shiny:4.2.0\ncopy /power1_shiny/* /srv/shiny-server/\ncmd [\"/usr/bin/shiny-server\"]\n\n\nGrab the latest rocker/Shiny image from Docker Hub to use as a base image.\nCopy the Shiny code to the default location for shiny-server\nRun the Shiny-server using the default app code\n\nThis configuration file instructs Docker to build a container based on a Rocker/Shiny image (which itself is a ubuntu image with R and Shiny installed) then copy into the container the power1_shiny.R code and finally launch Shiny on (default) port 3838. We placed the power1_app.R code in the default location /srv/shiny-server we only need to start the server and it will find the shiny program.\n\na Caddy web server configuration file (default name Caddyfile)\n\nWe’ll use Caddy as our web server. Caddy is an open-source tool that has the very useful feature of automating the acquiring and installing of an SSL certificate. An SSL cert is required by most browsers to use the encrypted communication protocol https.\nCaddy is configured with a file named Caddyfile. We use the caddy configuration file to specify three critical things.\n\nthe site domain name.\nthe ‘reverse proxy’ map that redirects requests to port 443 (ssl port) to port 3838 (Shiny port).\nadd login credentials for bob/vanilla47:\n\nOur barebones Caddyfile looks like this:\n\nShow the Caddyfile code\n# use caddy auth tool to generate a password via the `bcrypt` algorithm. \n# &gt; caddy hash-password --plaintext vanilla47 \nrgtlab.org {\n    basicauth * /power1_shiny/* {\n        bob $2a$14$pYWd5O7JqNeGLS4m4CKkzemM2pq5ezn9bcTDowofZTl5wRVl8NTJm\n    }\n    root * /srv\n    handle_path /power1_shiny/* {\n            reverse_proxy power1_shiny:3838\n    }\n    file_server\n}\n\n```sh\n# use caddy auth tool to generate a password via the `bcrypt` algorithm. \n&gt; caddy hash-password --plaintext vanilla47 \ncaddy hash-password \nrgtlab.org {\nbasicauth * /power1_shiny/* {\n        bob $2a$14$pYWd5O7JqNeGLS4m4CKkzemM2pq5ezn9bcTDowofZTl5wRVl8NTJm\n    }\n    root * /var/www/html\n    handle_path /power1_shiny/* {\n            reverse_proxy 0.0.0.0:3838\n    }\n    file_server\n}\n\n\nWe can accomplish what we need for items 4, 5, and 7 through the\nCaddyfile.\n\nNote:\n\n-   rgtlab.org is our domain name\n-   `handle_path` maps all https requests to port 3838 where Shiny is\n    listening.\n\nProviding our servers domain name, `rgtlab.org` is sufficient to\ninitiate an exchange with the `letsencrypt` service to generates an SSL certificate.\n\nAnd a third file is the docker compose file that containerizes our\nShiny app, pulls a caddy webserver image from Docker Hub and creates a\nlocal network for the two containers to communicate in.\n\n3.   a Docker-compose configuration file (default name\n    `docker-compose.yml`).\n\nThe docker-compose.yml file:\n\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"`docker-compose.yml`. Show the code\"}\nversion: \"3.7\"\n\nservices:\n  power1_shiny:\n    build: .\n    expose:\n    - \"3838\"\n  caddy:\n    image: caddy:2.3.0-alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - $PWD/site:/srv\n      - caddy_data:/data\nvolumes:\n    caddy_data:\nLastly, we need an html file, index.html that provides the landing page for our server.\n\nindex.html. Show the code\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Power1 app&lt;/h1&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a href=\"./power1_shiny/\"&gt;Power1 app&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/body&gt;\n&lt;/html&gt; \n\nAt this point our power1_app repo looks like this:\n.\n├── Caddyfile\n├── Dockerfile\n├── README.md\n├── docker-compose.yml\n├── power1_shiny\n│   └── app.R\n└── site\n    └── index.html"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#appendix-1",
    "href": "posts/dockerize_compose/index.html#appendix-1",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "Appendix-1",
    "text": "Appendix-1"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#app.r",
    "href": "posts/dockerize_compose/index.html#app.r",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "App.R",
    "text": "App.R\nConsider an app that is a balance of simple and functional – one that calculates the power for a 2-sample t-test as a function of the standardized effect size. re is our shiny app power1_shiny.R:\nConsider the power1.R file:\n\nui &lt;- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver &lt;- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot &lt;- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff &lt;- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\nThe app is designed to be maximally minimal. Using only base R functions, with a minimum of reactive widgets and layout commands to keep it simple while still performing a useful function."
  },
  {
    "objectID": "posts/dockerize_compose/index.html#bonus-add-basic-authentication",
    "href": "posts/dockerize_compose/index.html#bonus-add-basic-authentication",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "Bonus: Add basic authentication",
    "text": "Bonus: Add basic authentication\nadd login credentials for bob/vanilla47 to the Caddyfile:\n# use caddy auth tool to generate a password via the `bcrypt` algorithm. \n&gt; caddy hash-password --plaintext vanilla47 \ncaddy hash-password \nrgtlab.org {\nbasicauth * /power1_shiny/* {\n        bob $2a$14$pYWd5O7JqNeGLS4m4CKkzemM2pq5ezn9bcTDowofZTl5wRVl8NTJm\n    }\n    root * /var/www/html\n    handle_path /power1_shiny/* {\n            reverse_proxy 0.0.0.0:3838\n    }\n    file_server\n}"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#tip-1.-docker-on-m1-macbook.",
    "href": "posts/dockerize_compose/index.html#tip-1.-docker-on-m1-macbook.",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "Tip 1. Docker on M1 macbook.",
    "text": "Tip 1. Docker on M1 macbook.\nTo get docker functioning on M1 Mac desktop\ndocker build -t power1_shiny --platform linux/x86_64 .\ndocker run -d -p 80:3838 --platform linux/x86_64 power1_shiny"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#tip-2-add-user-to-docker-group-on-server.",
    "href": "posts/dockerize_compose/index.html#tip-2-add-user-to-docker-group-on-server.",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "Tip 2 add user to docker group on server.",
    "text": "Tip 2 add user to docker group on server.\nAdd ubuntu to the docker group to allow docker to run without sudo.\nsudo usermod -aG docker ${USER}"
  },
  {
    "objectID": "posts/dockerize_compose/index.html#tip-3-ssh-config-file.",
    "href": "posts/dockerize_compose/index.html#tip-3-ssh-config-file.",
    "title": "A straightforward strategy to get your Shiny app online, securely and continuously updated.",
    "section": "Tip 3 ssh config file.",
    "text": "Tip 3 ssh config file.\nFor convenience, construct a config file in ~/.ssh as:\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/Downloads/power1.rsa\nthen you can ssh into the new server with\nsh&gt; ssh rgtlab.org"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Focus on R blog",
    "section": "",
    "text": "Writing a simple R package in S3.\n\n\n\n\n\n\n\nAWS\n\n\n\n\nGetting started with S3 OO programming in R\n\n\n\n\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSet up a virtual server on AWS (in anticipation of hosting Shiny apps)\n\n\n\n\n\n\n\nAWS\n\n\n\n\nDetailed steps for setting up a lightweight server on AWS.\n\n\n\n\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up a minimal neovim environment for data science code development\n\n\nA neovim IDE for R, Python, and Julia\n\n\nThis is the first in a series of posts offering suggested strategies for setting up key tools for data science code development\n\n\n\n\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nA straightforward strategy to get your Shiny app online, securely and continuously updated.\n\n\nGithub, Docker-compose, EC2 version\n\n\n\n\nDocker\n\n\nShiny\n\n\ndocker-compose\n\n\n\n\nThis is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\n\n\n\n\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nA simple process to get your Shiny app online (securely).\n\n\n\n\n\n\n\nDocker\n\n\nShiny\n\n\n\n\nThis is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.\n\n\n\n\n\n\nMay 1, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nUsing the AWS command line interface to launch a EC2 server and docker compose\n\n\n\n\n\n\n\nAWS\n\n\n\n\nA single batch program to setup virtual server to host shiny app\n\n\n\n\n\n\nApr 18, 2023\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetup Ubuntu on parallels\n\n\n\n\n\n\n\nDocker\n\n\nShiny\n\n\n\n\nstep by step description to create vitual server and setting up optimal neovim config.\n\n\n\n\n\n\nSep 10, 2022\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\n  \n\n\n\n\nSetting up Quarto\n\n\n\n\n\n\n\n123\n\n\nSecond Tag\n\n\n\n\nThis is a second post.\n\n\n\n\n\n\nAug 31, 2022\n\n\nRonald (Ryy) Glenn Thomas\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Focused on new and interesting data science technologies."
  }
]