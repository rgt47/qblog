rm(list = ls())
#wh = which(search()=="package:nvimcom")
#if (wh >2) for (x in (wh-1):2) {detach(po = x, force=T)}
#rm(wh)
source("extra.R")
#options(knitr.kable.NA = '',dplyr.summarise.inform = FALSE, dplyr.print_max = 1e9)
library(pacman)
p_load(lme4, MASS, corpcor, data.table, lubridate, tidyverse, knitr,
cowplot, data.table, lme4, lmerTest, ggplot2, svMisc, tictoc, ggpubr, gridExtra)
source("~/shr/zz.tools.R")
#options(scipen = 1, digits = 2)

generateData<-function(modelparam,respparam,blparam,trialdesign,cc){
print( modelparam )
print( respparam )
print( blparam )
print( trialdesign )
#print( cc )
  d<-data.table(trialdesign)
  d$t_wk_cumulative<-cumulative(d$t_wk)
  d[,onDrug:=(tod>0)]
  nP<-dim(trialdesign)[1]
  cl<-c("tv","pb","br")
  labels<-c(c("bm","BL"),
            paste(trialdesign$timeptname,cl[1],sep="."),
            paste(trialdesign$timeptname,cl[2],sep="."),
            paste(trialdesign$timeptname,cl[3],sep="."))
  sds<-c(blparam[cat=="bm"]$sd,blparam[cat=="BL"]$sd)
  sds<-c(sds,rep(respparam[cat=="tv"]$sd,nP))
  sds<-c(sds,rep(respparam[cat=="pb"]$sd,nP)*trialdesign$e)
  sds<-c(sds,rep(respparam[cat=="br"]$sd,nP))
  means<-c(blparam[cat=="bm"]$m,blparam[cat=="BL"]$m)
  for (c in cl){
    rp<-respparam[cat==c]
    if(c=="tv"){
      means<-c(means,modgompertz(d$t_wk_cumulative,rp$max,rp$disp,rp$rate))
    }
    if(c=="pb"){
      means<-c(means,modgompertz(d$tpb,rp$max,rp$disp,rp$rate)*trialdesign$e)
    }
    if(c=="br"){
      brmeans<-modgompertz(d$tod,rp$max,rp$disp,rp$rate)
      brtest = brmeans == 0
      rawbrmeans = brmeans
      names(brtest)= labels[19:26]
      names(rawbrmeans)= labels[19:26]
      if(nP>1){
        for(p in 2:nP){
          if(!d[p]$onDrug){
            if(d[p]$tsd>0){
              brmeans[p]<-brmeans[p]+brmeans[p-1]*(1/2)^(d$tsd[p]/modelparam$carryover_t1half)
            }
          }
        }
      }
      means<-c(means,brmeans)
    }
  }
     c = "br"
     aa = data.frame(rawbrmeans, brmeans, diff = brmeans - rawbrmeans)
 cat("brmeans before and after adj:\n ") ;    print(aa)
    # for(p in 1:nP){
    #   n1<-paste(trialdesign$timeptname[p],"br",sep=".")
    #   if(means[which(n1==labels)]!=0){
    #     cc[n1,'bm']<-modelparam$c.bm
    #     cc['bm',n1]<-modelparam$c.bm
    #   }
    # }
     names(means)= labels
     co = modelparam$carryover_t1half
    for(p in 1:nP){
      nn1<-paste(trialdesign$timeptname[p],"br",sep=".")
      cc[nn1, 'bm'] = modelparam$c.bm
      if (p > 1){
      nn0<-paste(trialdesign$timeptname[p-1],"br",sep=".")
      #browser()
      mm1 = means[which(nn1==labels)]
      mm0 = means[which(nn0==labels)]
      # cc[n1, 'bm'] = ifelse(mm1==0, 0, means[which(n1==labels)]/means[which(nn1==labels)]*.6) }
cc[ 'bm', nn1]=cc[nn1, 'bm']= ifelse(brtest[p], ifelse(brmeans[p]==0, 0,(mm1/mm0)*modelparam$c.bm), modelparam$c.bm)
      }
    }
   cat("carryover: "); print(co)
  cat("br correlations: \n"); print(cc[19:26,1])
  sigma<-outer(sds,sds)*cc
    if(!is.positive.definite(sigma)){
      sigma<-make.positive.definite(sigma, tol=1e-3)
    }
seed = 4
  set.seed(seed)
  dat<-mvrnorm(n=modelparam$N,mu=means,Sigma=sigma,empirical=F)
  dat<-data.table(dat)
  setnames(dat,names(dat),labels)
  dat[,ptID:=1:modelparam$N]
  # for(p in 1:nP){
  #   n<-trialdesign$timeptname[p]
  #   evalstring<-paste(
  #     "dat[,D_",n,":=sum(",paste(paste(n,cl,sep='.',collapse=','),sep=','),"),by='ptID']",
  #     sep="")
  #   eval(parse(text=evalstring))
  # }
  for(p in 1:nP){
    n<-trialdesign$timeptname[p]
    evalstring<-paste(
      "dat[,",n,":=sum(BL,-",paste(paste(n,cl,sep='.',collapse=',-'),sep=','),"),by='ptID']",
      sep="")
    eval(parse(text=evalstring))
  }
  return(dat)
}

########## MAIN ###########
cp = readRDS("cp")
cp = cp[1:3,]
cp$carryover_t1half = c(0, .2, 1)
cp$c.bm = c(.5,.5,.5)
or = readRDS("or")
bl = readRDS("bl")
analysisparams=data.frame("useDE"=FALSE, "t_random_slope"=FALSE, "full_model_out"=FALSE)
  VPGmaster<-expand.grid(
    trialdesign=1:1,
    respparamset=1:length(or),
    blparamset=1:length(bl),
    modelparamset=1:dim(cp)[1]
  )
  nV<-dim(VPGmaster)[1]
  irep<-1
  Nreps = 10

    LLstarts<-1
    LLstops<-nV
    iLL = 1
    VPG<-VPGmaster[LLstarts[iLL]:LLstops[iLL],]

    out<-cbind(VPG[0,],data.table( irep=integer(),beta=numeric(),betaSE=numeric(),
                                  p=numeric()))
      td = readRDS("td")
    for(iR in 1:dim(VPG)[1]){
	    # cat("carryover = ",iR, "\n")
      pp<-list()
      pp$respparam<-or[[VPG[iR,"respparamset"]]]$param
      pp$blparam<-bl[[VPG[iR,"blparamset"]]]$param
      pp$modelparam<-cp[VPG[iR,"modelparamset"],]
      nP<-length(td)
      nP = 1
      Ns<-pp$modelparam$N%/%nP # How many in each path run?
      Ns<-Ns+c(rep(1,pp$modelparam$N%%nP),rep(0,nP-pp$modelparam$N%%nP)) # distribute the remainder
      NNs<-Ns*Nreps # here adjust so doing all with this paramset at once
      pp$modelparam$N<-NNs[[1]]

  cl<-c("tv","pb","br")
  labels<-c(c("bm","BL"),
            paste(td[[1]]$timeptname,cl[1],sep="."),
            paste(td[[1]]$timeptname,cl[2],sep="."),
            paste(td[[1]]$timeptname,cl[3],sep="."))

  cc<-diag(length(labels))
  rownames(cc)<-labels
  colnames(cc)<-labels

 nP = 8
  for(c in cl){
      ac<-pp$modelparam[(paste("c",c,sep="."))][,]
      for(p in 1:(nP-1)){
        for(p2 in (1+p):nP){
          n1<-paste(td[[1]]$timeptname[p],c,sep=".")
          n2<-paste(td[[1]]$timeptname[p2],c,sep=".")
        # cat(n1,n2,ac,"\n")
          cc[n1,n2]<-ac
        #cat(n2,n1,ac,"\n")
          # cc[n2,n1]<-ac
        }
      # cat("end p1 \n")
      }
    for(c2 in setdiff(cl,c)){
      for(p in 1:nP){
        n1<-paste(td[[1]]$timeptname[p],c,sep=".")
        n2<-paste(td[[1]]$timeptname[p],c2,sep=".")
        # cat(n1,n2,pp$modelparam$c.cf1t,"\n")
        cc[n1,n2]<-pp$modelparam$c.cf1t
        cc[n1,n2]<-pp$modelparam$c.cf1t
      }
      # cat("end p2 \n")
      for(p in 1:(nP-1)){
        for(p2 in (1+p):nP){
          n1<-paste(td[[1]]$timeptname[p],c,sep=".")
          n2<-paste(td[[1]]$timeptname[p2],c2,sep=".")
        # cat(n1,n2,pp$modelparam$c.cfct,"\n")
          cc[n1,n2]<-pp$modelparam$c.cfct
           #cat(n2,n1,pp$modelparam$c.cfct,"\n")
          cc[n2,n1]<-pp$modelparam$c.cfct
        }
      # cat("end p3 \n")
      }
    }
  }
#browser()
      dat<-generateData(pp$modelparam,pp$respparam,pp$blparam,td[[1]], cc)
      dat[,path:=1]
      dat[,replicate:=rep(1:Nreps,Ns[1])]

      pp$modelparam$N<-sum(Ns)
        for(iS in 1:Nreps){

          analysisout<-lme_analysis(td,dat[replicate==iS],analysisparams[1,])
          o<-cbind(VPG[iR,],as.data.table(pp$modelparam),
                   data.table(censorparamset=0,use_DE=analysisparams[1,]$useDE,t_random_slope=analysisparams[1,]$t_random_slope,
                              irep=((iR-1)*Nreps+iS),frac_NA=0,
                              beta=analysisout$beta,betaSE=analysisout$betaSE,
                              p=analysisout$p,issingular=analysisout$issingular,warning=analysisout$warning))
          out<-rbind(out,o)
        }
    } # end iR
      outpt<-list(results=as.data.table(out),
                  parameterselections=list(
                                           respparamsets=or,
                                           blparamsets=bl
                                            ))
      cat("ALL DONE2")
      test = outpt[[1]] %>% sel(carryover_t1half,p) %>% group_by(carryover_t1half) %>% summarize(power = mean(p < .05))
      print(test)
      # test should be:
# # A tibble: 5 Ã— 2
#   carryover_t1half power
#              <dbl> <dbl>
# 1              0     1
# 2              0.2   1
# 3              1     0.9
# 4              1.5   0.9
# 5              2     0.9

  saveRDS(outpt,paste("coreresults",iLL,sep="_save"))
