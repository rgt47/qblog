{"title":"Setting up a minimal neovim environment for data science code development","markdown":{"yaml":{"title":"Setting up a minimal neovim environment for data science code development","description":"This is the first in a series of posts offering suggested strategies for setting up key tools for data science code development","subtitle":"A neovim IDE for R, Python, and Julia","format":{"pdf":{"keep-tex":true,"toc":true}},"date":"last-modified"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\n```{r init, include=FALSE}\n\noptions(dplyr.print_max = 1e9)\nlibrary(pacman)\n\np_load(jpeg, rmarkdown, tidyverse,  broom,  tidyr,  purrr,readr,knitr, \n       dplyr,  lubridate, zoo,  ggplot2, printr, lsmeans, ggthemes,  knitr,\n       nlme, pwr)\n\nopts_chunk$set(warning = F, message = F, echo=F, fig.width=3.2,\n\t       fig.height=3,  results='asis', dev='pdf',\n\t       opts_chunk$set(cache.path = \"cache/\"))\nsource('~/shr/zz.tools.R')\noptions(scipen = 1, digits = 2)\n```\n::: column-margin\n![under construction](img/crane.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\n\n\nNeovim (a fork of Vim) is a text editor that has several advantages for data\nscience code development. One of the main attractions is that it is open source\nand has a number of useful plugins to facilitate working on R, python, and julia\ncode. Also, its modal, keyboard-centric system allows text and code manipulation\nat potentially far greater speed than conventional, mouse-centric, systems. \n\nIn this post we describe both a minimal, yet functional setup, as well as a more\nextensive setup utilizing several of the newest neovim-only plugins, for neovim to\nallow IDE style code editing and REPL interaction for the three primary data\nscience coding tools: R, Python, and Julia. \n\nOur presentation here is for a Macos environment. Appendix one contains\nrequired adjustments for a ubuntu linux environment.\n\n# Install the latest stable version of neovim.\n\nWith minimal effort we can install both the terminal and GUI versions of neovim. The simplist approach is to use homebrew: \n\n```sh\n> brew install neovim neovim-qt\n```\nSet up convenience aliases in `zsh`. \n\n```sh\n> alias ng = neovim-qt\n> alias nt = neovim\n```\n(mnemonic: the `t` in `nt` is for terminal, the `g` in `ng` is for GUI)\n\n# Configure neovim\n\nThe standard location for `neovim` configuration files on \"unix-like\" systems is\n`~/.config/nvim`.\nThe main config file is either init.vim (VimL) or init.lua (Lua). In this post\nwe'll focus on lua based configuration.\n\nSpecifically, the following code block creates an `nvim` subdirectory under\n`~/.config` and initialize a configuration file `init.lua`.\n\nHere is the file hierarchy we'll construct. In fact all\nthe code could be bundled into the `init.lua` file, but this approach is clearer\nand cleaner. \n\n```sh\n.\n|-- ginit.vim\n|-- init.lua\n|-- lazy-lock.json\n|-- lua\n|   |-- basics.lua\n|   |-- leap-config.lua\n|   |-- nvim-R-config.lua\n|   |-- nvim-cmp-config.lua\n|   |-- nvim-telescope-config.lua\n|   |-- nvim-tree-config.lua\n|   `-- treesitter-config.lua\n|-- my_snippets\n|   |-- all.snippets\n|   |-- giles.tex.snipppets\n|   |-- mail.snippets\n|   |-- r.snippets\n|   |-- rmd.snippets\n|   |-- snippets.snippets\n|   |-- tex.snippets\n|   |-- text.snippets\n|   `-- txt.snippets\n|-- spell\n|   |-- en.utf-8.add\n|   `-- en.utf-8.add.spl\n```\n\nTo install the `lazy` plugin manager\n```sh\ngit clone https://github.com/folke/lazy.nvim.git \\\n   ~/.local/share/nvim/lazy/lazy.nvim\n```\n\n\nAdd the following code to `init.lua` list the plugins needed to be installed\nfrom `github` and \"feed\" them to `Lazy` for installation. \n\nNvim-R, Leap, UltiSnips, and vimtex need additional configuration. The required\ncode is contained in bespoke files under the `lua` directory. \n\n```sh\n\n\nvim.g.mapleader = \" \"\nvim.g.maplocalleader = \",\"\nvim.opt.rtp:prepend(\"~/.local/share/nvim/lazy/lazy.nvim\")\nrequire('plugins')\n\nrequire('nvim-cmp-config')\nrequire'lspconfig'.lua_ls.setup{}\nrequire'lspconfig'.r_language_server.setup{}\n\nrequire('basics')\nrequire('nvim-tree-config')\nrequire('nvim-R-config')\nrequire('nvim-telescope-config')\nrequire('leap').add_default_mappings()\nrequire('leap-config')\n\nvim.api.nvim_create_autocmd('LspAttach', {\n  desc = 'LSP actions',\n  callback = function()\n    local bufmap = function(mode, lhs, rhs)\n      local opts = {buffer = true}\n      vim.keymap.set(mode, lhs, rhs, opts)\n    end\n    bufmap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<cr>')\n    bufmap('n', 'gl', '<cmd>lua vim.diagnostic.open_float()<cr>')\n    bufmap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<cr>')\n    bufmap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<cr>')\n  end\n})\n```\n\nList of plugins\n\n```sh\n\nrequire('lazy').setup({\n--\n--minimal data science setup\n--\n'jalvesaq/Nvim-R',\n'lervag/vimtex',\n'SirVer/ultisnips',\n'honza/vim-snippets',\n'jmbuhr/otter.nvim',\n'quarto-dev/quarto-nvim',\n'jalvesaq/vimcmdline',\n--\n--optional utilities\n--\n{ \"bluz71/vim-moonfly-colors\", name = \"moonfly\", lazy = false, priority = 1000 },\n'junegunn/vim-peekaboo',\n'preservim/nerdcommenter',\n'machakann/vim-highlightedyank',\n'kylechui/nvim-surround',\n--'junegunn/fzf',\n'ggandor/leap.nvim',\n--'rhysd/clever-f.vim',\n'junegunn/goyo.vim',\n'junegunn/limelight.vim',\n'junegunn/vim-easy-align',\n'voldikss/vim-floaterm',\n--\n--neovim specific\n--\n'nvim-lua/plenary.nvim',\n'nvim-tree/nvim-web-devicons',\n'nvim-tree/nvim-tree.lua',\n'nvim-telescope/telescope.nvim',\n'nvim-treesitter/nvim-treesitter',\n'neovim/nvim-lspconfig',\n'hrsh7th/nvim-cmp',\n'uga-rosa/cmp-dictionary',\n'tamago324/cmp-zsh',\n--'hrsh7th/cmp-nvim-lsp-signature-help',\n'hrsh7th/cmp-nvim-lsp',\n'hrsh7th/cmp-buffer',\n'hrsh7th/cmp-path',\n'hrsh7th/cmp-cmdline',\n'quangnguyen30192/cmp-nvim-ultisnips',\n'jalvesaq/cmp-nvim-r',\n'LuaLS/lua-language-server',\n})\n```\n\n# plugin discussions\n\n# cmp config\n```sh\n\nlocal kind_icons = {\n  Function = \"f\",\n  Snippet = \"s\",\n  Text = \"t\",\n}\n\nlocal cmp_ultisnips_mappings = require(\"cmp_nvim_ultisnips.mappings\")\nlocal cmp = require'cmp'\n--local lspkind = require('lspkind')\n\nlocal mappings = {\n  [\"<Tab>\"] = cmp.mapping(\n    function(fallback)\n      cmp_ultisnips_mappings.compose { \"select_next_item\" }(fallback)\n    end,\n    { \"i\", \"s\", --[[ \"c\" (to enable the mapping in command mode) ]] }\n  ),\n  [\"<S-Tab>\"] = cmp.mapping(\n    function(fallback)\n      cmp_ultisnips_mappings.compose { \"select_prev_item\" }(fallback)\n    end,\n    { \"i\", \"s\", --[[ \"c\" (to enable the mapping in command mode) ]] }\n  ),\n}\n\ncmp.setup({\nwindow = {\n    completion = cmp.config.window.bordered(),\n    documentation = cmp.config.window.bordered(),\n  },\nformatting = {\nformat = function(entry, vim_item)\n      vim_item.kind = string.format(\"%s %s\", kind_icons[vim_item.kind], vim_item.kind) --Concatonate the icons with name of the item-kind\n      vim_item.menu = ({\n        spell = \"[Spellings]\",\n        ultisnips = \"[Snip]\",\n        cmp_nvim_r = \"[R]\",\n      })[entry.source.name]\n      return vim_item\n    end,\n    },\n  snippet = {\n    expand = function(args)\n      vim.fn[\"UltiSnips#Anon\"](args.body) \n    end,\n  },\n\nsources = cmp.config.sources({\n    { name = \"nvim_lsp\" },\n    { name = 'cmp_nvim_r' },\n    { name = 'nvim_lua' },\n    { name = \"ultisnips\" },\n    { name = \"dictionary\", keyword_length=4, },\n    { name = \"buffer\", option = { get_bufnrs = function()\n      return vim.api.nvim_list_bufs()\n    end\n    }},\n    { name = \"path\" },\n    { name = \"calc\" }\n  }),\n  mapping = mappings,\n})\n\n  require('lspconfig')['r_language_server'].setup {\n    capabilities = capabilities\n  }\n\nrequire'cmp_nvim_r'.setup({\n  filetypes = {'r', 'rmd', 'quarto'},\n  doc_width = 58\n  })\n```\n\n\n# basics\n```sh\n\n\nlocal map = vim.keymap.set\nlocal opts = {noremap = true}\nvim.cmd([[\n\"    copy clipboard to register x for safe keeping\nnnoremap <leader>x :let @x=@*\n\"    paste registers into terminal\ntnoremap <expr> <C-R> '<C-\\><C-N>\"'.nr2char(getchar()).'pi'\nset background=dark\n\"colorscheme evening\ncolorscheme moonfly\nlet $FZF_DEFAULT_COMMAND = 'rg --files --hidden'\nset completeopt=menu,menuone,noinsert,noselect\nset number relativenumber\nset textwidth=80\nset cursorline\nset clipboard=unnamed\nset iskeyword-=_ \nset hlsearch   \nset splitright\nset hidden   \nset incsearch    \nset noswapfile\nset showmatch\nset ignorecase\nset smartcase\nset gdefault\nfiletype plugin on\nset encoding=utf-8\nset nobackup\nset nowritebackup\nset updatetime=300\nset signcolumn=yes\nset colorcolumn=80\nautocmd! User GoyoEnter Limelight\nautocmd! User GoyoLeave Limelight!\n\nset dictionary+=/usr/share/dict/words\nset thesaurus+=/Users/zenn/mthesaur.txt\n\nlet g:UltiSnipsSnippetDirectories=[\"UltiSnips\", \"my_snippets\"]\nlet g:UltiSnipsEditSplit=\"vertical\"\nlet g:UltiSnipsUsePythonVersion = 3\n\nautocmd FileType julia,python nnoremap <buffer> <C-CR>  :call VimCmdLineStartApp()<CR>\nautocmd FileType julia,python nnoremap <buffer> <CR>  :call VimCmdLineSendLine()<CR>\n]])\nmap('n', ':', ';', opts)\nmap('n', ';', ':', opts)\nmap('n', '<leader>u',':UltiSnipsEdit<cr>', opts)\nmap('n', '<Space><Space>','<C-d>', opts)\nmap('n', '-','$', opts)\nmap('n', '<leader>w','vipgq', opts)\nmap('n', '<leader>v',':edit ~/.config/nvim/init.lua<cr>', opts)\nmap('n', '<leader>n',':edit ~/.config/nvim/lua/basics.lua<cr>', opts)\nmap('n', '<leader>a','ggVG', opts)\nmap('n', '<leader>t',':tab split<cr>', opts)\nmap('n', '<leader>y',':vert sb3<cr>', opts)\nmap('n', '<leader>0',':ls!<CR>:b<Space>', opts)\nmap('n', '<localleader><localleader>','<C-w>w', opts)\nmap('n', '<leader>1','<C-w>:b1<cr>', opts)\nmap('n', '<leader>2','<C-w>:b2<cr>', opts)\nmap('n', '<leader>3','<C-w>:b3<cr>', opts)\nmap('n', '<leader>4','<C-w>:b4<cr>', opts)\nmap('n', '<leader>5','<C-w>:b5<cr>', opts)\nmap('n', '<leader>6','<C-w>:b6<cr>', opts)\nmap('n', '<leader>7','<C-w>:b7<cr>', opts)\nmap('n', '<leader>8','<C-w>:b8<cr>', opts)\nmap('n', '<leader>9','<C-w>:b9<cr>', opts)\nmap('t',  'ZZ', \"q('yes')<CR>\", opts)\nmap('t',  'ZQ', \"q('no')<CR>\", opts)\nmap('v',  '-', '$', opts)\nmap('t',  '<leader>0','<C-\\\\><C-n><C-w>:ls!<cr>:b<Space>', opts)\nmap('t',  '<Escape>','<C-\\\\><C-n>', opts)\nmap('t',  '<localeader><localleader>','<C-\\\\><C-n><C-w>w', opts)\nmap('i',  '<Esc>', '<Esc>`^', opts)\n\n\nvim.api.nvim_create_autocmd(\n    { \"BufRead\", \"BufNewFile\" },\n    { pattern = { \"*.txt\", \"*.md\"}, command = \"setlocal spell\" }\n)\n\n\n\n\n\n\n```\n\n# Set up R \n\n```sh\n\nvim.cmd([[\nlet R_auto_start = 2\nlet R_hl_term = 0\nlet R_clear_line = 1\nlet R_pdfviewer = \"zathura\" \nlet R_assign = 2\nlet R_latexcmd = ['xelatex']\naugroup rmarkdown\nautocmd!\nautocmd FileType rmd,r nnoremap <buffer> <CR>  :call SendLineToR(\"down\")<CR>\nautocmd FileType rmd,r nnoremap <buffer> <space>' :call RMakeRmd(\"default\")<cr>\nautocmd FileType rmd,r noremap <space>i :call RAction(\"dim\")<cr>\nautocmd FileType rmd,r noremap <space>h :call RAction(\"head\")<cr>\nautocmd FileType rmd,r noremap <space>p :call RAction(\"print\")<cr>\nautocmd FileType rmd,r noremap <space>q :call RAction(\"length\")<cr>\nautocmd FileType rmd,r noremap <space>n :call RAction(\"nvim.names\")<cr>\nautocmd FileType rmd,r vmap <buffer> <CR> <localleader>sd\nautocmd FileType rmd,r nmap <buffer> <space>j <localleader>gn\nautocmd FileType rmd,r nmap <buffer> <space>k <localleader>gN\nautocmd FileType rmd,r nmap <buffer> <space>l <localleader>cd\naugroup END\n]])\n\n```\n\n# Appendix Ubuntu tweaks\n"},"formats":{"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":true,"engine":"knitr"},"render":{"keep-tex":true,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","number-sections":true,"toc":true,"output-file":"index.pdf"},"language":{},"metadata":{"block-headings":true,"margin-left":"30mm","margin-right":"60mm","license":"CC BY","toc-title":"Table of contents","toc-location":"left","author":[{"name":"Ronald (Ryy) Glenn Thomas","url":"https://rgtlab.org","affiliation":"UCSD","affiliation-url":"https://ucsd.edu","orcid":"0000-0003-1686-4965"}],"citation":true,"comments":{"giscus":{"repo":"rgt47/qblog","repo-id":"R_kgDOH6TO7A","category":"Announcements","category-id":"DIC_kwDOH5G3U84CRUp9","mapping":"pathname","reactions-enabled":true,"loading":"lazy","input-position":"bottom","theme":"light"}},"title":"Setting up a minimal neovim environment for data science code development","description":"This is the first in a series of posts offering suggested strategies for setting up key tools for data science code development","subtitle":"A neovim IDE for R, Python, and Julia","date":"last-modified"},"extensions":{"book":{}}}}}