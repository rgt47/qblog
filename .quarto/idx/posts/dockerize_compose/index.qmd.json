{"title":"A  straightforward strategy to get your Shiny app online, securely and continuously updated.","markdown":{"yaml":{"title":"A  straightforward strategy to get your Shiny app online, securely and continuously updated. ","description":"This is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.","subtitle":"gitlab, Docker-compose, EC2 version","categories":["Docker","Shiny","docker-compose"],"image":"img/rshiny.png","date":"last-modified"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n```{r init, include=FALSE}\n\n\noptions(dplyr.print_max = 1e9)\nlibrary(pacman)\n\np_load(jpeg, rmarkdown, tidyverse,  broom,  tidyr,  purrr,readr,knitr, \n       dplyr,  lubridate, zoo,  ggplot2, printr, lsmeans, ggthemes,  knitr,\n       nlme, pwr)\n\nopts_chunk$set(warning = F, message = F, echo=F, fig.width=3.2,\n\t       fig.height=3,  results='asis', dev='pdf',\n\t       opts_chunk$set(cache.path = \"cache/\"))\nsource('~/shr/zz.tools.R')\noptions(scipen = 1, digits = 2)\n```\n::: column-margin\n![under construction](img/crane.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\nThis is the first in a series of posts offering suggested strategies for\nleveraging open source technologies to provide straight-forward solutions to one\nof the central challenges in the practice of data science, i.e. how to\neffectively communicate analysis results to clients and collaborators. The\nstrategy is based on a set of open source tools.  The list of  technologies\n(software stack) we suggest for employment is: linux, R, Shiny, Docker,\ndocker-compose, Git, and Caddy. In this post we'll make use of two cloud\nservices: Gitlab and Amazon Web Service (AWS). Further posts will describe\nalternate services, e.g. using the low cost cloud service: Hetzner.\n\nAlso described in other posts, even more straightforward strategies that avoid\nGitlab and docker-compose. These alternative  approaches provides a simpler\ninitial construction, but a more labor intensive updating process.  \n \n\nThis initial post provides a minimal, proof-of-concept example of how to\napply these technologies for hosting an interactive Shiny application.\n\nIn the following we start with a very simple, but hopefully still useful,\nstand-alone Shiny app developed on our local workstation.   Then after some\nstraightforward interfacing with the AWS environment, we  push\nthe Shiny app into the cloud, and end up with a secure (encrypted and\nauthenticated) app running on a website with a custom domain name. \n\n# Methods\n\nStart by creating a repository (repo) for the project. The best way to do this\nis to initiate the repo on gitlab and then `clone` it to your local workstation.\nIn other words, log into gitlab and create a new empty repo, call it `power1_app`;\nthen on your local workstation navigate to your Shiny development directory, say\n`~/prj`, and  clone the `power1_app` repo from gitlab:\n\n\n\n::: {.callout-note collapse=\"true\"}\n## Details for creating a gitlab repo follow: \n\n-   login to `gitlab` (screenshot)\n\n-   click on `New project`. Then in `repository name` field enter `power1_app`.\n-   make the repo private, we only want to share with our collaborator at this point).\n-   leave `deployment target` empty. \n-   create the repo. Click `Create project` blue button at the bottom of\n    the page.\n-   on your laptop cd to development repo, say ~/prj and  clone the gitlab repo:\n``` sh\ngit clone https://gitlab.com/rgt47/power1_app.git\ncd power1_app\ngit clone https://gitlab.com/rgt47/images.git\n\n```\n:::\n\n::: column-margin\n![](img/gitlab1.png)\n:::\n\nWhile in gitlab you should also create a second, public repo, call it images.\nWe'll use this repo to store screenshots of the app. \nAfter cloning the repo to ~/prj/power1_app cd into the directory and create two\nnew sub-directories, `power1_shiny` and `site`. These directories will house our\nshiny app and our web site landing page, respectively. \n\nLets jump ahead to the point where you've  just finished developing a new Shiny\napp named `app.R`, in the `power1_shiny` directory. (The methods described here\napply generically to any Shiny app, but we'll use one of our own for\nillustration). See the `R/Shiny` code for our `power1_shiny` app (`app.R`). \n\n\nConsider an app that is a balance of simple and functional -- one that\ncalculates the power for a 2-sample t-test as a function of the\nstandardized effect size. \n\nThe app is minimal. Using only base R\nfunctions, with a minimum of reactive widgets and layout commands to\nkeep it simple while still performing a useful function.\n\nThe code is here: \n\n```{r echo=t, eval=FALSE}\n#| code-fold: true\n#| code-summary: \"show the `power1_shiny/app.R` code\"\nui <- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver <- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot <- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff <- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\n```\n\n\n\n\nWe can test the app locally in our \ndevelopment directory, `power1_app`, by runnning it with the following command.\n\n``` sh\nR -e \"library(shiny); runApp('power1_shiny/app.R', launch=T)\"\n```\n\nThis command will  run the R\nprogram, load the Shiny package, and launch the app in your default browser.\n\nFigure 1  shows the Shiny app running locally in a browser, it consists of a widget to select the sample size and provide a dynamic\nvisualization (2D plot) of the power as a function of the standardized\neffect size:\n\n::: column-margin\n![*Shiny app*](img/shinyapppower1.png)\n:::\n\nAfter we determine our app is working as designed, the next step is to set up a\nsecure hosting environment on a virtual server. Once the app is hosted we\nsimply need to send a link and security credentials to  our collaborators for\nthem to have secure access to the Shiny app. \n\nThere are many ways to accomplish the hosting. Here we'll describe a\nstraightforward and efficient approach using mainstream cloud services and open\nsource tools. In other words, in the following we'll describe how to 'spin' up a\nvirtual server on Amazon Web Service EC2 and in just a few steps, through the\napplication of Docker, R, Shiny, and Caddy we'll have a fully functioning secure\nweb app to share with our colleagues.\n\n## Hosting\n\n::: column-margin\n![*Data flow *](img/compose_flow.png)\n:::\n\nFigure 2 illustrates the tools we'll use and the flow of program and\nconfiguration files. In order to host `power1` online we'll need to complete the\nfollowing tasks:\n\n1.  create a virtual server (connected via ssh) with a firewall\n2. obtain a static IP address (to identify the server online)\n3.  obtain a domain name (name for IP address)\n4.  install and configure a webserver (tool to interact with https protocol requests and\n    respond)\n5.  obtain and install an SSL certificate (to allow encrypted communication)\n6.  setup an authentication method (password protection)\n7.  configure a reverse proxy method (translate https, port 443, requests to Shiny, port 3838)\n\nAt first glance these 7 requirements can appear daunting, but on closer\ninspection all can be met with relative ease and minimal  cost ( using a\ncloud-hosting service, e.g. Amazon's EC2 or Digital Ocean, and a\n\"leased\" domain name from, e.g. GoDaddy, or Amazon's Route 53)\nor no cost( if you have your own  server with IP address, and domain name)\n\n## Select a hosting service \n\nThere are a number of cloud based server options: Microsoft Azure,\nOracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each\nhas their own approach to setting up a custom virtual server. Several\nhave free or low-cost service tiers available.\n\nAn overview of the process with EC2  follows. Detailed instructions for AWS EC2\nare covered in an earlier post [here](https://focusonr.org/posts/setupaws/).\n\n0. Create an account or sign in. \n1. Set up an interactive environment with AWS server.\n    a. define ssh key-pair.\n    b. configure firewall.\n    c. request static IP.\n    d. obtain domain name. \n    e. select an instance and launch server. \n\nOnce the server is available connect via ssh, and login, \n\nThe only\nnecessary software to install is docker and git. Install\n both with the following commands:\n\n``` sh\nsudo apt install -y git\nsudo snap install docker.io\n```\n\nOnce the host is set up and the requisite software installed we'll have\na customized virtual server wtih a static IP address, and a unique domain\nname and firewall in place. In other words, items 1, 2, and 3 from our\n`hosting` list above will be taken care of.\n\n\n## Website\n\nTo configure the web server and containerize our app we need to add\nthree files to the repo, to go along with our Shiny app.\n\nWe'll use a slightly indirect route to create and place the necessary files on\nthe server but this approach will allow to do all our countinuing development on\nour local workstation and have the web app be automatically continually undated.\nWe'll create the configuration files we need  on our workstation and push them \ngitlab and from there they can be accessed from our server.\n\nThese three configuation files are:\n\n# Docker\n\n1.   a Docker configuration file (default name `Dockerfile`)\n\n::: column-margin\n![](img/docker1.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@carrier_lost?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Ian\nTaylor</a> on\n<a href=\"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\nWe'll use docker to access  R/Shiny, and docker-compose to access Caddy, our webserver. The\nfirst file is the dockerfile. Here is our minimal dockerfile:\n\n```{r echo=t, eval=FALSE}\n#| code-fold: true\n#| code-summary: \"show the `Dockerfile` code\"\nFROM rocker/shiny:4.2.0\nRUN rm -rf /srv/shiny-server\nCOPY /power1_shiny/* /srv/shiny-server/\nUSER shiny\nCMD [\"/usr/bin/shiny-server\"]\n```\n \n[Note: We placed the `power1_shiny/app.R` code in the default location\n`/srv/shiny-server` so we only need to start the Shiny server and it will find\nthe shiny program]{.aside}\n\n\nThis configuration file instructs Docker\nto build a container based on a Rocker/Shiny image (which itself is a ubuntu\nimage with R and Shiny installed) then copy into the container the `power1_shiny.R` code and\nfinally launch Shiny on (default) port 3838. We placed the app.R code in the\ndefault location `/srv/shiny-server` we only need to start the server and it\nwill find the shiny program. \n\nThen build and push the image to the `gitlab` container registry. \n\n```sh\ndocker build -t registry.gitlab.com/rgt47/power1_app/power1_image:v1.0 \\\n  \t\t--platform linux/x86_64 .\ndocker push registry.gitlab.com/rgt47/power1_app/power1_image:v1.0\n```\n\n\n2.   a Caddy web server configuration file (default name `Caddyfile`)\n\n We'll use `Caddy` as our web server. Caddy is an\nopen-source tool that has the very useful feature of automating the\nacquisition and installing of an SSL certificate. An SSL cert is required\nby most browsers to use the encrypted communication protocol https.\n\nWe use the caddy\nconfiguration file to specify three critical things.\n\n1.  the site domain name.\n2.  the 'reverse proxy' map that redirects requests to port 443 (ssl\n    port) to port 3838 (Shiny port).\n3. add login credentials for all users (e.g. bob/vanilla47):\n\n# Caddy\n\nOur barebones `Caddyfile` looks like this:\n\n```{r echo=T, eval=F}\n#| code-fold: true\n#| code-summary: \"Show the `Caddyfile` code\"\n# use caddy auth tool to generate a password via the `bcrypt` algorithm. \n# > caddy hash-password --plaintext hiccup \n\nrgtlab.org {\nbasicauth /power1/* {\n\tBob $2a$14$Zkx19XLiW6VYouLHR5NmfOFU0z2GTNmpkT/5qqR7hx4IjWJPDhjvG\n}\n\troot * /srv\n\thandle_path /power1/* {\n\t\treverse_proxy power1:3838\n\t}\n\tfile_server\n}\n\n```\n\nWe can accomplish what we need for items 4, 5, and 7 through the\nCaddyfile.\n\nNote:\n\n-   rgtlab.org is our domain name\n-   `handle_path` maps all https requests to port 3838 where Shiny is\n    listening.\n\nProviding our servers domain name, `rgtlab.org` is sufficient to\ninitiate an exchange with the `letsencrypt` service to generates an SSL certificate.\n\nAnd a third file is a config file for Docker Compose. Docker Compose is a Docker\nmodule that provides a framework for running multi-container applications. This\ndocker compose YAML file instructs Docker to containerize our Shiny app, pull a caddy\nwebserver image from Docker Hub and create a local network for the two\ncontainers to communicate in.\n\n3.   a Docker-compose configuration file (default name\n    `docker-compose.yml`).\n\nThe docker-compose.yml file:\n\n```{r echo=T, eval=F}\n#| code-fold: true\n#| code-summary: \"`docker-compose.yml`. Show the code\"\nversion: \"3.7\"\n\nservices:\n  power1:\n    image: registry.gitlab.com/rgt47/power1_app/power1_image:v1.0\n    restart: unless-stopped\n    expose:\n      - \"3838\"\n  caddy:\n    image: caddy:2.6.4-alpine\n    restart: always\n    ports:\n      - \"443:443\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - $PWD/site:/srv\n      - caddy_data:/data\n      - caddy_config:/config\n    depends_on:\n      - power1\n    environment:\n      - HOST=\"rgtlab.org\"\n      - EMAIL=\"rgthomas@ucsd.edu\"\nvolumes:\n  caddy_data:\n  caddy_config:\n\n\n```\n# Landing Page\n\nLastly, we need   an html  file, `index.html` in a subdirectory named `site`\nthat provides the landing page for our server.\n\n```{r echo=T, eval=F}\n#| code-fold: true\n#| code-summary: \"`index.html`. Show the code\"\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Power Calculators</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/bulma@0.9.0/css/bulma.min.css\" />\n  </head>\n  <body>\n    <div id=\"app\">\n      <section class=\"hero is-small\">\n        <div class=\"hero-body\">\n          <div class=\"container has-text-centered\">\n            <h1 class=\"title\">RGT Lab Power Calculators</h1>\n          </div>\n        </div>\n      </section>\n            <hr>\n\n            <div class=\"columns\">\n              <div class=\"column is-4 is-offset-1\">\n      <img src=\"https://github.com/rgt47/power0/blob/master/power1.png?raw=true\"\n       \twidth=\"200\" height=\"250\"  ”float: left; padding: 3px 3px 0px 3px;” >\n              </div>\n              <div class=\"column is-6\">\n                <h1 class=\"title\"> Power1 App </h1>\n                <p> Power for two-sample t-test </p>\n                <br>\n                <a href=\"./power1/\" class=\"button is-info\">Go to app</a>\n              </div>\n            </div>\n\n\n    </div>\n  </body>\n</html>\n\n```\n\nAt this point our `power1_app` repo looks like this: \n```text\n.\n├── Caddyfile\n├── Dockerfile\n├── docker-compose.yml\n└── site\n    └── index.html\n```\n\n# gitlab\n\nPush the new content to gitlab. \n\n``` sh\ngit push\n```\n\nNext login to the virtual server and clone the repo from gitlab.\n\n``` sh\nssh rgtlab.org\ngit clone https://gitlab.com/rgt47/power1_app.git\n```\n\nLastly, cd into `power1_app` directory and run\n\n``` sh\ndocker compose up -d\n```\n\nand you're good to go! The power1_shiny app is available at\n\n``` sh\nhttps://rgtlab.org/\n```\n\n# Appendices \n\n\n\n## Tip 1. Docker on M1 macbook. \nTo get docker functioning properly with `rocker` images on M1 Mac desktop \nuse `--platform` option. \n\n``` sh\ndocker build -t power1_shiny --platform linux/x86_64 .\ndocker run -d -p 80:3838 --platform linux/x86_64 power1_shiny\n\n```\n\n## Tip 2  add user to docker group on server. \nAdd ubuntu to the docker group \nto allow docker to run without sudo.\n\n``` sh\nsudo usermod -aG docker ${USER}\n```\n\n## Tip 3 ssh config file. \nFor convenience, construct a `config` file in `~/.ssh` as:\n\n``` sh\n\n\n\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\n```\n\nthen you can ssh into the new server with\n\n``` sh\nsh> ssh rgtlab.org \n```\n\n\n# References\n* [Focus on R: a new qblog - Set up a virtual server on AWS (in anticipation of hosting Shiny apps)](https://focusonr.org/posts/server_setup_aws_console/)\n* [Focus on R: a new qblog - Set up a virtual server on AWS with AWS CLI ](https://focusonr.org/posts/server_setup_aws_cli/)\n* [Shiny Apps with Docker Compose, Part 1: Development](https://hosting.analythium.io/shiny-apps-with-docker-compose-part-1-development/)\n* [Shiny Apps with Docker Compose, Part 2: Production](https://hosting.analythium.io/shiny-apps-with-docker-compose-part-2-production/)\n\n# APPENDIX\n\n``` sh\n\n> cd /Users/zenn/Dropbox/prj/c060\n> aws_create_keypair.sh power1_app\n> aws_create_security_group.sh -s power1_app -h on -k on -i on -j on\n> security_grp=\"sg-0679282d70f727f1e\"\n> echo $security_grp\nIf we need a new IP address:\n> static_ip=`aws ec2 allocate-address | jq -r '.PublicIp'`\n> echo $static_ip\n> aws_create_instance.sh -p power1_app\ninstance_id=\"i-0ecb046262ab6efca\"\n aws ec2 associate-address --instance-id $instance_id --public-ip $static_ip\n\nassociate IP with domain name in Route 53\nchange the IP address in ~/.ssh/config\n\nscp -i \"~/.ssh/power1_app.pem\" .zshrc ubuntu@rgtlab.org:~\nscp -i \"~/.ssh/power1_app.pem\" .vimrc ubuntu@rgtlab.org:~\n\n> ssh rgtlab.org\n\nCheck the log of your user data script in:\n    /var/log/cloud-init-output.log\n\ngit clone https://gitlab.com/rgt47/power1_app.git\ngit clone https://gitlab.com/rgt47/images.git\n\n docker run -d \\\n    --name=hello \\\n    --restart=always \\\n    -p 9000:3838 \\\n    registry.gitlab.com/analythium/shinyproxy-hello/hello:latest\n\n\n docker run -d \\\n    --name=power1 \\\n    --restart=always \\\n    -p 9001:3838 \\\n    registry.gitlab.com/rgt47/power1_app/power1_image:v1.0\n\nhttp://rgtlab.org:9001/\ndisplays power1_shiny app \n\ngit clone https://github.com/analythium/docker-compose-shiny-example.git\ncd docker-compose-shiny-example.git\n\nedit the docker-compose-prod.yml file to include domain name and email\n\ndocker compose \\\n  -f docker-compose.yml \\\n  -f docker-compose-prod.yml \\\n  up -d\n\nchange docker-compose.yml to point at gitlab repo rgt47/power1_app for 'hello' app\n\nworks.\n\nnow cp  docker-compose-shiny-example.git\nto 'master' and begin to transform 'master' into 'power1_app'\nkeep logging info\n\nto rebuild all the containers in the docker-compose.yml file:\n\ndocker compose up --build -d \n\nremove all containers and images \n\ndocker system prune -a\n\nif changes are made to shiny app on m1 mac. stop the compose network, pull updated container and restart.\n\ncd power1_shiny\nvim app.R\ncd ~/Dropbox/prj/c060/docker_simple_power1_app\ndocker build -t registry.gitlab.com/rgt47/power1_app/power1_image:v1.0 --platform linux/x86_64 .\ndocker push registry.gitlab.com/rgt47/power1_app/power1_image:v1.0\n\ndocker compose stop\ndocker compose rm -f\ndocker compose pull   \ndocker compose up -d\n\n\n~/master-repo (main ✘)✖✹ ᐅ cat Caddyfile\nrgtlab.org {\nbasicauth /power1/* {\n\tBob $2a$14$Zkx19XLiW6VYouLHR5NmfOFU0z2GTNmpkT/5qqR7hx4IjWJPDhjvG\n}\n\n\troot * /srv\n\thandle_path /power1/* {\n\t\treverse_proxy power1:3838\n\t}\n\tfile_server\n}\n\n\nversion: \"3.7\"\n\nservices:\n  power1:\n    image: registry.gitlab.com/rgt47/power1_app/power1_image:v1.0\n    restart: unless-stopped\n    expose:\n      - \"3838\"\n  caddy:\n    image: caddy:2.6.4-alpine\n    restart: always\n    ports:\n      - \"443:443\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - $PWD/site:/srv\n      - caddy_data:/data\n      - caddy_config:/config\n    depends_on:\n      - power1\n    environment:\n      - HOST=\"rgtlab.org\"\n      - EMAIL=\"rgthomas@ucsd.edu\"\nvolumes:\n  caddy_data:\n  caddy_config:\n\n~/master-repo (main ✘)✖✹ ᐅ cat site/index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Power Calculators</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/bulma@0.9.0/css/bulma.min.css\" />\n  </head>\n  <body>\n    <div id=\"app\">\n      <section class=\"hero is-small\">\n        <div class=\"hero-body\">\n          <div class=\"container has-text-centered\">\n            <h1 class=\"title\">RGT Lab Power Calculators</h1>\n          </div>\n        </div>\n      </section>\n            <hr>\n\n            <div class=\"columns\">\n              <div class=\"column is-4 is-offset-1\">\n      <img src=\"https://github.com/rgt47/power0/blob/master/power1.png?raw=true\"\n       \twidth=\"200\" height=\"250\"  ”float: left; padding: 3px 3px 0px 3px;” >\n              </div>\n              <div class=\"column is-6\">\n                <h1 class=\"title\"> Power1 App </h1>\n                <p> Power for two-sample t-test </p>\n                <br>\n                <a href=\"./power1/\" class=\"button is-info\">Go to app</a>\n              </div>\n            </div>\n\n\n    </div>\n  </body>\n</html>\n\n\n\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":true,"css":["../../styles.css"],"toc":true,"html-math-method":"katex","include-in-header":{"file":"../../header.html"},"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.313","theme":"tango","license":"CC BY","toc-title":"Table of contents","toc-location":"left","author":[{"name":"Ronald (Ryy) Glenn Thomas","url":"https://rgtlab.org","affiliation":"UCSD","affiliation-url":"https://ucsd.edu","orcid":"0000-0003-1686-4965"}],"citation":true,"comments":{"giscus":{"repo":"rgt47/qblog","repo-id":"R_kgDOH6TO7A","category":"Announcements","category-id":"DIC_kwDOH5G3U84CRUp9","mapping":"pathname","reactions-enabled":true,"loading":"lazy","input-position":"bottom","theme":"light"}},"title":"A  straightforward strategy to get your Shiny app online, securely and continuously updated. ","description":"This is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.","subtitle":"gitlab, Docker-compose, EC2 version","categories":["Docker","Shiny","docker-compose"],"image":"img/rshiny.png","date":"last-modified"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","number-sections":true,"toc":true,"output-file":"index.pdf"},"language":{},"metadata":{"block-headings":true,"margin-left":"30mm","margin-right":"60mm","license":"CC BY","toc-title":"Table of contents","toc-location":"left","author":[{"name":"Ronald (Ryy) Glenn Thomas","url":"https://rgtlab.org","affiliation":"UCSD","affiliation-url":"https://ucsd.edu","orcid":"0000-0003-1686-4965"}],"citation":true,"comments":{"giscus":{"repo":"rgt47/qblog","repo-id":"R_kgDOH6TO7A","category":"Announcements","category-id":"DIC_kwDOH5G3U84CRUp9","mapping":"pathname","reactions-enabled":true,"loading":"lazy","input-position":"bottom","theme":"light"}},"title":"A  straightforward strategy to get your Shiny app online, securely and continuously updated. ","description":"This is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis apps and reports online.","subtitle":"gitlab, Docker-compose, EC2 version","categories":["Docker","Shiny","docker-compose"],"image":"img/rshiny.png","date":"last-modified"},"extensions":{"book":{}}}}}