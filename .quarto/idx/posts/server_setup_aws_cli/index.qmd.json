{"title":"Using the AWS command line interface to launch an EC2 server","markdown":{"yaml":{"title":"Using the AWS command line interface to launch an EC2 server","description":"A single batch program to setup virtual server to host shiny app","categories":["AWS"],"image":"img/rshiny.png","format":{"pdf":{"toc":true}},"date":"last-modified"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n```{r init, include=FALSE}\n\n\n```\n::: column-margin\n![under construction](img/crane.jpg)\n<font size=\"1\"> Photo by\n<a href=\"https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Nathan\nWaters</a> on\n<a href=\"https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n</font>\n:::\n\n\nIn a separate post ([here](https://focusonr.org/posts/setupaws/)) we discuss\nsetting up a virtual server on Amazon Web Services (AWS) using the interactive\nElastic cloud Compute (EC2) dashboard. While its instructive to use the EC2\nconsole interface to set up a work environment and launch a custom server, it\ncan become a tedious process after the first two or three times. In this post\nwe'll present  bash shell scripts to perform the same task making use of the AWS\ncommand line interface (CLI). \n\nTo get started:  on your workstation,  configure the aws cli app via the command. \n\n```sh\nzsh> brew install awscli\n```\n\n\nInstructions for installing the AWS CLI can be found\n([here](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html/)).\n\n```sh\nzsh>  aws configure \n```\n\nThe app will open a dialog asking for your IAM credentials. If you don't have an\nIAM ID \nAppendix 1 [here](#appendix-1) has details on obtaining IAM credentials from your AWS account. \n\n# Scripts\n\nNine parameters are required. Determine them and store as environment variables.\n\n\n```sh\n# vpc_id and subnet_id are determined by user location\n\t\texport vpc_id=\"vpc-14814b73\"\n\t\texport subnet_id=\"subnet-f02c90ab\"\n# ami_id, storage_size and instance_type define the OS and capability of the server\n\t\texport ami_id=\"ami-014d05e6b24240371\"\n\t\texport instance_type=\"t2.micro\"\n\t\texport storage_size=\"30\"\n# key_name and security group identify the ssh and encrypted web channels\n\t\texport key_name=\"aws_key\"\n\t\texport security_grp=\"sg-0fef542d93849669c\"\n# static_ip and domain_name identify the server on the web\n\t\texport static_ip=\"13.57.139.31\"\n```\n\nBelow we offer four bash scripts. \n\n1) The first generates a security group for the\nvirtual server, i.e. a firewall. \n\n2) The second creates a key pair to allow\nencrypted ssh communication between the server and your workstation. \n\n3) The third\nscript generates the virtual server taking instance characteristics, firewall,\nstatic IP and domain name as parameters.  \n\n4) The fourth script installs required\nsoftware following server launch. \n\n## Create security group script\n\n```sh\n#!/usr/bin/env bash\n# The script generates a new security group \n# the group name is \"max_restrict\"\n# only ports 22 and 443 are open. \n# to open other ports replicate the last paragraph and change the port number. \n# Will fail if group name \"max_restrict\" in already in use. \n# reads vpc_id from the environment variables set in .zshrc\n#\naws ec2 create-security-group \\\n    --group-name max_restrict \\\n    --description \"most restrictive: ports 22 and 443 only\" \\\n    --tag-specifications \\\n    'ResourceType=security-group,Tags=[{Key=Name,Value=max_restrict}]' \\\n    --vpc-id $vpc_id \nwait    \nexport security_grp=`aws ec2 describe-security-groups | \\\njq -r '.SecurityGroups[] | select(.GroupName==\"max_restrict\").GroupId'`\n\naws ec2 authorize-security-group-ingress \\\n    --group-id $security_grp \\\n    --protocol tcp \\\n    --port 22 \\\n    --cidr \"0.0.0.0/0\" \n\n\naws ec2 authorize-security-group-ingress \\\n    --group-id $security_grp \\\n    --protocol tcp \\\n    --port 443 \\\n    --cidr \"0.0.0.0/0\" \n\n\n```\n\n## Create new key pair with a project name flag\n\n```sh\n\n\n#!/usr/bin/env bash\nbase=`basename $PWD`\nif [ -z \"$1\" ]\nthen\n  key_pair_name=$base\nelse\n  key_pair_name=\"$1\"\nfi\n\necho \"key_pair_name is $key_pair_name\"\n\nread -p \"Continue (y/n)?\" CONT\nif [ \"$CONT\" = \"y\" ]; then\n  echo \"Here we go!\";\nelse\n  echo \"too bad. bye.\"; exit; \nfi\n\ncd ~/.ssh \nrm -f  ~/.ssh/$key_pair_name.pem\naws ec2 create-key-pair  --key-name  $key_pair_name \\\n   --query 'KeyMaterial' --output text > ~/.ssh/$key_pair_name.pem\n\nwait\nchmod 600 ~/.ssh/$key_pair_name.pem\n\n```\n\n\n## Generate instance\n\nstart up script. \n`aws_create_instance.sh`\n```sh\n\n\n#!/usr/bin/env bash\nwhile getopts s:t:k:p: flag\ndo\n    case \"${flag}\" in\n        s) size=${OPTARG};;\n        t) type=${OPTARG};;\n        k) key_name=${OPTARG};;\n        p) proj_name=${OPTARG};;\n    esac\ndone\nbase=`basename $PWD`\nif [ -z \"$proj_name\" ]\nthen\n  proj_name=$base\nfi\n\n\n\nif [ -z \"$type\" ]\nthen\n type=\"t2.micro\" \nfi\n\nif [ -z \"$size\" ]\nthen\n  size=30\nfi\n\necho \"Review parameters: \"\necho \"---\"\necho \"proj_name is $proj_name\"\necho \"key_name is $key_name\"\necho \"vpc_id: $vpc_id\";\necho \"subnet_id: $subnet_id\";\necho \"ami_id: $ami_id\";\necho \"security_grp: $security_grp\";\necho \"static_ip: $static_ip\";\necho \"type: $type\";\necho \"size: $size\";\n\nread -p \"Review Notes (y/n)?\" NOTES\nif [ \"$NOTES\" = \"y\" ]; then\necho \"Notes on currect parameters:\"\necho \"security group should be in place already. check on EC2. \nIf not, run ./awscli_create_security.sh. \nKey pair should be in place. check in ~/.ssh. \nIf not run ./create_keypair.sh. \nami id is for ubuntu linux 22.04 LTS. \nIf not what is desired check EC2 list of instances. \";\nelse\n  echo \"I guess you know what you're doing\"; \nfi\n\nread -p \"Continue (y/n)?\" CONT\nif [ \"$CONT\" = \"y\" ]; then\n  echo \"Here we go!\";\nelse\n  echo \"too bad. bye.\"; exit; \nfi\n\n\n\naws ec2 run-instances \\\n    --image-id $ami_id \\\n    --count 1 \\\n    --instance-type $type \\\n    --key-name $key_name \\\n    --security-group-ids $security_grp \\\n    --subnet-id $subnet_id \\\n    --block-device-mappings \"[{\\\"DeviceName\\\":\\\"/dev/sda1\\\",\\\"Ebs\\\":{\\\"VolumeSize\\\":$size}}]\" \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$proj_name}]\"  \\\n    --user-data file://~/Dropbox/prj/c060/aws_startup_code.sh\nwait\niid=`aws ec2 describe-instances --filters \"Name=tag:Name,Values=$proj_name\" | \\\n\tjq -r '.Reservations[].Instances[].InstanceId'`\naws ec2 wait instance-running --instance-ids $iid\necho \"the generated instance has ID: $iid\"\nrunning=`aws ec2 describe-instance-status --instance-id $iid\necho \"the instance status is $running\"\naws ec2 associate-address --public-ip $static_ip --instance-id $iid`\n\n\n```\n\n`aws_startup.sh`\n\n```sh\n\n#!/bin/bash\nsudo apt update\nsudo apt install docker.io -y\nsudo apt install -y curl debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | \\\nsudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | \\\nsudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy -y\n```\n\n::: {.callout-tip}\n\n## Tip 1.\n\nFor convenience, construct a `config` file in `~/.ssh` as:\n\n``` sh\nHost rgtlab.org\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/power1_app.pem\n```\n\nthen we can ssh into the new server with\n\n``` sh\nsh> ssh rgtlab.org\n```\n:::\n\nChange the access permissions: `sudo chmod 600 power1ssh.pem` to be more\nrestrictive. \n\n## Appendix 1 Set up AWS IAM {#appendix-1} \n  \nTo initiate batch processing via the AWS cli app. \nSet up `aws` access via the `aws configure` program. \n\nTo get the needed credentials to configure command line `aws`\nuse the AWS IAM service. \n\nDetails follow: \n\nLog into `AWS` console. \n\nSearch for `IAM service`. Navigate to IAM dashboard. \n\nSelect `Users` in left hand panel.  \n\nThen select `Add Users` button (in upper right). \n\nThen enter a `User name` in the form. Click `Next` (lower right)\n\nThen `Create User`. \n\nClick on the user name\n\nIn the page that comes up. Select `Security Credentials` tab (center of page). \n\nUnder `Access Keys` panel click `Create access key` (right side or bottom of\npanel). \n\nClick `Command Line Interface CLI` \n\nand  at the bottom of the page click the checkbox \"I understand...\".\n\nFinally select `Create access key` and \n\nchoose `Download .csv file` (lower right). \n\nNavigate Download screen to local `~/.aws` directory. \n\nClick `Done`\n\nNow in the terminal on your workstation, configure the aws cli app via the command. \n\n```sh\n aws configure \n```\n\nEnter  info from the credentials file just downloaded. After entering the `AWS\nAccess Key ID` and `AWS Secret Access Key` information you are asked for a\nRegion, (my region is `us-west-1`),  and an output format (suggested output format is\n`JSON`). \n\n\n# Sample work session\n\nStart from scratch. Assume \n\n1. aws is configured. \n2. no security group\n3. no key pair\n4. vpc ID  and subnet ID known and stored in environment variables. \n5. project name is \"power1_app\"\n6. we'll spin up a ubuntu server with 30 GB hard drive. \n\nstep 1. generate security group named \"max_restrict\" \n\n> aws_create_security_group.sh\nget the sg ID from the script output and add to environment var list\n> echo \"export subnet_id='sg-0fda72c2879d6b2ad'\" >> ~/.zshrc\n\nstep 2. add key pair with name power1_app\n> aws_create_keypair.sh power1_app\n\nstep 3. get a new elastic IP address. \nnew IP is: \n204.236.167.50\n\n> echo \"export static_ip='204.236.167.50'\" >> ~/.zshrc\n\n> aws_create_instance.sh -p power1_app\n> sed -i '.bak' '/HostName/d' config\n> sed -i '.bak' '/Ide/d' config\n> echo \"HostName 204.236.167.50\" >> ~/.ssh/config\n> echo \"IdentityFile ~/.ssh/power1_app.pem\" >> ~/.ssh/config\n\nscp -i \"~/.ssh/power1_app.pem\" -r ~/prj/c060/docker_compose_power1_app/  ubuntu@rgtlab.org:~\nssh rgtlab.org\ncd docker_compose_power1_app/\nsudo docker-compose up -d\n"},"formats":{"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","number-sections":true,"toc":true,"output-file":"index.pdf"},"language":{},"metadata":{"block-headings":true,"margin-left":"30mm","margin-right":"60mm","license":"CC BY","toc-title":"Table of contents","toc-location":"left","author":[{"name":"Ronald (Ryy) Glenn Thomas","url":"https://rgtlab.org","affiliation":"UCSD","affiliation-url":"https://ucsd.edu","orcid":"0000-0003-1686-4965"}],"citation":true,"comments":{"giscus":{"repo":"rgt47/qblog","repo-id":"R_kgDOH6TO7A","category":"Announcements","category-id":"DIC_kwDOH5G3U84CRUp9","mapping":"pathname","reactions-enabled":true,"loading":"lazy","input-position":"bottom","theme":"light"}},"title":"Using the AWS command line interface to launch an EC2 server","description":"A single batch program to setup virtual server to host shiny app","categories":["AWS"],"image":"img/rshiny.png","date":"last-modified"},"extensions":{"book":{}}}}}