---
title: "
Writing a simple R package in S3. "
description: "Getting started with S3 OO programming in R"
categories: [AWS]
image: "img/rshiny.png"
editor: 
  markdown: 
    wrap: 72
#format:
#  pdf:
#    toc: true
#    date: "04-07-23"
---

```{r init, include=FALSE}


```
::: column-margin
![under construction](img/crane.jpg)
<font size="1"> Photo by
<a href="https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Nathan
Waters</a> on
<a href="https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</font>
:::

# Introduction

Ok! It time to step up my R programming to S3. But how to start? 

I'll begin by reading the relevant chapters in Advanced R (add reference). 

Other references: 

Introduction to Scientific Programming and Simulation using R. Jomes.
Maillardet, Robinson. 


A Simple Guide to S3 Methods | R-bloggers

Why your S3 method isn't working | R-bloggers

Dealing with S3 methods in R with a simple example | R-bloggers

Video on S3 Classes in R by Dr Andrew Robinson | R-bloggers

Unexported S3 Methods and R Packages | R-bloggers

Simple Guide to S3 Methods | R-bloggers

The S3 OOP system | R-bloggers


``` sh
   https://aws.amazon.com/console
```

Next choose regional service. For me its "N. California".

::: column-margin
![](img/aws_dash.png)
:::

Next create an account or sign in and navigate to the EC2 dashboard.  Its
through the dashboard that we'll define the parameters for the type of server to
launch
and the mechanisms for communicating with it. 

## AWS Working Environment

That is, along with selecting a server we'll need to set up a working
environment. We recommend setting up the working environment before launching
the server, as it saves some back and forth. This working environment consists of four
main components: 

1. A secure shell (ssh) key-pair to allow we to remotely and securely login to
the virtual server once its launched. 
2. A firewall to restrict access to only secure
connections. The firewall closes off all incoming traffic except through those
ports specifically named.  
3. A static IP address. This is required for maintaining the link
between the domain name and the server when rebooting. (The default is for the
instance/server to be assigned a new IP each time its rebooted.) 
and 
4. A domain name,
say rgtlab.org. A domain name is not required but will
facilitate collaborator access by not needing to use the IP address directly.

## Ssh key pair

The first time we create an AWS account we need to exchange an ssh key pair with
AWS. The pairs consist of a **private** and a **public** key. The pair of keys will allow us
to login securely to any server we launch on EC2. We can generate an ssh key
pair in one of two ways in EC2. Either, locally, on our workstation and upload
the public key to EC2, or have EC2 generate the key pair and download the
private key. 

For the first option
we create a directory on our workstation to hold the keys and navigate to it.
e.g. `~/.ssh`.    Generate the keys with the command

``` sh
ssh-keygen -m PEM
```

"PEM" defines the key format. More information on public key authentication can
be found 
[here](https://www.ssh.com/academy/ssh/public-key-authentication).
In the interactive dialog  name the key prefix something like `power1_app_ssh`.
The dialog will ask for a passphrase. Enter one for an additional level of
security, but its not required. 
The `ssh-keygen` program will generate two files: 
`power1_app_ssh` and 
`power1_app_ssh.pub`




To complete the process return to the  EC2 dashboard  select `Keys Pairs` in the
left panel. The select `Create key pair` botton in the upper right of the page. 

A form appears and asks for a name. Enter something like `power1_app_ssh`.
Select `RSA` for key pair type and `.pem` for key file format to match the
`ssh-keygen` process we went through on our workstation.  

asks for the location of the public key. Browse to the `~/.ssh` directory on
wer workstation
and import the public key `power1_app_ssh.pub`.

Give the pair a name, say `power1_app_ssh`, and the keys will be created and the private key
`power1_app_ssh.pem` will be downloaded to our local machine  to
the  `~/.ssh` directory. Change the access permissions for the private key with
the following command:


``` sh
sudo chmod 600 power1_app_ssh.pem
```

## Firewall


To create a firewall click on **Network settings** in the left hand panel.
Choose **Create security group** and select **Allow SSH traffic** and **Allow
HTTPS traffic**. 
This will create a firewall that leaves open only ports 22 and 443, for `ssh` and
`https` incoming traffic respectively. 
The default name for the firewall will be something like `launch-wizard-6`.
name the security group `power1_firewall`.  

## Static IP address

The next step is to use the `elastic IP` service to get a static IP that can be
assigned to the server. Navigate to **Network and Security** again and select
**Allocate Elastic IP**. An IP will be assigned from the EC2 pool of available IPv4 IP
addresses. 

## Domain Name

To obtain a dedicated domain name go to  Amazon route 53 
to select a domain name and associate it  with our static IP.


Once a domain name is acquired, e.g. `rgtlab.org`,  associate it with our static
IP address. This can be done via the `Route 53 `  service. To associate domain
name `rgtlab.org` with elastic IP do the following in Route 53:

-   click on `hosted zones` in side panel
-   click on `rgtlab.org` in center panel
-   click on checkbox for `rgtlab.org` type=A line
-   then click on edit record in right panel
-   change IP address to the static IP (e.g. 13.57.139.31).

::: column-margin
![](img/ec2a.png)
:::

# Select and launch instance

2.  From "Quick Start" in the EC2 dashboard select an operating system for the
server. Our recommendation is the `Ubuntu` OS. Ubuntu is based on linux. Click
the `Ubuntu` button.

-   Name the server, say power1

3.  Next choose an instance **type**, e.g. "t2-micro". Different
    instance types are combinations of, processors, memory, 
    storage capacity, and network performance.

4.  click **Configure Instance Details**

5.  choose a Key pair (use power1_app_ssh.rsa from wer environment) .

6.  Add security group, e.g. 'power1_firewall' from wer environment.

7.  choose 30 GB of EBS General Purpose (SSD) or Magnetic storage. Thirty GBs is
the maximum allowed in the 'Free tier' of servers on AWS. In our experience
smaller disk sizes can lead to problems. 

8.  click **Launch Instance**

to Launch the Instance.

## Access server

On wer laptop log into server with

``` sh
ssh -i "~/.ssh/power1_app_ssh.pem" ubuntu@rgtlab.org
```












# Appendix:  Tips 

::: {.callout-tip}

## Tip 1.

For convenience, construct a `config` file in `~/.ssh` as:

``` sh
Host rgtlab.org
HostName 13.57.139.31 # static IP
User ubuntu # default user on ubuntu server
Port 22  # the default port ssh uses
IdentityFile ~/.ssh/power1_app_ssh.rsa
```

then we can ssh into the new server with

``` sh
sh> ssh rgtlab.org
```
:::

# Appendix: Non-opinionated instructions

Open the Amazon EC2 console at <https://console.aws.amazon.com/ec2/>

From the top navigation bar, select a Region to create an instance in. For me its "N. California".


Create an account or sign in and navigate to the EC2 dashboard. 

In the left side panel select **Key Pairs** (under Network and Security).

At the top right select the **Create key pair** button. A **Key Pair** form will
open. 

Give the key pair a name. Something like  `power1_app_ssh`.  Select a key pair
type, suggest `RSA`. Select a **Private key file format**, suggest `.pem`

Below the form select the **Create key pair** button. 
A pair of keys will be created and the private key
`power1_app_ssh.pem` will be downloaded to we local machine. In my case to
the default `~/Downloads` directory. 

Move the file to the `~/.ssh` directory: `mv ~/Downloads/power1_app_ssh.pem ~/.ssh `

Change the access permissions: `sudo chmod 600 power1ssh.pem` to be more
restrictive. 

