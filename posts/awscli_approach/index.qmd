---
title: "Using the AWS command line interface to launch a EC2 server and docker compose"
description: "A single batch program to setup virtual server to host shiny app"
categories: [AWS]
image: "img/rshiny.png"
editor: 
  markdown: 
    wrap: 72
#format:
#  pdf:
#    toc: true
date: last-modified
#date: "2023-04-12"
---

```{r init, include=FALSE}


```
::: column-margin
![under construction](img/crane.jpg)
<font size="1"> Photo by
<a href="https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Nathan
Waters</a> on
<a href="https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</font>
:::

# Introduction

In a previous post ( [here](https://focusonr.org/posts/setupaws/)) we discussed setting up a virtual server on AWS using
the interactive EC2 dashboard. In this post we'll present a bash shell script to
perform the same task. 

To get started on your workstation configure the aws cli app via the command. 

```sh
 aws configure 
```
see Appendix 1 [here](#appendix-1) for details on obtaining IAM credentials from your AWS account. 



start up script. 
`awscli.sh`
```sh

#!/usr/bin/env bash
# given the following:
# vpc
# subnet
# aws configured
# id, secret, and output=json
# e.g. call awscli.sh power1_app
# command line arguments: 
echo $vpc_id
exit
while getopts v:s:a:g:i:p: flag
do
    case "${flag}" in
        v) vpc_id=${OPTARG};;
        s) subnet_id=${OPTARG};;
        a) ami_id=${OPTARG};;
        g) security_grp=${OPTARG};;
        i) static_ip=${OPTARG};;
        p) proj_name=${OPTARG};;
    esac
done
echo "vpc_id: $vpc_id";
echo "subnet_id: $subnet_id";
echo "ami_id: $ami_id";
echo "security_grp: $security_grp";
echo "static_ip: $static_ip";
echo "proj_name: $proj_name";

base=`basename $PWD`
if [ "$#" -ne 1 ]
then
  proj=$base
else proj=$1
fi

# aws environment ids
# -v
vpc_id="vpc-14814b73"
# -s
subnet_id="subnet-f02c90ab"
# -a
ami_id="ami-014d05e6b24240371"
# -g
security_grp="sg-04d0db0a59182add5"
# -i
static_ip="13.57.139.31"
# -d
proj_name="power1_app"


exit
aws ec2 create-security-group \
    --group-name max_restrict \
    --description "most restrictive l2 and 443 only" \
    --tag-specifications
    'ResourceType=security-group,Tags=[{Key=Name,Value=max_restrict-sg}]' \
    --vpc-id "vpc-14814b73"

aws ec2 authorize-security-group-ingress \
    --group-id $security_grp \
    --protocol tcp \
    --port 22 \
    --cidr "0.0.0.0/0" 


aws ec2 authorize-security-group-ingress \
    --group-id $security_grp \
    --protocol tcp \
    --port 443 \
    --cidr "0.0.0.0/0" 


aws ec2 create-key-pair  --key-name  $proj_name \
   --query 'KeyMaterial' --output text > ~/.ssh/$proj_name.pem

aws ec2 run-instances \
    --image-id $ami_id \
    --count 1 \
    --instance-type t2.micro \
    --key-name $proj_name \
    --security-group-ids $security_grp \
    --subnet-id $subnet_id \
    --block-device-mappings "[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"VolumeSize\":30}}]" \
    --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$proj_name}]"  \
    --user-data file://~/Dropbox/prj/qblog/posts/awscli_approach/aws_startup.sh

cd ~/.ssh 
chmod 600 ~/.ssh/$proj_name.pem

iid=`aws ec2 describe-instances --filters "Name=tag:Name,Values=$proj_name" | \
	jq -r '.Reservations[].Instances[].InstanceId'`


aws ec2 associate-address --public-ip $static_ip --instance-id $iid

ssh rgtlab.org 'sudo docker compose up'
```

`aws_startup.sh`

```sh

#!/bin/bash
snap install docker
git clone https://rgt47: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@github.com/rgt47/docker_compose_power1_app.git
wait
cp -R docker_compose_power1_app/ ~ubuntu
cd ~ubuntu
sudo chown -R ubuntu:ubuntu ~ubuntu/docker_compose_power1_app/
cd ~ubuntu/docker_compose_power1_app
```

::: {.callout-tip}

## Tip 1.

For convenience, construct a `config` file in `~/.ssh` as:

``` sh
Host rgtlab.org
HostName 13.57.139.31 # static IP
User ubuntu # default user on ubuntu server
Port 22  # the default port ssh uses
IdentityFile ~/.ssh/power1_app_ssh.rsa
```

then we can ssh into the new server with

``` sh
sh> ssh rgtlab.org
```
:::

Change the access permissions: `sudo chmod 600 power1ssh.pem` to be more
restrictive. 

## Appendix 1 Set up AWS IAM {#appendix-1} 
  

Set up `aws` access via the `aws configure` program. To get the needed credentials
use the AWS IAM service. 

Details follow: 

Log into `AWS` console. 

Search for `IAM service`. Navigate to IAM dashboard. 

Select `Users` in left hand panel.  

Then select `Add Users` button (in upper right). 

Then enter a `User name` in the form. Click `Next` (lower right)

Then `Create User`. 

Click on the user name

In the page that comes up. Select `Security Credentials` tab (center of page). 

Under `Access Keys` panel click `Create access key` (right side or bottom of
panel). 

Click `Command Line Interface CLI)` 

and  at the bottom of the page click the checkbox "I understand...".

Finally select `Create access key` and 

choose `Download .csv file` (lower right). 

Navigate Download screen to local `~/.aws` directory. 

Click `Done`

Now in the terminal on your workstation, configure the aws cli app via the command. 

```sh
 aws configure 
```

Enter  info from the credentials file just downloaded. After entering the `AWS
Access Key ID` and `AWS Secret Access Key` information you are asked for a
Region, (My region is `us-west-1`),  and an output format suggested output format is
`JSON`. 
