---
title: "Seven step  process for securely hosting Shiny apps online"
description: "This is the first in a series of posts offering suggested strategies for leveraging open source technologies to effectively host data science analysis results online."
subtitle: "Github, Docker-compose, EC2 version"
date: "2022-09-18"
categories: [Docker, Shiny]
image: "img/rshiny.png"
editor: 
  markdown: 
    wrap: 72
---

```{r init, include=FALSE}


options(dplyr.print_max = 1e9)
library(pacman)

p_load(jpeg, rmarkdown, tidyverse,  broom,  tidyr,  purrr,readr,knitr, 
       dplyr,  lubridate, zoo,  ggplot2, printr, lsmeans, ggthemes,  knitr,
       nlme, pwr)

opts_chunk$set(warning = F, message = F, echo=F, fig.width=3.2,
	       fig.height=3,  results='asis', dev='pdf',
	       opts_chunk$set(cache.path = "cache/"))
source('~/shr/zz.tools.R')
options(scipen = 1, digits = 2)
```

::: column-body
![under construction](img/crane.jpg)
:::

<font size="1"> Photo by
<a href="https://unsplash.com/@nathangwaters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Nathan
Waters</a> on
<a href="https://unsplash.com/s/photos/construction?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</font>

# Introduction

This is the first in a series of posts offering suggested strategies for
leveraging open source technologies to provide straight-forward
solutions to one of the central challenges in the practice of data
science, i.e. how to effectively communicate analysis results to clients
and collaborators. The list of open-source technologies (or stack) we'll
employ is: linux, R, Shiny, Caddy, git, and Docker. We'll make use of
two cloud services github and AWS.

This initial post provides a minimal, proof-of-concept example of how to
apply these technologies for hosting an interactive shiny application.

We start with a very simple, but hopefully still useful, stand-alone
shiny app on our local workstation and push it into the cloud and end
with a secure (encrypted and authenticated) app running on a website
with a custom domain name. The approach described here is intentionally
minimalist.

# Methods

To begin, lets assume we're just finished developing a new shiny app,
named `power0` . (The methods described here apply to any shiny app, but
to provide a concrete example we've created our own app). See the code
for our `power0` shiny app \[here\] (#appendix-1) in appendix 1.

We can test the app locally by runnning it with the command (from the
`power0` directory).

``` sh
R -e "runApp('power0.R')"
```

A screenshot of the finished product shows a shiny app with a widget to
select the sample size and a visualization (2D plot) of the power as a
function of the standardized effect size:

::: column-body
![](img/shinyapppower0.png)
:::

Once we determine the app is working as designed, we can move on to
hosting the app on a (virtual) server to share with our collaborators.
There are many ways to accomplish this. Here we'll demonstrate, in a
nutshell, in our opinion, one of the most straightforward and efficient
approaches. That is, we'll 'spin' up a server on Amazon Web Service EC2
and run docker containers to provide R, shiny, and caddy webserver
functionality.

# Hosting

::: column-body
![*Figure 1*](img/blogdockerizeflow.png)
:::

Figure 1 illustrates the tools we'll use and the flow of program and
configuration files. In order to host `power0` online we'll need the
following :

1.  a virtual server (connected via ssh) with firewall
2.  a static IP address (to identify the server online)
3.  a domain name (name for IP address)
4.  a webserver (tool to interact with https protocol requests and
    respond)
5.  an SSL certificate (to allow encrypted communication)
6.  an authentication method (password protection)
7.  a reverse proxy method (translate https (port 443) requests to shiny
    (port 3838)

At first glance these 7 requirements can appear daunting, but on closer
inspection all can be met with relative ease and minimal or no cost.

This can be done at no cost if you have your own (self-hosted) server
with IP address, and domain name, or at minimal cost using a
cloud-hosting service (e.g. Amazon's EC2 or Digital Ocean) and a
"leased" domain name from, e.g. GoDaddy, or Amazon's Route 53.

## Select a hosting service

There are a number of cloud based server options: Microsoft Azure,
Oracle, Google Cloud, Amazon AWS EC2, Digital Ocean to name a few. Each
has their own approach to setting up a custom virtual server. Several
have free or low-cost service tiers available.

Specific instructions for AWS EC2 are [here](#appendix-2) in appendix 2.

Once the server is available connect via ssh and login, The only
necessary software to install is docker, docker-compose and git. Install
all 3 with the following command:

``` sh
sudo apt install -y git docker docker-compose
```

Once the host is set up and the requisite software installedh we'll have
a customized virtual server wtih a static IP address, and unique domain
name and firewall in place. In other words, items 1, 2, and 3 from our
list will be taken care of.

# Website

To configure the web server and containerize our app we need to add
three files to the server, to go along with our shiny app in the
`power0` directory (in the home directory for default user `ubuntu`).

The easiest way to do this is to add the three files to the power0
directory on our workstation and then "push" a copy to github and from
there we can access them from our server.

These three configuation files are:

-   a Caddyfile
-   a Dockerfile
-   a docker-compose.yml file

Lets discuss each. We'll use Caddy as our web server. Caddy is an
open-source tool that has the very useful feature of automating the
acquiring and installing of an SSL certificate. An SSL cert is required
to use the encrypted communication protocol https.

Caddy is configured with a file named `Caddyfile`. We use the caddyfile
to specify three critical things.

1.  the site domain name.
2.  the authentication pair login/hash-password, for each user and
3.  the 'reverse proxy' map that redirects requests to port 443 (ssl
    port) to port 3838 (shiny port).

Our Caddyfile looks like this:

```{r echo=T, eval=F}
#| code-fold: true
#| code-summary: "Show the code"
rgtlab.org {
#auth credentials: bob/utter
basicauth * {
		bob JDJhJDE0JElCQmRGaTA0ajY3bkZTLjRiWUZ4enVoZnVSQzVXVGVUMHlVcXJTaTRGYmpRQVFHLnYzN0tx
	}
	handle_path /power0/* {
		reverse_proxy power0:3838
	}
}

```

We can accomplish what we need for items 4, 5 and 6 through the
Caddyfile.

Note:

-   rgtlab.org is our domain name
-   basicauth provides user login information. In this case `bob` is the
    user
-   name and `thebunny` is the password.
-   `handle_path` maps all https requests to port 3838 where shiny is
    listening.

Providing our servers domain name, `rgtlab.org` is sufficient to
initiate an exchange with `letsencrypt` to generates an SSL certificate.

The second file is the dockerfile. In its simplest form it instructs
Docker to build a container based on a Rocker/Shiny image which is a
ubuntu image with R and shiny installed then copy in the `power0.R` code
and launch shiny on (default) port 3838.

::: column-body
![](img/docker1.jpg)
:::

<font size="1"> Photo by
<a href="https://unsplash.com/@carrier_lost?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Ian
Taylor</a> on
<a href="https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</font>

Here is our dockerfile:

```{r echo=T, eval=F}
#| code-fold: true
#| code-summary: "Show the code"
FROM rocker/shiny:4.2.0
COPY power0.R /srv/shiny-server/
USER shiny
CMD ["/usr/bin/shiny-server"]

```

And the third file is the docker compose file that containerizes our
shiny app, pulls a caddy webserver image from Docker Hub and creates a
local network for the two containers to communicate in.

The docker-compose.yml file:

```{r echo=T, eval=F}
#| code-fold: true
#| code-summary: "Show the code"
version: "3.7"

services:
  power0:
    build: .
  caddy:
    image: caddy:2.3.0-alpine
    ports:
      - "443:443"
    volumes:
      - $PWD/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
volumes:
    caddy_data:
```

To generate a password for say foobar.

``` sh
docker-compose run caddy caddy hash-password foobar
```

Once in place push the four files (power0.R, Dockerfile, Caddyfile,
docker-compose.yml) to github

``` sh
git push

 and then login to server and clone repo.

```sh
git clone https:// ???
```

Lastly, cd to `power0` directory and run

``` sh
docker-compose up -d
```

and you're good to go!

The app `power0` can be accessed by 'bob' at the url

``` sh
https://rgtlab.org/power0
```

with password 'thebunny'

# Appendix-1

Consider an app that is a balance of simple and functional -- one that
calculates the power for a 2-sample t-test as a function of the
standardized effect size. re is our shiny app `power0.R`:

Consider the power0.R file:

``` sh

ui <- fluidPage(
titlePanel("Power Calculator for Two Group Parallel Designs"),
sliderInput("N", "Total Sample Size:", min = 0, max = 300, value = 100),
plotOutput("plot"),
verbatimTextOutput("eff"))

server <- function(input, output, session) {
  delta = seq(0, 1.5,.05)
  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))
  eff =  renderText(power.t.test(input$N, power=.8)$d)
  output$plot <- renderPlot({
  plot(delta, pow(), cex=1.5, ylab="power")
  abline(h = .8,  col = "red", lwd =2.5, lty = 4)
  abline(v = eff(), col = "blue",lwd =2.5, lty = 4)})  
  output$eff <- renderText(
    paste0("Std. effect detectable with power 80% = ", eff()) )
}
shinyApp(ui, server)
```

The app is designed to be maximally minimal. Using only base R
functions, with a minimum of reactive widgets and layout commands to
keep it simple while still performing a useful function.

# Appendix-2 {#appendix-2}

AWS is a reasonable choice for setting up a small custom server. AWS
offers a free set of servers for the first 12 months.

To start open the EC2 console.

``` sh
   https://aws.amazon.com/console
```

::: column-body
![](img/ec2a.png)
:::

Create an account or sign in. Next set up a working environment.
Specifically you'll want to set up four components of the environment:

1.  Ssh key pair
2.  Firewall
3.  Static IP
4.  Domain Name

The first time you create an AWS account you need to exchange an SSH key
pair with AWS. You can generate the ssh key pair locally on you
workstation and upload the public key to EC2. To do this create a
directory to hold the keys. e.g. `~/.ssh`. From inside `.ssh` directory
you can generate the keys with the command

``` sh
ssh-keygen -m PEM
```

in the dialog that ensues name the key prefix something like `ssh-rsa`.

Back in the browser on EC2 select `security/keys`, A dialog starts and
asks for the location of the public key. Browse to the `.ssh` directory
and import the public key `ssh-rsa.pub`.

# Set up firewall

A very restrictive firewall is recommended. Only https and ssh packets
are needed. To construct the firewall click on:

FIREWALL TBD

# Set up static IP address

Use "elastic IP" to get a static IP that can be assigned to the server

-   click on elastic IP in left panel
-   select associate Elastic IP 13.57.139.31 choose an instance
    (shiny-july22) to associate with.
-   side panel, click "ec2"
-   side panel, click "Instances"
-   from top bar, click "Launch Instances"

2.  From "Quick Start" click Ubuntu button.

-   Name the server, say shiny-july22
-   Choose an AMI (instance template, operating system):

Suggest choose "Ubuntu Server 22.04 LTS", but other linux distributions
can be utilized, e.g.u Red Hat, or SUSE.)

3.  Next choose an instance **type**, e.g. "t2-micro". (different
    instance types are mixtures of size, processors, memory, instance
    storage, network performance) click "Next: Configure Instance
    Details"

4.  choose Key pair (use in place aws18.pem) or set up new pair

5.  Add security group, e.g. 'shiny' (sg-0f37c94ac1e1b6250) allowing
    ports 80 (http), 22 (ssh), 443 (https), and 3838 (shiny). and 8787

6.  choose 30 GB of EBS General Purpose (SSD) or Magnetic storage

7.  click Launch Instance

Log into new instance with ssh from local

``` sh
ssh -i ~/.ssh/aws18.pem ubuntu@13.57.139.31
```

# Get Domain Name

Go to godaddy.com or Amazon route 53 to associate a domain name with the
Elastic IP in EC2.

(screenshot)

Once a domain name is obtained, eg rgtlab.com you want to associate it
with your static IP address. To associate domain name rgtlab.org with
elastic IP in EC2 do as follows.

in Route 53:

-   click on 'hosted zones' in side panel
-   click on rgtlab.org in center panel
-   click on checkbox for rgtlab.org type=A line
-   then click on edit record in right panel
-   change ip address to 13.57.139.31

# Appendix Tips

## Tip 1.

For convenience, construct a `config` file in `~/.ssh` as:

``` sh
Host ec2
HostName 13.57.139.31 # static IP
User ubuntu # default user on ubuntu server
Port 22  # the default port ssh uses
IdentityFile ~/.ssh/ssh-rsa
```

then you can ssh into the new server with

``` sh
sh> ssh ec2
```

## Tip 2: Add ubuntu to the docker group to allow docker to run without sudo.

# appendix x (joe data version)

ok! got my shiny app running. Works great! Now how do I get it up on the
web and shared with my client Bob?

Start by creating a repo for the app on github.

-   login to github (screenshot)

::: column-body
![](img/git1.png)
:::

-   click on `new` . Then in `repository name` field enter `power1`.
    (Make the
-   repo private, we only want to share with Bob at this point).
-   create repo. Click `Create repository` green button at the bottom of
    the page.
-   back in a terminal window on your laptop: clone the repo

``` sh
git clone https://github.com/rgt47/power1.git
```

-   Create a Dockerfile to dockerize the shiny app.

The simplist Dockerfile grabs a pre-built image (say rocker/shiny) from
Dockerhub and copies the shiny app code (app.R) to the default location
on the docker image, and then runs shiny-server. Here's the file. Copy
it into the working directory and name it `Dockerfile`.

Here is our dockerfile:

```{r echo=T, eval=F}
FROM rocker/shiny:4.2.0
COPY app.R /srv/shiny-server/
USER shiny
CMD ["/usr/bin/shiny-server"]
```

-   Install Docker on your laptop. Instructions here:
    https://docs.docker.com/engine/install/
-   Bulid and run the docker image to test it locally
    -   docker build -t app4 .
    -   docker run --rm -p 3838:3838 app4
-   copy `power1.R` and `Dockerfile` from working directory `app4` to
    the `power1` repo directory.

``` sh
cd ~/prj/app4/app.R ~/prj/app4/Dockerfile ~/prj/power1
```

-   from inside the `power1` directory, update remote repository
    -   git add .
    -   git commit -m 'add shiny code'
    -   git push
-   All good? Ok, now we need a (virtual) server to host the app. Let
    use Amazon AWS.
